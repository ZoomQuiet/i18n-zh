<?xml version="1.0"?>
<book xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="svn">
  <info>
    <title>Version Control with Subversion</title>
    <subtitle>For Subversion 1.5(Compiled from r2907)</subtitle>
    <edition>Second</edition>
    <biblioid class="isbn">?-?????-???-?</biblioid>
    <authorgroup>
      <author>
        <personname>
          <firstname>Ben</firstname>
          <surname>Collins-Sussman</surname>
        </personname>
      </author>
      <author>
        <personname>
          <firstname>Brian W.</firstname>
          <surname>Fitzpatrick</surname>
        </personname>
      </author>
      <author>
        <personname>
          <firstname>C. Michael</firstname>
          <surname>Pilato</surname>
        </personname>
      </author>
    </authorgroup>
    <editor>
      <personname>
        <firstname>Tatiana</firstname>
        <surname>Apandi</surname>
      </personname>
    </editor>
    <pagenums>350 pages (est.)</pagenums>
    <pubdate>(TBA)</pubdate>
    <copyright>
      <year>2002</year>
      <year>2003</year>
      <year>2004</year>
      <year>2005</year>
      <year>2006</year>
      <year>2007</year>
      <holder>Ben Collins-Sussman</holder>
      <holder>Brian W. Fitzpatrick</holder>
      <holder>C. Michael Pilato</holder>
    </copyright>
    <legalnotice>
      <para>This work is licensed under the Creative
      Commons Attribution License.  To view a copy of this license,
      visit <uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://creativecommons.org/licenses/by/2.0/">http://creativecommons.org/licenses/by/2.0/</uri>
      or send a letter to Creative Commons, 559 Nathan Abbott Way,
      Stanford, California 94305, USA.</para>
    </legalnotice>
  </info>
  <!-- External entity refs -->
  <!-- There doesn't seem to be a 'foreword' element similar to the
'preface' element.  Not sure what to use instead; I guess 'preface' is
the best solution for now, even though there's also a real preface in
ch00.xml. -->
  <preface xml:id="svn.foreword">
    <info>
      <title>Foreword</title>
      <author>
        <personname>
          <firstname>Karl</firstname>
          <surname>Fogel</surname>
        </personname>
      </author>
      <pubdate>Chicago, March 14, 2004</pubdate>
    </info>
    <para>A bad Frequently Asked Questions (FAQ) sheet is one that is
    composed not of the questions people actually asked, but of the
    questions the FAQ's author <emphasis>wished</emphasis> people
    had asked.  Perhaps you've seen the type before:</para>
    <blockquote>
      <para>Q: How can I use Glorbosoft XYZ to maximize team
      productivity?</para>
    </blockquote>
    <blockquote>
      <para>A: Many of our customers want to know how they can
      maximize productivity through our patented office groupware
      innovations.  The answer is simple: first, click on the
      <quote><literal>File</literal></quote> menu, scroll down to
      <quote><literal>Increase&#xA0;Productivity</literal></quote>,
      then&#x2026;</para>
    </blockquote>
    <para>The problem with such FAQs is that they are not, in a
    literal sense, FAQs at all.  No one ever called the tech support
    line and asked, <quote>How can we maximize
    productivity?</quote>.  Rather, people asked highly specific
    questions, like, <quote>How can we change the calendaring system
    to send reminders two days in advance instead of one?</quote>
    and so on.  But it's a lot easier to make up imaginary
    Frequently Asked Questions than it is to discover the real ones.
    Compiling a true FAQ sheet requires a sustained, organized
    effort: over the lifetime of the software, incoming questions
    must be tracked, responses monitored, and all gathered into a
    coherent, searchable whole that reflects the collective
    experience of users in the wild.  It calls for the patient,
    observant attitude of a field naturalist.  No grand
    hypothesizing, no visionary pronouncements here&#x2014;open eyes
    and accurate note-taking are what's needed most.</para>
    <para>What I love about this book is that it grew out of just such
    a process, and shows it on every page.  It is the direct result
    of the authors' encounters with users.  It began with Ben
    Collins-Sussman's observation that people were asking the same
    basic questions over and over on the Subversion mailing lists:
    What are the standard workflows to use with Subversion?  Do
    branches and tags work the same way as in other version control
    systems?  How can I find out who made a particular change?</para>
    <para>Frustrated at seeing the same questions day after day, Ben
    worked intensely over a month in the summer of 2002 to write
    <citetitle>The Subversion Handbook</citetitle>, a sixty page
    manual that covered all the basics of using Subversion.  The
    manual made no pretense of being complete, but it was
    distributed with Subversion and got users over that initial hump
    in the learning curve.  When O'Reilly and Associates decided to
    publish a full-length Subversion book, the path of least
    resistance was obvious: just expand the Subversion
    handbook.</para>
    <para>The three co-authors of the new book were thus presented
    with an unusual opportunity.  Officially, their task was to
    write a book top-down, starting from a table of contents and an
    initial draft.  But they also had access to a steady
    stream&#x2014;indeed, an uncontrollable geyser&#x2014;of bottom-up
    source material.  Subversion was already in the hands of
    thousands of early adopters, and those users were giving tons of
    feedback, not only about Subversion, but about its existing
    documentation.</para>
    <para>During the entire time they wrote this book, Ben, Mike, and
    Brian haunted the Subversion mailing lists and chat rooms
    incessantly, carefully noting the problems users were having in
    real-life situations.  Monitoring such feedback was part of their
    job descriptions at CollabNet anyway, and it gave them a huge
    advantage when they set out to document Subversion.  The book
    they produced is grounded firmly in the bedrock of experience,
    not in the shifting sands of wishful thinking; it combines the
    best aspects of user manual and FAQ sheet.  This duality might
    not be noticeable on a first reading.  Taken in order, front to
    back, the book is simply a straightforward description of a
    piece of software.  There's the overview, the obligatory guided
    tour, the chapter on administrative configuration, some advanced
    topics, and of course a command reference and troubleshooting
    guide.  Only when you come back to it later, seeking the
    solution to some specific problem, does its authenticity shine
    out: the telling details that can only result from encounters
    with the unexpected, the examples honed from genuine use cases,
    and most of all the sensitivity to the user's needs and the
    user's point of view.</para>
    <para>Of course, no one can promise that this book will answer
    every question you have about Subversion.  Sometimes, the
    precision with which it anticipates your questions will seem
    eerily telepathic; yet occasionally, you will stumble into a
    hole in the community's knowledge, and come away empty-handed.
    When this happens, the best thing you can do is email
    <email>users@subversion.tigris.org</email> and present your
    problem.  The authors are still there, still watching, and they
    include not just the three listed on the cover, but many others
    who contributed corrections and original material.  From the
    community's point of view, solving your problem is merely a
    pleasant side effect of a much larger project&#x2014;namely,
    slowly adjusting this book, and ultimately Subversion itself, to
    more closely match the way people actually use it.  They are
    eager to hear from you not merely because they can help you, but
    because you can help them.  With Subversion as with all active
    free software projects, <emphasis>you are not
    alone</emphasis>.</para>
    <para>Let this book be your first companion.</para>
  </preface>
  <!--
local variables: 
sgml-parent-document: ("book.xml" "foreword")
end:
-->
  <preface xml:id="svn.preface">
    <info>
      <title>Preface</title>
    </info>
    <blockquote>
      <attribution>Greg Hudson</attribution>
      <para>
        <quote>It is important not to let the perfect become the
      enemy of the good, even when you can agree on what perfect is.
      Doubly so when you can't.  As unpleasant as it is to be trapped by
      past mistakes, you can't make any progress by being afraid of your
      own shadow during design.</quote>
      </para>
    </blockquote>
    <para><indexterm><primary>Concurrent Versions System (CVS)</primary></indexterm>

    In the world of open-source software, the Concurrent Versions
    System (CVS) was the tool of choice for version control for many
    years.  And rightly so.  CVS was open-source software itself, and
    its non-restrictive modus operandi and support for networked
    operation allowed dozens of geographically dispersed programmers
    to share their work.  It fit the collaborative nature of the
    open-source world very well.  CVS and its semi-chaotic development
    model have since become cornerstones of open-source
    culture.</para>
    <para>But CVS was not without its flaws, and simply fixing those
    flaws promised to be an enormous effort.  Enter Subversion.
    Designed to be a successor to CVS, Subversion's originators set
    out to win the hearts of CVS users in two ways&#x2014;by creating
    an open-source system with a design (and <quote>look and
    feel</quote>) similar to CVS, and by attempting to avoid most of
    CVS's noticeable flaws.  While the result isn't necessarily the
    next great evolution in version control design, Subversion
    <emphasis>is</emphasis> very powerful, very usable, and very
    flexible.  And for the most part, almost all newly-started
    open-source projects now choose Subversion instead of CVS.</para>
    <para>This book is written to document the 1.5 series of the
    Subversion version control system.  We have made every attempt to
    be thorough in our coverage.  However, Subversion has a thriving
    and energetic development community, so there are already a number
    of features and improvements planned for future versions of
    Subversion that may change some of the commands and specific notes
    in this book.</para>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.preface.audience">
      <info>
        <title>Audience</title>
      </info>
      <para>This book is written for computer-literate folk who want to
      use Subversion to manage their data.  While Subversion runs on a
      number of different operating systems, its primary user
      interface is command-line based.  That command-line tool
      (<command>svn</command>), and some auxiliary programs, are the
      focus of this book.</para>
      <para>For consistency, the examples in this book assume the reader
      is using a Unix-like operating system and is relatively comfortable
      with Unix and command-line interfaces.  That said, the
      <command>svn</command> program also runs on non-Unix platforms
      like Microsoft Windows.  With a few minor exceptions, such as
      the use of backward slashes (<literal>\</literal>) instead of
      forward slashes (<literal>/</literal>) for path separators, the
      input to and output from this tool when run on Windows are
      identical to its Unix counterpart.</para>
      <para>Most readers are probably programmers or system
      administrators who need to track changes to source code.  This
      is the most common use for Subversion, and therefore it is the
      scenario underlying all of the book's examples.  But Subversion
      can be used to manage changes to any sort of
      information&#x2014;images, music, databases, documentation, and
      so on.  To Subversion, all data is just data.</para>
      <para>While this book is written with the assumption that the
      reader has never used a version control system, we've also tried
      to make it easy for users of CVS (and other systems) to make a
      painless leap into Subversion.  Special sidebars may mention
      other version control systems from time to time, and a special
      appendix summarizes many of the differences between CVS and
      Subversion.</para>
      <para>Note also that the source code examples used throughout the
      book are only examples.  While they will compile with the proper
      compiler incantations, they are intended to illustrate a
      particular scenario, not necessarily serve as examples of good
      programming style or practices.</para>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.preface.howread">
      <info>
        <title>How to Read this Book</title>
      </info>
      <para>Technical books always face a certain dilemma: whether to
      cater to <firstterm>top-down</firstterm>
      or <firstterm>bottom-up</firstterm> learners.  A top-down
      learner prefers to read or skim documentation, getting a large
      overview of how the system works; only then does she actually
      start using the software.  A bottom-learner is a <quote>learn by
      doing</quote> person, someone who just wants to dive into the
      software and figure it out as she goes, referring to book
      sections when necessary.  Most books tend to be written for one
      type of person or the other, and this book is undoubtedly biased
      towards top-down learners.  (And if you're actually reading this
      section, you're probably already a top-down learner yourself!)
      However, if you're a bottom-up person, don't despair.  While the
      book may be laid out as a broad survey of Subversion topics, the
      contents of each section tends to be heavy with specific
      examples that you can try-by-doing.  For the impatient folks who
      just want to get going, you can jump right to
      <xref linkend="svn.intro"/>.</para>
      <para>Regardless of your learning style, this book aims to be
      useful to people of widely different backgrounds&#x2014;from
      people with no previous experience in version control to
      experienced system administrators.  Depending on your own
      background, certain chapters may be more or less important to
      you.  The following can be considered a
      <quote>recommended reading list</quote> for various types of
      readers:</para>
      <variablelist>
        <varlistentry>
          <term>Experienced System Administrators</term>
          <listitem>
            <para>The assumption here is that you've probably used
            version control before before, and are dying to get a
            Subversion server up and running ASAP.
            <xref linkend="svn.reposadmin"/> and
            <xref linkend="svn.serverconfig"/> will show you how to
            create your first repository and make it available over
            the network.  After that's done,
            <xref linkend="svn.tour"/> and
            <xref linkend="svn.forcvs"/> are the fastest routes to
            learning the Subversion client.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>New users</term>
          <listitem>
            <para>Your administrator has probably set up Subversion
            already, and you need to learn how to use the client.  If
            you've never used a version control system, then
            <xref linkend="svn.basic"/> is a vital introduction to the
            ideas behind version control.  <xref linkend="svn.tour"/>
            is a guided tour of the Subversion client.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Advanced users</term>
          <listitem>
            <para>Whether you're a user or administrator, eventually
            your project will grow larger.  You're going to want to
            learn how to do more advanced things with Subversion, such
            as how to use branches and perform merges (<xref linkend="svn.branchmerge"/>), how to use Subversion's
            property support (<xref linkend="svn.advanced"/>), how to
            configure runtime options (<xref linkend="svn.customization"/>), and other things.  These
            chapters aren't critical at first, but be sure to read
            them once you're comfortable with the basics.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>Developers</term>
          <listitem>
            <para>Presumably, you're already familiar with Subversion,
            and now want to either extend it or build new software on
            top of its many APIs.  <xref linkend="svn.developer"/> is
            just for you.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>The book ends with reference material&#x2014;<xref linkend="svn.ref"/> is a reference guide for all Subversion
      commands, and the appendices cover a number of useful topics.
      These are the chapters you're mostly likely to come back to
      after you've finished the book.</para>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.preface.conventions">
      <info>
        <title>Conventions Used in This Book</title>
      </info>
      <para>This section covers the various conventions used in this
      book.</para>
      <!-- =============================================================== -->
      <section xml:id="svn.preface.conventions.typo">
        <info>
          <title>Typographic Conventions</title>
        </info>
        <variablelist>
          <varlistentry>
            <term>
              <command>Constant width</command>
            </term>
            <listitem>
              <para>Used for commands, command output, and options</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <replaceable>Constant width italic</replaceable>
            </term>
            <listitem>
              <para>Used for replaceable items in code and text</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <filename>Italic</filename>
            </term>
            <listitem>
              <para>Used for file and directory names</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.preface.conventions.icons">
        <info>
          <title>Icons</title>
        </info>
        <note>
          <para>This icon designates a note relating to the surrounding
          text.</para>
        </note>
        <tip>
          <para>This icon designates a helpful tip relating to the surrounding
          text.</para>
        </tip>
        <warning>
          <para>This icon designates a warning relating to the surrounding
          text.</para>
        </warning>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.preface.organization">
      <info>
        <title>Organization of This Book</title>
      </info>
      <para>The chapters that follow and their contents are listed
      here:</para>
      <variablelist>
        <varlistentry>
          <term>
            <xref linkend="svn.preface"/>
          </term>
          <listitem>
            <para>Covers the history of Subversion as well as its
              features, architecture, and components.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <xref linkend="svn.basic"/>
          </term>
          <listitem>
            <para>Explains the basics of version control and different
              versioning models, along with Subversion's repository,
              working copies, and revisions.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <xref linkend="svn.tour"/>
          </term>
          <listitem>
            <para>Walks you through a day in the life of a Subversion
              user.  It demonstrates how to use a Subversion client to
              obtain, modify, and commit data.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <xref linkend="svn.advanced"/>
          </term>
          <listitem>
            <para>Covers more complex features that regular users will
              eventually come into contact with, such as versioned
              metadata, file locking, and peg revisions.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <xref linkend="svn.branchmerge"/>
          </term>
          <listitem>
            <para>Discusses branches, merges, and tagging, including
              best practices for branching and merging, common
              use cases, how to undo changes, and how to easily swing
              from one branch to the next.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <xref linkend="svn.reposadmin"/>
          </term>
          <listitem>
            <para>Describes the basics of the Subversion repository,
              how to create, configure, and maintain a repository, and
              the tools you can use to do all of this.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <xref linkend="svn.serverconfig"/>
          </term>
          <listitem>
            <para>Explains how to configure your Subversion server and
              different ways to access your repository:
              <literal>HTTP</literal>, the <literal>svn</literal>
              protocol, and local disk access.  It also covers the details
              of authentication, authorization and anonymous
              access.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <xref linkend="svn.customization"/>
          </term>
          <listitem>
            <para>Explores the Subversion client configuration files,
              the handling of internationalized text, and how to make
              external tools cooperate with Subversion.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <xref linkend="svn.developer"/>
          </term>
          <listitem>
            <para>Describes the internals of Subversion, the
              Subversion filesystem, and the working copy
              administrative areas from a programmer's point of view.
              Demonstrates how to use the public APIs to write a
              program that uses Subversion, and most importantly, how
              to contribute to the development of Subversion.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <xref linkend="svn.ref"/>
          </term>
          <listitem>
            <para>Explains in great detail every subcommand of
              <command>svn</command>, <command>svnadmin</command>, and
              <command>svnlook</command> with plenty of examples for
              the whole family!</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <xref linkend="svn.intro"/>
          </term>
          <listitem>
            <para>For the impatient, a whirlwind explanation of how to
              install Subversion and start using it immediately.  You
              have been warned.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <xref linkend="svn.forcvs"/>
          </term>
          <listitem>
            <para>Covers the similarities and differences between
              Subversion and CVS, with numerous suggestions on how to
              break all the bad habits you picked up from years of
              using CVS.  Included are descriptions of Subversion
              revision numbers, versioned directories, offline
              operations, <command>update</command>
              vs. <command>status</command>, branches, tags, metadata,
              conflict resolution, and authentication.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <xref linkend="svn.webdav"/>
          </term>
          <listitem>
            <para>Describes the details of WebDAV and DeltaV, and how
              you can configure your Subversion repository to be
              mounted read/write as a DAV share.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <xref linkend="svn.3rdparty"/>
          </term>
          <listitem>
            <para>Discusses tools that support or use Subversion,
              including alternative client programs, repository
              browser tools, and so on.</para>
          </listitem>
        </varlistentry>
      </variablelist>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.preface.free">
      <info>
        <title>This Book is Free</title>
      </info>
      <para>This book started out as bits of documentation written by
      Subversion project developers, which were then coalesced into a
      single work and rewritten.  As such, it has always been under a
      free license.  (See <xref linkend="svn.copyright"/>.)  In fact,
      the book was written in the public eye, originally as a part of
      Subversion project itself.  This means two things:</para>
      <itemizedlist>
        <listitem>
          <para>You will always find the latest version of this book in
          the book's own Subversion repository.</para>
        </listitem>
        <listitem>
          <para>You can make changes to this book and redistribute it
          however you wish&#x2014;it's under a free license.  Your only
          obligation is to maintain proper attribution to the original
          authors.  Of course, rather than distribute your own private
          version of this book, we'd much rather you send feedback and
          patches to the Subversion developer community.</para>
        </listitem>
      </itemizedlist>
      <!-- O'REILLY SHOULD TWEAK THIS PARAGRAPH -->
      <para>The online home of this book's development and most of the
      volunteer-driven translation efforts around it is
      <uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://svnbook.red-bean.com">http://svnbook.red-bean.com</uri>.  There, you can find
      links to the latest releases and tagged versions of the book in
      various formats, as well as instructions for accessing the
      book's Subversion repository (where lives its DocBook XML source
      code).  Feedback is welcome&#x2014;encouraged, even.  Please
      submit all comments, complaints, and patches against the book
      sources to <email>svnbook-dev@red-bean.com</email>.</para>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.preface.acks">
      <info>
        <title>Acknowledgments</title>
      </info>
      <para>This book would not be possible (nor very useful) if
      Subversion did not exist.  For that, the authors would like to
      thank Brian Behlendorf and CollabNet for the vision to fund such
      a risky and ambitious new Open Source project; Jim Blandy for
      the original Subversion name and design&#x2014;we love you, Jim;
      Karl Fogel for being such a good friend and a great community
      leader, in that order.<footnote><para>Oh, and thanks, Karl, for
      being too overworked to write this book yourself.</para></footnote></para>
      <para>Thanks to O'Reilly and our editors, Linda Mui and Tatiana
      Diaz for their patience and support.</para>
      <para>Finally, we thank the countless people who contributed to
      this book with informal reviews, suggestions, and fixes: While
      this is undoubtedly not a complete list, this book would be
      incomplete and incorrect without the help of: David Anderson,
      Jani Averbach, Ryan Barrett, Francois Beausoleil, Jennifer
      Bevan, Matt Blais, Zack Brown, Martin Buchholz, Brane Cibej,
      John R. Daily, Peter Davis, Olivier Davy, Robert P. J. Day, Mo
      DeJong, Brian Denny, Joe Drew, Nick Duffek, Ben Elliston, Justin
      Erenkrantz, Shlomi Fish, Julian Foad, Chris Foote, Martin
      Furter, Vlad Georgescu, Dave Gilbert, Eric Gillespie, David
      Glasser, Matthew Gregan, Art Haas, Eric Hanchrow, Greg Hudson,
      Alexis Huxley, Jens B. Jorgensen, Tez Kamihira, David Kimdon,
      Mark Benedetto King, Andreas J. Koenig, Nuutti Kotivuori, Matt
      Kraai, Scott Lamb, Vincent Lefevre, Morten Ludvigsen, Paul
      Lussier, Bruce A. Mah, Philip Martin, Feliciano Matias, Patrick
      Mayweg, Gareth McCaughan, Jon Middleton, Tim Moloney,
      Christopher Ness, Mats Nilsson, Joe Orton, Amy Lyn Pilato, Kevin
      Pilch-Bisson, Dmitriy Popkov, Michael Price, Mark Proctor,
      Steffen Prohaska, Daniel Rall, Jack Repenning, Tobias Ringstrom,
      Garrett Rooney, Joel Rosdahl, Christian Sauer, Larry Shatzer,
      Russell Steicke, Sander Striker, Erik Sjoelund, Johan
      Sundstroem, John Szakmeister, Mason Thomas, Eric Wadsworth,
      Colin Watson, Alex Waugh, Chad Whitacre, Josef Wolf, Blair
      Zajac, and the entire Subversion community.</para>
      <!-- =============================================================== -->
      <section xml:id="svn.preface.acks.sussman">
        <info>
          <title>From Ben Collins-Sussman</title>
        </info>
        <para>Thanks to my wife Frances, who, for many months, got to
        hear, <quote>But honey, I'm still working on the book</quote>,
        rather than the usual, <quote>But honey, I'm still doing
        email.</quote>  I don't know where she gets all that patience!
        She's my perfect counterbalance.</para>
        <para>Thanks to my extended family and friends for their sincere
        encouragement, despite having no actual interest in the
        subject.  (You know, the ones who say, <quote>Ooh, you wrote a
        book?</quote>, and then when you tell them it's a computer
        book, sort of glaze over.)</para>
        <para>Thanks to all my close friends, who make me a rich, rich man.
        Don't look at me that way&#x2014;you know who you are.</para>
        <para>Thanks to my parents for the perfect low-level formatting,
        and being unbelievable role models.  Thanks to my son for the
        opportunity to pass that on.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.preface.acks.fitz">
        <info>
          <title>From Brian W. Fitzpatrick</title>
        </info>
        <!-- ### TODO(fitz):  update this? -->
        <para>Huge thanks to my wife Marie for being incredibly
        understanding, supportive, and most of all, patient.  Thank
        you to my brother Eric who first introduced me to UNIX
        programming way back when.  Thanks to my Mom and Grandmother
        for all their support, not to mention enduring a Christmas
        holiday where I came home and promptly buried my head in my
        laptop to work on the book.</para>
        <para>To Mike and Ben: It was a pleasure working with you on the
        book.  Heck, it's a pleasure working with you at work!</para>
        <para>To everyone in the Subversion community and the Apache
        Software Foundation, thanks for having me.  Not a day goes by
        where I don't learn something from at least one of you.
      </para>
        <para>Lastly, thanks to my Grandfather who always told me that
        <quote>freedom equals responsibility.</quote> I couldn't agree
        more.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.preface.acks.cmpilato">
        <info>
          <title>From C. Michael Pilato</title>
        </info>
        <para>Special thanks to Amy, my best friend and wife of nine
        incredible years, for her love and patient support, for
        putting up with the late nights, and for graciously enduring
        the version control processes I've imposed on her.  Don't
        worry, Sweetheart&#x2014;you'll be a TortoiseSVN wizard in no
        time!</para>
        <para>Gavin, there probably aren't many words in this book that
        you can successfully <quote>sound out</quote> at this stage,
        but when you've finally got a handle on the written form of
        this crazy language we speak, I hope you're as proud of your
        Daddy as he is of you.</para>
        <para>Aidan, Daddy luffoo et ope Aiduh yike contootoo as much as
        Aiduh yike batetball, base-ball, et bootball.
        <footnote><para>Translation: Daddy loves you and hopes you like
            computers as much as you like basketball, baseball, and
            football.  (Wasn't that obvious?)</para></footnote>
      </para>
        <para>Mom and Dad, thanks for your constant support and
        enthusiasm.  Mom- and Dad-in-law, thanks for all of the same
        <emphasis>plus</emphasis> your fabulous daughter.</para>
        <para>Hats off to Shep Kendall, through whom the world of
        computers was first opened to me; Ben Collins-Sussman, my
        tour-guide through the open-source world; Karl Fogel&#x2014;you
        <emphasis>are</emphasis> my <filename>.emacs</filename>; Greg
        Stein, for oozing practical programming know-how; Brian
        Fitzpatrick&#x2014;for sharing this writing experience with me.
        To the many folks from whom I am constantly picking up new
        knowledge&#x2014;keep dropping it!</para>
        <para>Finally, to the One who perfectly demonstrates creative
        excellence&#x2014;thank You.</para>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.intro.whatis">
      <info>
        <title>What is Subversion?</title>
      </info>
      <para>Subversion is a free/open-source version control system.
      That is, Subversion manages files and directories, and the
      changes made to them, over time.  This allows you to recover
      older versions of your data, or examine the history of how your
      data changed.  In this regard, many people think of a version
      control system as a sort of <quote>time machine</quote>.</para>
      <para>Subversion can operate across networks, which allows it to
      be used by people on different computers.  At some level, the
      ability for various people to modify and manage the same set of
      data from their respective locations fosters collaboration.
      Progress can occur more quickly without a single conduit through
      which all modifications must occur.  And because the work is
      versioned, you need not fear that quality is the trade-off for
      losing that conduit&#x2014;if some incorrect change is made to
      the data, just undo that change.</para>
      <para>Some version control systems are also software configuration
      management (SCM) systems.  These systems are specifically
      tailored to manage trees of source code, and have many features
      that are specific to software development&#x2014;such as natively
      understanding programming languages, or supplying tools for
      building software.  Subversion, however, is not one of these
      systems.  It is a general system that can be used to manage
      <emphasis>any</emphasis> collection of files.  For you, those
      files might be source code&#x2014;for others, anything from
      grocery shopping lists to digital video mixdowns and
      beyond.</para>
      <!-- =============================================================== -->
      <section xml:id="svn.intro.righttool">
        <info>
          <title>Is Subversion the Right Tool?</title>
        </info>
        <para>If you're a user or system administrator pondering the use
        of Subversion, the first question you should ask yourself is:
        "is this the right tool for the job?"  Subversion is a
        fantastic hammer, but be careful not to view every problem as
        a nail.</para>
        <para>If you need to archive old versions of files and
        directories, possibly resurrect them, or examine logs of how
        they've changed over time, then Subversion is exactly the
        right tool for you.  If you need to collaborate with people on
        documents (usually over a network) and keep track of who made
        which changes, then Subversion is also appropriate.  This is
        why Subversion is so often used in software development
        environments &#x2014; programming is an inherently social
        activity, and Subversion makes it easy to collaborate with
        other programmers.  Of course, there's a cost to using
        Subversion as well: administrative overhead.  You'll need to
        manage a data-repository to store the information and all its
        history, and be diligent about backing it up.  When working
        with the data on a daily basis, you won't be able to copy,
        move, rename, or delete files the way you usually do.
        Instead, you'll have to do all of those things through
        Subversion.</para>
        <para>Assuming you're fine with the extra workflow, you should
        still make sure you're not using Subversion to solve a problem
        that other tools solve better.  For example, because
        Subversion replicates data to all the collaborators involved,
        a common misuse is to treat it as a generic distribution
        system.  People will sometimes use Subversion to distribute
        huge collections of photos, digital music, or software
        packages.  The problem is, this sort of data usually isn't
        changing at all.  The collection itself grows over time, but
        the individual files within the collection aren't being
        changed.  In this case, using Subversion is
        "overkill".<footnote><para>Or as a friend puts
        it, <quote>swatting a fly with a
        Buick.</quote></para></footnote> There are simpler tools that
        efficiently replicate data <emphasis>without</emphasis> the
        overhead of tracking changes, such as <command>rsync</command>
        or <command>unison</command>.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.intro.history">
        <info>
          <title>Subversion's History</title>
        </info>
        <para><indexterm><primary>Subversion</primary><secondary>history of</secondary></indexterm>

        In early 2000, CollabNet, Inc. (<uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.collab.net">http://www.collab.net</uri>) began seeking developers to
        write a replacement for CVS.  CollabNet offers a collaboration
        software suite called CollabNet Enterprise Edition (CEE) of
        which one component is version control.  Although CEE used CVS
        as its initial version control system, CVS's limitations were
        obvious from the beginning, and CollabNet knew it would
        eventually have to find something better.  Unfortunately, CVS
        had become the de facto standard in the open source world
        largely because there <emphasis>wasn't</emphasis> anything
        better, at least not under a free license.  So CollabNet
        determined to write a new version control system from scratch,
        retaining the basic ideas of CVS, but without the bugs and
        misfeatures.</para>
        <para>In February 2000, they contacted Karl Fogel, the author of
        <citetitle>Open Source Development with CVS</citetitle>
        (Coriolis, 1999), and asked if he'd like to work on this new
        project.  Coincidentally, at the time Karl was already
        discussing a design for a new version control system with his
        friend Jim Blandy.  In 1995, the two had started Cyclic
        Software, a company providing CVS support contracts, and
        although they later sold the business, they still used CVS every
        day at their jobs.  Their frustration with CVS had led Jim to
        think carefully about better ways to manage versioned data, and
        he'd already come up with not only the name
        <quote>Subversion</quote>, but also with the basic design of the
        Subversion data store.  When CollabNet called, Karl immediately
        agreed to work on the project, and Jim got his employer, Red Hat
        Software, to essentially donate him to the project for an
        indefinite period of time.  CollabNet hired Karl and Ben
        Collins-Sussman, and detailed design work began in May.  With
        the help of some well-placed prods from Brian Behlendorf and
        Jason Robbins of CollabNet, and Greg Stein (at the time an
        independent developer active in the WebDAV/DeltaV specification
        process), Subversion quickly attracted a community of active
        developers.  It turned out that many people had had the same
        frustrating experiences with CVS, and welcomed the chance to
        finally do something about it.</para>
        <para>The original design team settled on some simple goals.  They
        didn't want to break new ground in version control methodology,
        they just wanted to fix CVS.  They decided that Subversion would
        match CVS's features, and preserve the same development model,
        but not duplicate CVS's most obvious flaws.  And although it did
        not need to be a drop-in replacement for CVS, it should be
        similar enough that any CVS user could make the switch with
        little effort.</para>
        <para>After fourteen months of coding, Subversion became
        <quote>self-hosting</quote> on August 31, 2001.  That is,
        Subversion developers stopped using CVS to manage Subversion's
        own source code, and started using Subversion instead.</para>
        <para>While CollabNet started the project, and still funds a large
        chunk of the work (it pays the salaries of a few full-time
        Subversion developers), Subversion is run like most open-source
        projects, governed by a loose, transparent set of rules that
        encourage meritocracy.  CollabNet's copyright license is fully
        compliant with the Debian Free Software Guidelines.  In other
        words, anyone is free to download, modify, and redistribute
        Subversion as he pleases; no permission from CollabNet or anyone
        else is required.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.intro.features">
        <info>
          <title>Subversion's Features</title>
        </info>
        <para>When discussing the features that Subversion brings to the
        version control table, it is often helpful to speak of them in
        terms of how they improve upon CVS's design.  If you're not
        familiar with CVS, you may not understand all of these features.
        And if you're not familiar with version control at all, your
        eyes may glaze over unless you first read <xref linkend="svn.basic"/>, in which we provide a gentle introduction
        to version control.</para>
        <para>Subversion provides:</para>
        <variablelist>
          <varlistentry>
            <term>Directory versioning</term>
            <listitem>
              <para>CVS only tracks the history of individual files, but
              Subversion implements a <quote>virtual</quote> versioned
              filesystem that tracks changes to whole directory trees
              over time.  Files <emphasis>and</emphasis> directories are
              versioned.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>True version history</term>
            <listitem>
              <para>Since CVS is limited to file versioning, operations
              such as copies and renames&#x2014;which might happen to
              files, but which are really changes to the contents of
              some containing directory&#x2014;aren't supported in CVS.
              Additionally, in CVS you cannot replace a versioned file
              with some new thing of the same name without the new item
              inheriting the history of the old&#x2014;perhaps completely
              unrelated&#x2014;file.  With Subversion, you can add,
              delete, copy, and rename both files and directories.  And
              every newly added file begins with a fresh, clean
              history all its own.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Atomic commits</term>
            <listitem>
              <para>A collection of modifications either goes into the
              repository completely, or not at all.  This allows
              developers to construct and commit changes as logical
              chunks, and prevents problems that can occur when only a
              portion of a set of changes is successfully sent to the
              repository.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Versioned metadata</term>
            <listitem>
              <para>Each file and directory has a set of
              properties&#x2014;keys and their values&#x2014;associated
              with it.  You can create and store any arbitrary key/value
              pairs you wish.  Properties are versioned over time, just
              like file contents.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Choice of network layers</term>
            <listitem>
              <para>Subversion has an abstracted notion of repository
              access, making it easy for people to implement new network
              mechanisms.  Subversion can plug into the Apache HTTP
              Server as an extension module.  This gives Subversion a
              big advantage in stability and interoperability, and
              instant access to existing features provided by that
              server&#x2014;authentication, authorization, wire
              compression, and so on.  A more lightweight, standalone
              Subversion server process is also available.  This server
              speaks a custom protocol which can be easily tunneled over
              SSH.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Consistent data handling</term>
            <listitem>
              <para>Subversion expresses file differences using a binary
              differencing algorithm, which works identically on both
              text (human-readable) and binary (human-unreadable) files.
              Both types of files are stored equally compressed in the
              repository, and differences are transmitted in both
              directions across the network.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Efficient branching and tagging</term>
            <listitem>
              <para>The cost of branching and tagging need not be
              proportional to the project size.  Subversion creates
              branches and tags by simply copying the project, using a
              mechanism similar to a hard-link.  Thus these operations
              take only a very small, constant amount of time.
            </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Hackability</term>
            <listitem>
              <para>Subversion has no historical baggage; it is
              implemented as a collection of shared C libraries with
              well-defined APIs.  This makes Subversion extremely
              maintainable and usable by other applications and
              languages.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.intro.architecture">
        <info>
          <title>Subversion's Architecture</title>
        </info>
        <para><xref linkend="svn.intro.architecture.dia-1"/> illustrates
        a <quote>mile-high</quote> view of Subversion's
        design.</para>
        <figure xml:id="svn.intro.architecture.dia-1">
          <info>
            <title>Subversion's Architecture</title>
          </info>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/ch01dia1.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>On one end is a Subversion repository that holds all of your
        versioned data.  On the other end is your Subversion client
        program, which manages local reflections of portions of that
        versioned data (called <quote>working copies</quote>).  Between
        these extremes are multiple routes through various Repository
        Access (RA) layers.  Some of these routes go across computer
        networks and through network servers which then access the
        repository.  Others bypass the network altogether and access the
        repository directly.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.intro.components">
        <info>
          <title>Subversion's Components</title>
        </info>
        <para>Subversion, once installed, has a number of different
        pieces.  The following is a quick overview of what you get.
        Don't be alarmed if the brief descriptions leave you scratching
        your head&#x2014;there are <emphasis>plenty</emphasis> more pages
        in this book devoted to alleviating that confusion.</para>
        <variablelist>
          <varlistentry>
            <term>svn</term>
            <listitem>
              <para>The command-line client program.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>svnversion</term>
            <listitem>
              <para>A program for reporting the state (in terms of
              revisions of the items present) of a working copy.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>svnlook</term>
            <listitem>
              <para>A tool for directly inspecting a Subversion repository.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>svnadmin</term>
            <listitem>
              <para>A tool for creating, tweaking or repairing a Subversion
              repository.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>svndumpfilter</term>
            <listitem>
              <para>A program for filtering Subversion repository dump
              streams.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>mod_dav_svn</term>
            <listitem>
              <para>A plug-in module for the Apache HTTP Server, used to
              make your repository available to others over a
              network.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>svnserve</term>
            <listitem>
              <para>A custom standalone server program, runnable as a
              daemon process or invokable by SSH; another way to make
              your repository available to others over a network.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>svnsync</term>
            <listitem>
              <para>A program for incrementally mirroring one
            repository to another over a network.</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>Assuming you have Subversion installed correctly, you should
        be ready to start.  The next two chapters will walk you through
        the use of <command>svn</command>, Subversion's command-line client 
        program.</para>
      </section>
    </section>
  </preface>
  <!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
  <chapter xml:id="svn.basic">
    <info>
      <title>Fundamental Concepts</title>
    </info>
    <para>This chapter is a short, casual introduction to Subversion.
    If you're new to version control, this chapter is definitely for
    you.  We begin with a discussion of general version control
    concepts, work our way into the specific ideas behind
    Subversion, and show some simple examples of Subversion in
    use.</para>
    <para>Even though the examples in this chapter show people sharing
    collections of program source code, keep in mind that Subversion
    can manage any sort of file collection&#x2014;it's not limited to
    helping computer programmers.</para>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.basic.repository">
      <info>
        <title>The Repository</title>
      </info>
      <para>Subversion is a centralized system for sharing information.
      At its core is a repository, which is a central store of data.
      The repository stores information in the form of a
      <firstterm>filesystem tree</firstterm>&#x2014;a typical hierarchy
      of files and directories.  Any number of
      <firstterm>clients</firstterm> connect to the repository, and
      then read or write to these files.  By writing data, a client
      makes the information available to others; by reading data, the
      client receives information from others.  <xref linkend="svn.basic.repository.dia-1"/> illustrates this.</para>
      <figure xml:id="svn.basic.repository.dia-1">
        <info>
          <title>A typical client/server system</title>
        </info>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/ch02dia1.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>So why is this interesting?  So far, this sounds like the
      definition of a typical file server.  And indeed, the repository
      <emphasis>is</emphasis> a kind of file server, but it's not your
      usual breed.  What makes the Subversion repository special is
      that <emphasis>it remembers every change</emphasis> ever written
      to it: every change to every file, and even changes to the
      directory tree itself, such as the addition, deletion, and
      rearrangement of files and directories.</para>
      <para>When a client reads data from the repository, it normally
      sees only the latest version of the filesystem tree.  But the
      client also has the ability to view
      <emphasis>previous</emphasis> states of the filesystem.  For
      example, a client can ask historical questions like, <quote>What
      did this directory contain last Wednesday?</quote> or <quote>Who
      was the last person to change this file, and what changes did he
      make?</quote> These are the sorts of questions that are at the
      heart of any <firstterm>version control system</firstterm>:
      systems that are designed to track changes to data over time.
    </para>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.basic.vsn-models">
      <info>
        <title>Versioning Models</title>
      </info>
      <para>The core mission of a version control system is to enable
      collaborative editing and sharing of data.  But different
      systems use different strategies to achieve this.  It's
      important to understand these different strategies for a couple
      of reasons.  First, it will help you compare and contrast
      existing version control systems, in case you encounter other
      systems similar to Subversion.  Beyond that, it will also help
      you make more effective use of Subversion, since Subversion
      itself supports a couple of different ways of working.</para>
      <!-- =============================================================== -->
      <section xml:id="svn.basic.vsn-models.problem-sharing">
        <info>
          <title>The Problem of File-Sharing</title>
        </info>
        <para>All version control systems have to solve the same
        fundamental problem: how will the system allow users to share
        information, but prevent them from accidentally stepping on
        each other's feet?  It's all too easy for users to
        accidentally overwrite each other's changes in the
        repository.</para>
        <para>Consider the scenario shown in <xref linkend="svn.basic.vsn-models.problem-sharing.dia-1"/>.
        Suppose we have two co-workers, Harry and Sally.  They each
        decide to edit the same repository file at the same time.  If
        Harry saves his changes to the repository first, then it's
        possible that (a few moments later) Sally could accidentally
        overwrite them with her own new version of the file.  While
        Harry's version of the file won't be lost forever (because the
        system remembers every change), any changes Harry made
        <emphasis>won't</emphasis> be present in Sally's newer version
        of the file, because she never saw Harry's changes to begin
        with.  Harry's work is still effectively lost&#x2014;or at
        least missing from the latest version of the file&#x2014;and
        probably by accident.  This is definitely a situation we want
        to avoid!</para>
        <figure xml:id="svn.basic.vsn-models.problem-sharing.dia-1">
          <info>
            <title>The problem to avoid</title>
          </info>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/ch02dia2.png"/>
            </imageobject>
          </mediaobject>
        </figure>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.basic.vsn-models.lock-unlock">
        <info>
          <title>The Lock-Modify-Unlock Solution</title>
        </info>
        <para>Many version control systems use a
        <firstterm>lock-modify-unlock</firstterm> model to address the
        problem of many authors clobbering each other's work.  In this
        model, the repository allows only one person to change a file
        at a time.  This exclusivity policy is managed using locks.
        Harry must <quote>lock</quote> a file before he can begin
        making changes to it.  If Harry has locked a file, then Sally
        cannot also lock it, and therefore cannot make any changes to
        that file.  All she can do is read the file, and wait for
        Harry to finish his changes and release his lock.  After Harry
        unlocks the file, Sally can take her turn by locking and
        editing the file.  <xref linkend="svn.basic.vsn-models.lock-unlock.dia-1"/>
        demonstrates this simple solution.</para>
        <figure xml:id="svn.basic.vsn-models.lock-unlock.dia-1">
          <info>
            <title>The lock-modify-unlock solution</title>
          </info>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/ch02dia3.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>The problem with the lock-modify-unlock model is that it's
        a bit restrictive, and often becomes a roadblock for
        users:</para>
        <itemizedlist>
          <listitem>
            <para><emphasis>Locking may cause administrative
            problems.</emphasis>

            Sometimes Harry will lock a file and then forget about it.
            Meanwhile, because Sally is still waiting to edit the file,
            her hands are tied.  And then Harry goes on vacation.  Now
            Sally has to get an administrator to release Harry's lock.
            The situation ends up causing a lot of unnecessary delay
            and wasted time.</para>
          </listitem>
          <listitem>
            <para><emphasis>Locking may cause unnecessary
            serialization.</emphasis>

            What if Harry is editing the beginning of a text file,
            and Sally simply wants to edit the end of the same file?
            These changes don't overlap at all.  They could easily
            edit the file simultaneously, and no great harm would
            come, assuming the changes were properly merged together.
            There's no need for them to take turns in this
            situation.</para>
          </listitem>
          <listitem>
            <para><emphasis>Locking may create a false sense of
            security.</emphasis>

            Suppose Harry locks and edits file A, while Sally
            simultaneously locks and edits file B.  But what if A and
            B depend on one another, and the changes made to each are
            semantically incompatible?  Suddenly A and B don't work
            together anymore.  The locking system was powerless to
            prevent the problem&#x2014;yet it somehow provided a false
            sense of security.  It's easy for Harry and Sally to
            imagine that by locking files, each is beginning a safe,
            insulated task, and thus not bother discussing their
            incompatible changes early on.  Locking often becomes a
            substitute for real communication.</para>
          </listitem>
        </itemizedlist>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.basic.vsn-models.copy-merge">
        <info>
          <title>The Copy-Modify-Merge Solution</title>
        </info>
        <para>Subversion, CVS, and many other version control systems
        use a <firstterm>copy-modify-merge</firstterm> model as an
        alternative to locking.  In this model, each user's client
        contacts the project repository and creates a personal
        <firstterm>working copy</firstterm>&#x2014;a local reflection
        of the repository's files and directories.  Users then work
        simultaneously and independently, modifying their private
        copies.  Finally, the private copies are merged together into
        a new, final version.  The version control system often
        assists with the merging, but ultimately a human being is
        responsible for making it happen correctly.</para>
        <para>Here's an example.  Say that Harry and Sally each create
        working copies of the same project, copied from the
        repository.  They work concurrently, and make changes to the
        same file A within their copies.  Sally saves her changes to
        the repository first.  When Harry attempts to save his changes
        later, the repository informs him that his file A is
        <firstterm>out-of-date</firstterm>.  In other words, that file
        A in the repository has somehow changed since he last copied
        it.  So Harry asks his client to <firstterm>merge</firstterm>
        any new changes from the repository into his working copy of
        file A.  Chances are that Sally's changes don't overlap with
        his own; so once he has both sets of changes integrated, he
        saves his working copy back to the repository.  <xref linkend="svn.basic.vsn-models.copy-merge.dia-1"/> and <xref linkend="svn.basic.vsn-models.copy-merge.dia-2"/> show this
        process.</para>
        <figure xml:id="svn.basic.vsn-models.copy-merge.dia-1">
          <info>
            <title>The copy-modify-merge solution</title>
          </info>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/ch02dia4.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <figure xml:id="svn.basic.vsn-models.copy-merge.dia-2">
          <info>
            <title>The copy-modify-merge solution (continued)</title>
          </info>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/ch02dia5.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>But what if Sally's changes <emphasis>do</emphasis> overlap
        with Harry's changes?  What then?  This situation is called a
        <firstterm>conflict</firstterm>, and it's usually not much of
        a problem.  When Harry asks his client to merge the latest
        repository changes into his working copy, his copy of file A
        is somehow flagged as being in a state of conflict: he'll be
        able to see both sets of conflicting changes, and manually
        choose between them.  Note that software can't automatically
        resolve conflicts; only humans are capable of understanding
        and making the necessary intelligent choices.  Once Harry has
        manually resolved the overlapping changes&#x2014;perhaps after
        a discussion with Sally&#x2014;he can safely save the
        merged file back to the repository.</para>
        <para>The copy-modify-merge model may sound a bit chaotic, but
        in practice, it runs extremely smoothly.  Users can work in
        parallel, never waiting for one another.  When they work on
        the same files, it turns out that most of their concurrent
        changes don't overlap at all; conflicts are infrequent.  And
        the amount of time it takes to resolve conflicts is usually
        far less than the time lost by a locking system.</para>
        <para>In the end, it all comes down to one critical factor: user
        communication.  When users communicate poorly, both syntactic
        and semantic conflicts increase.  No system can force users to
        communicate perfectly, and no system can detect semantic
        conflicts.  So there's no point in being lulled into a false
        sense of security that a locking system will somehow prevent
        conflicts; in practice, locking seems to inhibit productivity
        more than anything else.</para>
        <sidebar xml:id="svn.basic.vsn-models.copy-merge.sb-1">
          <info>
            <title>When Locking is Necessary</title>
          </info>
          <para>While the lock-modify-unlock model is considered
          generally harmful to collaboration, there are still times
          when locking is appropriate.</para>
          <para>The copy-modify-merge model is based on the assumption
          that files are contextually mergeable: that is, that the
          majority of the files in the repository are line-based text
          files (such as program source code).  But for files with
          binary formats, such as artwork or sound, it's often
          impossible to merge conflicting changes.  In these
          situations, it really is necessary to users to take strict
          turns when changing the file.  Without serialized access,
          somebody ends up wasting time on changes that are ultimately
          discarded.</para>
          <para>While Subversion is still primarily a copy-modify-merge
          system, it still recognizes the need to lock an occasional
          file and thus provide mechanisms for this.  This feature is
          discussed later in this book, in
          <xref linkend="svn.advanced.locking"/>.</para>
        </sidebar>
      </section>
    </section>
    <!-- How svn implements the philosophy -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.basic.in-action">
      <info>
        <title>Subversion in Action</title>
      </info>
      <para>It's time to move from the abstract to the concrete.  In
      this section, we'll show real examples of Subversion being
      used.</para>
      <!-- =============================================================== -->
      <section xml:id="svn.advanced.reposurls">
        <info>
          <title>Subversion Repository URLs</title>
        </info>
        <para>Throughout this book, Subversion uses URLs to identify
        versioned files and directories in Subversion repositories.
        For the most part, these URLs use the standard syntax,
        allowing for server names and port numbers to be specified as
        part of the URL:</para>
        <screen>
$ svn checkout http://svn.example.com:9834/repos
&#x2026;
</screen>
        <para>But there are some nuances in Subversion's handling of URLs
        that are notable.  For example, URLs containing the
        <literal>file://</literal> access method (used for local
        repositories) must, in accordance with convention, have either a
        server name of <literal>localhost</literal> or no server name at
        all:</para>
        <screen>
$ svn checkout file:///var/svn/repos
&#x2026;
$ svn checkout file://localhost/var/svn/repos
&#x2026;
</screen>
        <para>Also, users of the <literal>file://</literal> scheme on
        Windows platforms will need to use an unofficially
        <quote>standard</quote> syntax for accessing repositories
        that are on the same machine, but on a different drive than
        the client's current working drive.  Either of the two
        following URL path syntaxes will work where
        <literal>X</literal> is the drive on which the repository
        resides:</para>
        <screen>
C:\&gt; svn checkout file:///X:/var/svn/repos
&#x2026;
C:\&gt; svn checkout "file:///X|/var/svn/repos"
&#x2026;
</screen>
        <para>In the second syntax, you need to quote the URL so that the
        vertical bar character is not interpreted as a pipe.  Also, note
        that a URL uses forward slashes even though the native
        (non-URL) form of a path on Windows uses backslashes.</para>
        <note>
          <para>Subversion's <literal>file://</literal> URLs cannot be
          used in a regular web browser the way typical
          <literal>file://</literal> URLs can.  When you attempt to view
          a <literal>file://</literal> URL in a regular web browser, it
          reads and displays the contents of the file at that location
          by examining the filesystem directly.  However, Subversion's
          resources exist in a virtual filesystem (see <xref linkend="svn.developer.layerlib.repos"/>), and your browser
          will not understand how to interact with that
          filesystem.</para>
        </note>
        <para>Finally, it should be noted that the Subversion client will
        automatically encode URLs as necessary, just like a web browser
        does.  For example, if a URL contains a space or upper-ASCII
        character:</para>
        <screen>
$ svn checkout "http://host/path with space/project/espa&#xF1;a"
</screen>
        <para>&#x2026;then Subversion will escape the unsafe characters
        and behave as if you had typed:</para>
        <screen>
$ svn checkout http://host/path%20with%20space/project/espa%C3%B1a
</screen>
        <para>If the URL contains spaces, be sure to place it within quote
        marks, so that your shell treats the whole thing as a single
        argument to the <command>svn</command> program.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.basic.in-action.wc">
        <info>
          <title>Working Copies</title>
        </info>
        <para>You've already read about working copies; now we'll
        demonstrate how the Subversion client creates and uses
        them.</para>
        <para>A Subversion working copy is an ordinary directory tree on
        your local system, containing a collection of files.  You can
        edit these files however you wish, and if they're source code
        files, you can compile your program from them in the usual
        way.  Your working copy is your own private work area:
        Subversion will never incorporate other people's changes, nor
        make your own changes available to others, until you
        explicitly tell it to do so.  You can even have multiple
        working copies of the same project.</para>
        <para>After you've made some changes to the files in your
        working copy and verified that they work properly, Subversion
        provides you with commands to <quote>publish</quote> your
        changes to the other people working with you on your project
        (by writing to the repository).  If other people publish their
        own changes, Subversion provides you with commands to merge
        those changes into your working directory (by reading from the
        repository).</para>
        <para>A working copy also contains some extra files, created and
        maintained by Subversion, to help it carry out these commands.
        In particular, each directory in your working copy contains a
        subdirectory named <filename>.svn</filename>, also known as
        the working copy <firstterm>administrative
        directory</firstterm>.  The files in each administrative
        directory help Subversion recognize which files contain
        unpublished changes, and which files are out-of-date with
        respect to others' work.</para>
        <para>A typical Subversion repository often holds the files (or
        source code) for several projects; usually, each project is a
        subdirectory in the repository's filesystem tree.  In this
        arrangement, a user's working copy will usually correspond to
        a particular subtree of the repository.</para>
        <para>For example, suppose you have a repository that contains
        two software projects, <literal>paint</literal> and
        <literal>calc</literal>.  Each project lives in its own
        top-level subdirectory, as shown in <xref linkend="svn.basic.in-action.wc.dia-1"/>.</para>
        <figure xml:id="svn.basic.in-action.wc.dia-1">
          <info>
            <title>The repository's filesystem</title>
          </info>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/ch02dia6.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>To get a working copy, you must <firstterm>check
        out</firstterm> some subtree of the repository.  (The term
        <quote>check out</quote> may sound like it has something to do
        with locking or reserving resources, but it doesn't; it simply
        creates a private copy of the project for you.) For example,
        if you check out <filename>/calc</filename>, you will get a
        working copy like this:</para>
        <screen>
$ svn checkout http://svn.example.com/repos/calc
A    calc/Makefile
A    calc/integer.c
A    calc/button.c
Checked out revision 56.

$ ls -A calc
Makefile  integer.c  button.c  .svn/
</screen>
        <para>The list of letter A's in the left margin indicates that
        Subversion is adding a number of items to your working copy.
        You now have a personal copy of the
        repository's <filename>/calc</filename> directory, with one
        additional entry&#x2014;<filename>.svn</filename>&#x2014;which
        holds the extra information needed by Subversion, as mentioned
        earlier.</para>
        <para>Suppose you make changes to <filename>button.c</filename>.
        Since the <filename>.svn</filename> directory remembers the
        file's original modification date and contents, Subversion can
        tell that you've changed the file.  However, Subversion does
        not make your changes public until you explicitly tell it to.
        The act of publishing your changes is more commonly known as
        <firstterm>committing</firstterm> (or <firstterm>checking
        in</firstterm>) changes to the repository.</para>
        <para>To publish your changes to others, you can use
        Subversion's <command>commit</command> command.</para>
        <screen>
$ svn commit button.c -m "Fixed a typo in button.c."
Sending        button.c
Transmitting file data .
Committed revision 57.
</screen>
        <para>Now your changes to <filename>button.c</filename> have
        been committed to the repository, with a note describing your
        change (namely, that you fixed a typo).  If another user
        checks out a working copy of <filename>/calc</filename>, they
        will see your changes in the latest version of the
        file.</para>
        <para>Suppose you have a collaborator, Sally, who checked out a
        working copy of <filename>/calc</filename> at the same time
        you did.  When you commit your change to
        <filename>button.c</filename>, Sally's working copy is left
        unchanged; Subversion only modifies working copies at the
        user's request.</para>
        <para>To bring her project up to date, Sally can ask
        Subversion to <firstterm>update</firstterm> her working copy,
        by using the Subversion <command>update</command> command.
        This will incorporate your changes into her working copy, as
        well as any others that have been committed since she checked
        it out.</para>
        <screen>
$ pwd
/home/sally/calc

$ ls -A 
.svn/ Makefile integer.c button.c

$ svn update
U    button.c
Updated to revision 57.
</screen>
        <para>The output from the <command>svn update</command> command
        indicates that Subversion updated the contents of
        <filename>button.c</filename>.  Note that Sally didn't need to
        specify which files to update; Subversion uses the information
        in the <filename>.svn</filename> directory, and further
        information in the repository, to decide which files need to
        be brought up to date.</para>
        <sidebar xml:id="svn.basic.in-action.wc.sb-1">
          <info>
            <title>Repository URLs</title>
          </info>
          <para>Subversion repositories can be accessed through many
          different methods&#x2014;on local disk, or through various
          network protocols, depending on how your administrator has
          set things up for you.  A repository location, however, is
          always a URL.
          <xref linkend="svn.basic.in-action.wc.tbl-1"/> describes how
          different URL schemes map to the available access
          methods.</para>
          <table xml:id="svn.basic.in-action.wc.tbl-1">
            <info>
              <title>Repository Access URLs</title>
            </info>
            <tgroup cols="2">
              <thead>
                <row>
                  <entry>Schema</entry>
                  <entry>Access Method</entry>
                </row>
              </thead>
              <tbody>
                <row>
                  <entry>
                    <literal>file:///</literal>
                  </entry>
                  <entry>direct repository access (on local disk)</entry>
                </row>
                <row>
                  <entry>
                    <literal>http://</literal>
                  </entry>
                  <entry>access via WebDAV protocol to Subversion-aware
                  Apache server</entry>
                </row>
                <row>
                  <entry>
                    <literal>https://</literal>
                  </entry>
                  <entry>same as <literal>http://</literal>, but with
                  SSL encryption.</entry>
                </row>
                <row>
                  <entry>
                    <literal>svn://</literal>
                  </entry>
                  <entry>access via custom protocol to an
                  <literal>svnserve</literal> server</entry>
                </row>
                <row>
                  <entry>
                    <literal>svn+ssh://</literal>
                  </entry>
                  <entry>same as <literal>svn://</literal>, but through
                  an SSH tunnel.</entry>
                </row>
              </tbody>
            </tgroup>
          </table>
          <para>For more information on how Subversion parses URLs, see
        <xref linkend="svn.advanced.reposurls"/>.  For more
        information on the different types of network servers
        available for Subversion, see
        <xref linkend="svn.serverconfig"/>.</para>
        </sidebar>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.basic.in-action.revs">
        <info>
          <title>Revisions</title>
        </info>
        <para>An <command>svn commit</command> operation publishes
        changes to any number of files and directories as a single
        atomic transaction.  In your working copy, you can change
        files' contents; create, delete, rename and copy files and
        directories; then commit a complete set of changes as an
        atomic transaction.</para>
        <para>By <quote>atomic transaction</quote>, we mean simply this:
        either all of the changes happen in the repository, or none of
        them happen.  Subversion tries to retain this atomicity in the
        face of program crashes, system crashes, network problems, and
        other users' actions.</para>
        <para>Each time the repository accepts a commit, this creates a
        new state of the filesystem tree, called a
        <firstterm>revision</firstterm>.  Each revision is assigned a
        unique natural number, one greater than the number of the
        previous revision.  The initial revision of a freshly created
        repository is numbered zero, and consists of nothing but an
        empty root directory.</para>
        <para><xref linkend="svn.basic.in-action.revs.dia-1"/> illustrates a nice way to
        visualize the repository.  Imagine an array of revision
        numbers, starting at 0, stretching from left to right.  Each
        revision number has a filesystem tree hanging below it, and
        each tree is a <quote>snapshot</quote> of the way the
        repository looked after a commit.</para>
        <figure xml:id="svn.basic.in-action.revs.dia-1">
          <info>
            <title>The repository</title>
          </info>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/ch02dia7.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <sidebar>
          <info>
            <title>Global Revision Numbers</title>
          </info>
          <para>Unlike most version control systems, Subversion's
          revision numbers apply to <emphasis>entire trees</emphasis>,
          not individual files.  Each revision number selects an
          entire tree, a particular state of the repository after some
          committed change.  Another way to think about it is that
          revision N represents the state of the repository filesystem
          after the Nth commit.  When Subversion users talk
          about <quote>revision 5 of
          <filename>foo.c</filename></quote>, they really mean
          <quote><filename>foo.c</filename> as it appears in revision
          5.</quote> Notice that in general, revisions N and M of a
          file do <emphasis>not</emphasis> necessarily differ!  Many
          other version control systems use per-file revision numbers,
          so this concept may seem unusual at first. (Former CVS users
          might want to see <xref linkend="svn.forcvs"/> for more
          details.)</para>
        </sidebar>
        <para>It's important to note that working copies do not always
        correspond to any single revision in the repository; they may
        contain files from several different revisions.  For example,
        suppose you check out a working copy from a repository whose
        most recent revision is 4:</para>
        <screen>
calc/Makefile:4
     integer.c:4
     button.c:4
</screen>
        <para>At the moment, this working directory corresponds exactly
        to revision 4 in the repository.  However, suppose you make a
        change to <filename>button.c</filename>, and commit that
        change.  Assuming no other commits have taken place, your
        commit will create revision 5 of the repository, and your
        working copy will now look like this:</para>
        <screen>
calc/Makefile:4
     integer.c:4
     button.c:5
</screen>
        <para>Suppose that, at this point, Sally commits a change to
        <filename>integer.c</filename>, creating revision 6.  If you
        use <command>svn update</command> to bring your working copy
        up to date, then it will look like this:</para>
        <screen>
calc/Makefile:6
     integer.c:6
     button.c:6
</screen>
        <para>Sally's change to <filename>integer.c</filename> will
        appear in your working copy, and your change will still be
        present in <filename>button.c</filename>.  In this example,
        the text of <filename>Makefile</filename> is identical in
        revisions 4, 5, and 6, but Subversion will mark your working
        copy of <filename>Makefile</filename> with revision 6 to
        indicate that it is still current.  So, after you do a clean
        update at the top of your working copy, it will generally
        correspond to exactly one revision in the repository.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.basic.in-action.track-repos">
        <info>
          <title>How Working Copies Track the Repository</title>
        </info>
        <para>For each file in a working directory, Subversion records
        two essential pieces of information in the
        <filename>.svn/</filename> administrative area:</para>
        <itemizedlist>
          <listitem>
            <para>what revision your working file is based on (this is
            called the file's <firstterm>working
            revision</firstterm>), and</para>
          </listitem>
          <listitem>
            <para>a timestamp recording when the local copy was last
            updated by the repository.</para>
          </listitem>
        </itemizedlist>
        <para>Given this information, by talking to the repository,
        Subversion can tell which of the following four states a
        working file is in:</para>
        <variablelist>
          <varlistentry>
            <term>Unchanged, and current</term>
            <listitem>
              <para>The file is unchanged in the working directory, and
              no changes to that file have been committed to the
              repository since its working revision.  An <command>svn
              commit</command> of the file will do nothing, and an
              <command>svn update</command> of the file will do
              nothing.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Locally changed, and current</term>
            <listitem>
              <para>The file has been changed in the working directory,
              and no changes to that file have been committed to the
              repository since you last updated.  There are local
              changes that have not been committed to the repository,
              thus an <command>svn commit</command> of the file will
              succeed in publishing your changes, and an <command>svn
              update</command> of the file will do nothing.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Unchanged, and out-of-date</term>
            <listitem>
              <para>The file has not been changed in the working
              directory, but it has been changed in the repository.
              The file should eventually be updated, to make it
              current with the latest public revision.  An <command>svn
              commit</command> of the file will do nothing, and an
              <command>svn update</command> of the file will fold the
              latest changes into your working copy.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Locally changed, and out-of-date</term>
            <listitem>
              <para>The file has been changed both in the working
              directory, and in the repository.  An <command>svn
              commit</command> of the file will fail with an
              <quote>out-of-date</quote> error.  The file should be
              updated first; an <command>svn update</command> command
              will attempt to merge the public changes with the local
              changes.  If Subversion can't complete the merge in a
              plausible way automatically, it leaves it to the user to
              resolve the conflict.</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>This may sound like a lot to keep track of, but the
        <command>svn status</command> command will show you the state
        of any item in your working copy.  For more information on
        that command, see
        <xref linkend="svn.tour.cycle.examine.status"/>.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.basic.in-action.mixedrevs">
        <info>
          <title>Mixed Revision Working Copies</title>
        </info>
        <para>As a general principle, Subversion tries to be as flexible
        as possible.  One special kind of flexibility is the ability
        to have a working copy containing files and directories with a
        mix of different working revision numbers.  Unfortunately,
        this flexibility tends to confuse a number of new users.  If
        the earlier example showing mixed revisions perplexed you,
        here's a primer on both why the feature exists and how to make
        use of it.</para>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.basic.in-action.mixedrevs.update-commit">
          <info>
            <title>Updates and Commits are Separate</title>
          </info>
          <para>One of the fundamental rules of Subversion is that
          a <quote>push</quote> action does not cause
          a <quote>pull</quote>, nor the other way around.  Just
          because you're ready to submit new changes to the repository
          doesn't mean you're ready to receive changes from other
          people.  And if you have new changes still in progress,
          then <command>svn update</command> should gracefully merge
          repository changes into your own, rather than forcing you to
          publish them.</para>
          <para>The main side-effect of this rule is that it means a
          working copy has to do extra bookkeeping to track mixed
          revisions, and be tolerant of the mixture as well.  It's
          made more complicated by the fact that directories
          themselves are versioned.</para>
          <para>For example, suppose you have a working copy entirely at
          revision 10.  You edit the
          file <filename>foo.html</filename> and then perform
          an <command>svn commit</command>, which creates revision 15
          in the repository.  After the commit succeeds, many new
          users would expect the working copy to be entirely at
          revision 15, but that's not the case!  Any number of changes
          might have happened in the repository between revisions 10
          and 15.  The client knows nothing of those changes in the
          repository, since you haven't yet run <command>svn
          update</command>, and <command>svn commit</command> doesn't
          pull down new changes.  If, on the other hand,
          <command>svn commit</command> <emphasis>were</emphasis> to
          automatically download the newest changes, then it would be
          possible to set the entire working copy to revision
          15&#x2014;but then we'd be breaking the fundamental rule
          of <quote>push</quote> and <quote>pull</quote> remaining
          separate actions.  Therefore the only safe thing the
          Subversion client can do is mark the one
          file&#x2014;<filename>foo.html</filename>&#x2014;as being at
          revision 15.  The rest of the working copy remains at
          revision 10.  Only by running <command>svn update</command>
          can the latest changes be downloaded, and the whole working
          copy be marked as revision 15.</para>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.basic.in-action.mixedrevs.normal">
          <info>
            <title>Mixed revisions are normal</title>
          </info>
          <para>The fact is, <emphasis>every time</emphasis> you run
          <command>svn commit</command>, your working copy ends up
          with some mixture of revisions.  The things you just
          committed are marked as having larger working revisions than
          everything else.  After several commits (with no updates
          in-between) your working copy will contain a whole mixture
          of revisions.  Even if you're the only person using the
          repository, you will still see this phenomenon.  To examine
          your mixture of working revisions, use the <command>svn
          status --verbose</command> command (see <xref linkend="svn.tour.cycle.examine.status"/> for more
          information.)</para>
          <para>Often, new users are completely unaware that their
          working copy contains mixed revisions.  This can be
          confusing, because many client commands are sensitive to the
          working revision of the item they're examining.  For
          example, the <command>svn log</command> command is used to
          display the history of changes to a file or directory (see
          <xref linkend="svn.tour.history.log"/>).  When the user
          invokes this command on a working copy object, they expect
          to see the entire history of the object.  But if the
          object's working revision is quite old (often because
          <command>svn update</command> hasn't been run in a long
          time), then the history of the <emphasis>older</emphasis>
          version of the object is shown.</para>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.basic.in-action.mixedrevs.useful">
          <info>
            <title>Mixed revisions are useful</title>
          </info>
          <para>If your project is sufficiently complex, you'll discover
          that it's sometimes nice to forcibly <firstterm>backdate</firstterm>
          (or, update to a revision older than the one you already
          have) portions of your working copy to an earlier revision; you'll
          learn how to do that in <xref linkend="svn.tour"/>.  Perhaps
          you'd like to test an earlier version of a sub-module
          contained in a subdirectory, or perhaps you'd like to figure
          out when a bug first came into existence in a specific file.
          This is the <quote>time machine</quote> aspect of a version
          control system&#x2014;the feature which allows you to move
          any portion of your working copy forward and backward in
          history.</para>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.basic.in-action.mixedrevs.limits">
          <info>
            <title>Mixed revisions have limitations</title>
          </info>
          <para>However you make use of mixed revisions in your working
          copy, there are limitations to this flexibility.</para>
          <para>First, you cannot commit the deletion of a file or
          directory which isn't fully up-to-date.  If a newer version
          of the item exists in the repository, your attempt to delete
          will be rejected, to prevent you from accidentally
          destroying changes you've not yet seen.</para>
          <para>Second, you cannot commit a metadata change to a
          directory unless it's fully up-to-date.  You'll learn about
          attaching <quote>properties</quote> to items in <xref linkend="svn.advanced"/>.  A directory's working revision
          defines a specific set of entries and properties, and thus
          committing a property change to an out-of-date directory may
          destroy properties you've not yet seen.</para>
        </section>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.basic.summary">
      <info>
        <title>Summary</title>
      </info>
      <para>We've covered a number of fundamental Subversion concepts in
      this chapter:</para>
      <itemizedlist>
        <listitem>
          <para>We've introduced the notions of the central repository,
          the client working copy, and the array of repository
          revision trees.</para>
        </listitem>
        <listitem>
          <para>We've seen some simple examples of how two collaborators
          can use Subversion to publish and receive changes from one
          another, using the <quote>copy-modify-merge</quote>
          model.</para>
        </listitem>
        <listitem>
          <para>We've talked a bit about the way Subversion tracks and
          manages information in a working copy.</para>
        </listitem>
      </itemizedlist>
      <para>At this point, you should have a good idea of how Subversion
      works in the most general sense.  Armed with this knowledge, you
      should now be ready to move into the next chapter, which is a
      detailed tour of Subversion's commands and features.</para>
    </section>
  </chapter>
  <!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
  <chapter xml:id="svn.tour">
    <info>
      <title>Basic Usage</title>
    </info>
    <para>Now we will go into the details of using Subversion.  By the
    time you reach the end of this chapter, you will be able to
    perform all the tasks you need to use Subversion in a normal day's
    work.  You'll start with getting your files into Subversion,
    followed by an initial checkout of your code.  We'll then walk you
    through making changes and examining those changes.  You'll also
    see how to bring changes made by others into your working copy,
    examine them, and work through any conflicts that might
    arise.</para>
    <para>Note that this chapter is not meant to be an exhaustive list
    of all Subversion's commands&#x2014;rather, it's a conversational
    introduction to the most common Subversion tasks you'll
    encounter.  This chapter assumes that you've read and understood
    <xref linkend="svn.basic"/> and are familiar with the general
    model of Subversion.  For a complete reference of all commands,
    see <xref linkend="svn.ref"/>.</para>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.tour.help">
      <info>
        <title>Help!</title>
      </info>
      <para>Before reading on, here is the most important command you'll
      ever need when using Subversion: <command>svn help</command>.
      The Subversion command-line client is self-documenting&#x2014;at
      any time, a quick <command>svn help
      <replaceable>SUBCOMMAND</replaceable></command> will describe
      the syntax, options, and behavior of the subcommand.</para>
      <screen>
$ svn help import
import: Commit an unversioned file or tree into the repository.
usage: import [PATH] URL

  Recursively commit a copy of PATH to URL.
  If PATH is omitted '.' is assumed.
  Parent directories are created as necessary in the repository.
  If PATH is a directory, the contents of the directory are added
  directly under URL.

Valid options:
  -q [--quiet]             : print as little as possible
  -N [--non-recursive]     : operate on single directory only
&#x2026;
</screen>
      <sidebar>
        <info>
          <title>Options and Switches and Flags, Oh My!</title>
        </info>
        <para>The Subversion command line client has numerous command
          modifiers (which we call options), but there are two
          distinct kinds of options&#x2014;<quote>short options</quote>
          that are a single hyphen followed by a single letter, and
          <quote>long options</quote> that consist of two hyphens
          followed by a number of letters (eg <literal>-s</literal>
          and <literal>--this-is-a-long-option</literal>
          respectively).  Every option has a long format, but only
          certain options have an additional short format (these are
          typically options that are frequently used).  In order to
          maintain clarity, we <emphasis>usually</emphasis> use the
          long form in code examples, but when describing options, if
          there's a short form, we'll provide the long form (to
          improve clarity), and the short form (to make it easier to
          remember).  You should use whichever one you're more
          comfortable with, but don't try to use both.</para>
      </sidebar>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.tour.importing">
      <info>
        <title>Getting Data into your Repository</title>
      </info>
      <para>There are two ways to get new files into your Subversion
      repository: <command>svn import</command> and <command>svn
      add</command>.  We'll discuss <command>svn import</command> here
      and <command>svn add</command> later in this chapter when we
      review a typical day with Subversion.</para>
      <!-- =============================================================== -->
      <section xml:id="svn.tour.importing.import">
        <info>
          <title>svn import</title>
        </info>
        <para>The <command>svn import</command> command is a quick way to
        copy an unversioned tree of files into a repository, creating
        intermediate directories as necessary.  <command>svn
        import</command> doesn't require a working copy, and your files
        are immediately committed to the repository.  This is typically
        used when you have an existing tree of files that you want to
        begin tracking in your Subversion repository.  For example:</para>
        <screen>
$ svnadmin create /var/svn/newrepos
$ svn import mytree file:///var/svn/newrepos/some/project \
             -m "Initial import"
Adding         mytree/foo.c
Adding         mytree/bar.c
Adding         mytree/subdir
Adding         mytree/subdir/quux.h

Committed revision 1.
</screen>
        <para>The previous example copied the contents of directory
        <filename>mytree</filename> under the directory
        <filename>some/project</filename> in the repository:</para>
        <screen>
$ svn list file:///var/svn/newrepos/some/project
bar.c
foo.c
subdir/
</screen>
        <para>Note that after the import is finished, the original tree
        is <emphasis>not</emphasis> converted into a working copy.  To
        start working, you still need to <command>svn
        checkout</command> a fresh working copy of the tree.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.tour.importing.layout">
        <info>
          <title>Recommended repository layout</title>
        </info>
        <para>While Subversion's flexibility allows you to layout your
      repository in any way that you choose, we recommend that you
      create a <filename>trunk</filename> directory to hold the
      <quote>main line</quote> of development, a
      <filename>branches</filename> directory to contain branch
      copies, and a <filename>tags</filename> directory to contain tag
      copies, for example:</para>
        <screen>
$ svn list file:///var/svn/repos
/trunk
/branches
/tags
</screen>
        <para>You'll learn more about tags and branches in <xref linkend="svn.branchmerge"/>.  For details and how to set up
      multiple projects, see <xref linkend="svn.branchmerge.maint.layout"/> and <xref linkend="svn.reposadmin.projects.chooselayout"/> to read more
      about <quote>project roots</quote>.</para>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.tour.initial">
      <info>
        <title>Initial Checkout</title>
      </info>
      <para>Most of the time, you will start using a Subversion
      repository by doing a <firstterm>checkout</firstterm> of your
      project.  Checking out a repository creates a <quote>working
      copy</quote> of it on your local machine.  This copy contains
      the <literal>HEAD</literal> (latest revision) of the Subversion
      repository that you specify on the command line:</para>
      <screen>
$ svn checkout http://svn.collab.net/repos/svn/trunk
A    trunk/Makefile.in
A    trunk/ac-helpers
A    trunk/ac-helpers/install.sh
A    trunk/ac-helpers/install-sh
A    trunk/build.conf
&#x2026;
Checked out revision 8810.
</screen>
      <sidebar>
        <info>
          <title>What's in a Name?</title>
        </info>
        <para>Subversion tries hard not to limit the type of data you
        can place under version control.  The contents of files and
        property values are stored and transmitted as binary data, and
        <xref linkend="svn.advanced.props.special.mime-type"/>
        tells you how to give Subversion a hint that
        <quote>textual</quote> operations don't make sense for a
        particular file.  There are a few places, however, where
        Subversion places restrictions on information it
        stores.</para>
        <para>Subversion internally handles certain bits of
        data&#x2014;for example, property names, path names, and log
        messages&#x2014;as UTF-8 encoded Unicode.  This is not to say
        that all your interactions with Subversion must involve UTF-8,
        though.  As a general rule, Subversion clients will gracefully
        and transparently handle conversions between UTF-8 and the
        encoding system in use on your computer, if such a conversion
        can meaningfully be done (which is the case for most common
        encodings in use today).</para>
        <para>In addition, path names are used as XML attribute values
        in WebDAV exchanges, as well in as some of Subversion's
        housekeeping files.  This means that path names can only
        contain legal XML (1.0) characters.  Subversion also prohibits
        TAB, CR, and LF characters in path names to prevent paths from
        being broken up in diffs, or in the output of commands like
        <xref linkend="svn.ref.svn.c.log"/> or <xref linkend="svn.ref.svn.c.status"/>.</para>
        <para>While it may seem like a lot to remember, in practice
        these limitations are rarely a problem.  As long as your
        locale settings are compatible with UTF-8, and you don't use
        control characters in path names, you should have no trouble
        communicating with Subversion.  The command-line client adds
        an extra bit of help&#x2014;it will automatically escape illegal
        path characters as needed in URLs you type to create
        <quote>legally correct</quote> versions for internal
        use.</para>
      </sidebar>
      <para>Although the above example checks out the trunk directory,
      you can just as easily check out any deep subdirectory of a
      repository by specifying the subdirectory in the checkout
      URL:</para>
      <screen>
$ svn checkout \
      http://svn.collab.net/repos/svn/trunk/subversion/tests/cmdline/
A    cmdline/revert_tests.py
A    cmdline/diff_tests.py
A    cmdline/autoprop_tests.py
A    cmdline/xmltests
A    cmdline/xmltests/svn-test.sh
&#x2026;
Checked out revision 8810.
</screen>
      <para>Since Subversion uses a <quote>copy-modify-merge</quote>
      model instead of <quote>lock-modify-unlock</quote> (see <xref linkend="svn.basic.vsn-models"/>), you can start right in 
      making changes to the files and directories in your working
      copy.  Your working copy is just like any other collection of
      files and directories on your system.  You can edit and change
      them, move them around, you can even delete the entire working
      copy and forget about it.</para>
      <warning>
        <para>While your working copy is <quote>just like any other
          collection of files and directories on your system</quote>,
          you can edit files at will, but you must tell Subversion
          about <emphasis>everything else</emphasis> that you do.  For
          example, if you want to copy or move an item in a working
          copy, you should use <command>svn copy</command> or
          <command>svn move</command> instead of the copy and move
          commands provided by your operating system.  We'll talk more
          about them later in this chapter.</para>
      </warning>
      <para>Unless you're ready to commit the addition of a new file or
      directory, or changes to existing ones, there's no need to
      further notify the Subversion server that you've done
      anything.</para>
      <sidebar>
        <info>
          <title>What's with the <filename>.svn</filename> directory?</title>
        </info>
        <para>Every directory in a working copy contains an
        administrative area, a subdirectory named
        <filename>.svn</filename>.  Usually, directory listing
        commands won't show this subdirectory, but it is nevertheless
        an important directory.  Whatever you do, don't delete or
        change anything in the administrative area!  Subversion
        depends on it to manage your working copy.</para>
        <para>If you accidentally remove the <filename>.svn</filename>
        subdirectory, the easiest way to fix the problem is to remove
        the entire containing directory (a normal system deletion,
        not <command>svn delete</command>), then run <command>svn
        update</command> from a parent directory.  The Subversion
        client will re-download the directory you've deleted, with a
        new <filename>.svn</filename> area as well.</para>
      </sidebar>
      <para>While you can certainly check out a working copy with the
      URL of the repository as the only argument, you can also specify
      a directory after your repository URL.  This places your working
      copy in the new directory that you name.  For example:</para>
      <screen>
$  svn checkout http://svn.collab.net/repos/svn/trunk subv
A    subv/Makefile.in
A    subv/ac-helpers
A    subv/ac-helpers/install.sh
A    subv/ac-helpers/install-sh
A    subv/build.conf
&#x2026;
Checked out revision 8810.
</screen>
      <para>That will place your working copy in a directory named
      <literal>subv</literal> instead of a directory named
      <literal>trunk</literal> as we did previously.  The directory
      <literal>subv</literal> will be created if it doesn't already
      exist.</para>
      <section xml:id="svn.tour.initial.disabling-password-caching">
        <info>
          <title>Disabling Password Caching</title>
        </info>
        <para>When you perform a Subversion operation that requires you
        to authenticate, by default Subversion caches your
        authentication credentials on disk.  This is done for
        convenience, so that you don't have to continually re-enter
        your password for future operations.  If you're concerned
        about caching your Subversion passwords,<footnote><para>Of
        course, you're not terribly worried&#x2014;first because you
        know that you can't <emphasis>really</emphasis> delete
        anything from Subversion and, secondly, because your
        Subversion password isn't the same as any of the other three
        million passwords you have, right?  Right?</para></footnote>
        you can disable caching either permanently or on a
        case-by-case basis.</para>
        <para>To disable password caching for a particular one-time
        command, pass the <option>--no-auth-cache</option> option on
        the commandline.  To permanently disable caching, you can add
        the line <literal>store-passwords = no</literal> to your local
        machine's Subversion configuration file.  See <xref linkend="svn.serverconfig.netmodel.credcache"/> for
        details.</para>
      </section>
      <section xml:id="svn.tour.initial.different-user">
        <info>
          <title>Authenticating as a Different User</title>
        </info>
        <para>Since Subversion caches auth credentials by default (both
        username and password), it conveniently remembers who you were
        acting as the last time you modified you working copy.  But
        sometimes that's not helpful&#x2014;particularly if you're
        working in a shared working copy, like a system configuration
        directory or a webserver document root.  In this case, just
        pass the <option>--username</option> option on the
        commandline and Subversion will attempt to authenticate as
        that user, prompting you for a password if necessary.</para>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.tour.cycle">
      <info>
        <title>Basic Work Cycle</title>
      </info>
      <para>Subversion has numerous features, options, bells and
      whistles, but on a day-to-day basis, odds are that you will only
      use a few of them.  In this section we'll run through the most
      common things that you might find yourself doing with Subversion
      in the course of a day's work.</para>
      <para>The typical work cycle looks like this:</para>
      <itemizedlist>
        <listitem>
          <para>Update your working copy</para>
          <itemizedlist>
            <listitem>
              <para>
                <command>svn update</command>
              </para>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para>Make changes</para>
          <itemizedlist>
            <listitem>
              <para>
                <command>svn add</command>
              </para>
            </listitem>
            <listitem>
              <para>
                <command>svn delete</command>
              </para>
            </listitem>
            <listitem>
              <para>
                <command>svn copy</command>
              </para>
            </listitem>
            <listitem>
              <para>
                <command>svn move</command>
              </para>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para>Examine your changes</para>
          <itemizedlist>
            <listitem>
              <para>
                <command>svn status</command>
              </para>
            </listitem>
            <listitem>
              <para>
                <command>svn diff</command>
              </para>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para>Possibly undo some changes</para>
          <itemizedlist>
            <listitem>
              <para>
                <command>svn revert</command>
              </para>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para>Resolve Conflicts (Merge Others' Changes)</para>
          <itemizedlist>
            <listitem>
              <para>
                <command>svn update</command>
              </para>
            </listitem>
            <listitem>
              <para>
                <command>svn resolved</command>
              </para>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para>Commit your changes</para>
          <itemizedlist>
            <listitem>
              <para>
                <command>svn commit</command>
              </para>
            </listitem>
          </itemizedlist>
        </listitem>
      </itemizedlist>
      <!-- =============================================================== -->
      <section xml:id="svn.tour.cycle.update">
        <info>
          <title>Update Your Working Copy</title>
        </info>
        <para>When working on a project with a team, you'll want to
        update your working copy to receive any changes made since
        your last update by other developers on the project.  Use
        <command>svn update</command> to bring your working copy into
        sync with the latest revision in the repository.</para>
        <screen>
$ svn update
U  foo.c
U  bar.c
Updated to revision 2.
</screen>
        <para>In this case, someone else checked in modifications to
        both <filename>foo.c</filename> and <filename>bar.c</filename>
        since the last time you updated, and Subversion has updated
        your working copy to include those changes.</para>
        <para>When the server sends changes to your working copy via
        <command>svn update</command>, a letter code is displayed next
        to each item to let you know what actions Subversion performed
        to bring your working copy up-to-date.  To find out what these
        letters mean, see <xref linkend="svn.ref.svn.c.update"/>.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.tour.cycle.edit">
        <info>
          <title>Make Changes to Your Working Copy</title>
        </info>
        <para>Now you can get to work and make changes in your working
        copy.  It's usually most convenient to decide on a discrete
        change (or set of changes) to make, such as writing a new
        feature, fixing a bug, etc.  The Subversion commands that you
        will use here are <command>svn add</command>, <command>svn
        delete</command>, <command>svn copy</command>, <command>svn
        move</command>, and <command>svn mkdir</command>.  However, if
        you are merely editing files that are already in Subversion,
        you may not need to use any of these commands until you
        commit.</para>
        <para>There are two kinds of changes you can make to your
        working copy: file changes and tree changes.  You don't need
        to tell Subversion that you intend to change a file; just make
        your changes using your text editor, word processor, graphics
        program, or whatever tool you would normally use.  Subversion
        automatically detects which files have been changed, and in
        addition handles binary files just as easily as it handles
        text files&#x2014;and just as efficiently too.  For tree
        changes, you can ask Subversion to <quote>mark</quote> files
        and directories for scheduled removal, addition, copying, or
        moving.  These changes may take place immediately in your
        working copy, but no additions or removals will happen in the
        repository until you commit them.</para>
        <para>Here is an overview of the five Subversion subcommands
        that you'll use most often to make tree changes.</para>
        <sidebar>
          <info>
            <title>Versioning symbolic links</title>
          </info>
          <para>On non-Windows platforms, Subversion is able to version
          files of the special type <firstterm>symbolic
          link</firstterm> (or, <quote>symlink</quote>).  A symlink is
          a file which acts as a sort of transparent reference to some
          other object in the filesystem, allowing programs to read
          and write to those objects indirectly by way of performing
          operations on the symlink itself.</para>
          <para>When a symlink is committed into a Subversion
          repository, Subversion remembers that the file was in fact a
          symlink, as well as the object to which the symlink
          <quote>points</quote>.  When that symlink is checked out to
          another working copy on a non-Windows system, Subversion
          reconstructs a real filesystem-level symbolic link from the
          versioned symlink.  But that doesn't in any way limit the
          usability of working copies on systems such as Windows which
          do not support symlinks.  On such systems, Subversion simply
          creates a regular text file whose contents are the path to
          which to the original symlink pointed.  While that file
          can't be used as a symlink on a Windows system, it also
          won't prevent Windows users from performing their other
          Subversion-related activities.</para>
        </sidebar>
        <variablelist>
          <varlistentry>
            <term>
              <command>svn add foo</command>
            </term>
            <listitem>
              <para>Schedule file, directory, or symbolic link
              <filename>foo</filename> to be added to the repository.
              When you next commit, <filename>foo</filename> will
              become a child of its parent directory.  Note that if
              <filename>foo</filename> is a directory, everything
              underneath <filename>foo</filename> will be scheduled
              for addition.  If you only want to add
              <filename>foo</filename> itself, pass the
              <option>--non-recursive (-N)</option> option.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <command>svn delete foo</command>
            </term>
            <listitem>
              <para>Schedule file, directory, or symbolic link
              <filename>foo</filename> to be deleted from the
              repository.  If <filename>foo</filename> is a file or
              link, it is immediately deleted from your working copy.
              If <filename>foo</filename> is a directory, it is not
              deleted, but Subversion schedules it for deletion.  When
              you commit your changes, <filename>foo</filename> will
              be entirely removed from your working copy and the
              repository.
              <footnote><para>Of course, nothing is ever totally
              deleted from the repository&#x2014;just from the
              <literal>HEAD</literal> of the repository.  You can get
              back anything you delete by checking out (or updating
              your working copy to) a revision earlier than the one in
              which you deleted it. Also see
              <xref linkend="svn.branchmerge.advanced.resurrect"/>.
            </para></footnote></para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <command>svn copy foo bar</command>
            </term>
            <listitem>
              <para>Create a new item <filename>bar</filename> as a
              duplicate of <filename>foo</filename> and automatically
              schedule <filename>bar</filename> for addition.  When
              <filename>bar</filename> is added to the repository on
              the next commit, its copy history is recorded (as having
              originally come from <filename>foo</filename>).
              <command>svn copy</command> does not create intermediate
              directories unless you pass the
              <option>--parents</option>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <command>svn move foo bar</command>
            </term>
            <listitem>
              <para>This command is exactly the same as running
              <command>svn copy foo bar; svn delete foo</command>.
              That is, <filename>bar</filename> is scheduled for
              addition as a copy of <filename>foo</filename>, and
              <filename>foo</filename> is scheduled for removal.
              <command>svn move</command> does not create intermediate
              directories unless you pass the
              <option>--parents</option>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <command>svn mkdir blort</command>
            </term>
            <listitem>
              <para>This command is exactly the same as running
              <command>mkdir blort; svn add blort</command>.  That is,
              a new directory named <filename>blort</filename> is
              created and scheduled for addition.</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <sidebar>
          <info>
            <title>Changing the Repository Without a Working Copy</title>
          </info>
          <para>There <emphasis>are</emphasis> some use cases that
          immediately commit tree changes to the repository.  This
          only happens when a subcommand is operating directly on a
          URL, rather than on a working-copy path.  In particular,
          specific uses of <command>svn mkdir</command>, <command>svn
          copy</command>, <command>svn move</command>, and
          <command>svn delete</command> can work with URLs (And don't
          forget that <command>svn import</command> always makes
          changes to a URL).</para>
          <para>URL operations behave in this manner because commands
          that operate on a working copy can use the working copy as a
          sort of <quote>staging area</quote> to set up your changes
          before committing them to the repository.  Commands that
          operate on URLs don't have this luxury, so when you operate
          directly on a URL, any of the above actions represent an
          immediate commit.</para>
        </sidebar>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.tour.cycle.examine">
        <info>
          <title>Examine Your Changes</title>
        </info>
        <para>Once you've finished making changes, you need to commit
        them to the repository, but before you do so, it's usually a
        good idea to take a look at exactly what you've changed.  By
        examining your changes before you commit, you can make a more
        accurate log message.  You may also discover that you've
        inadvertently changed a file, and this gives you a chance to
        revert those changes before committing.  Additionally, this is
        a good opportunity to review and scrutinize changes before
        publishing them.  You can see an overview of the changes
        you've made by using <command>svn status</command>, and dig
        into the details of those changes by using <command>svn
        diff</command>.</para>
        <sidebar>
          <info>
            <title>Look Ma! No Network!</title>
          </info>
          <para>The commands <command>svn status</command>,
          <command>svn diff</command>, and <command>svn
          revert</command> can be used without any network access even
          if your repository <emphasis>is</emphasis> across the
          network.  This makes it easy to manage your
          changes-in-progress when you are somewhere without a network
          connection, such as travelling on an airplane, riding a
          commuter train or hacking on the beach.<footnote><para>And
          also that you don't have a WAN card.  Thought you got us,
          huh?</para></footnote></para>
          <para>Subversion does this by keeping private caches of
          pristine versions of each versioned file inside of the
          <filename>.svn</filename> administrative areas.  This allows
          Subversion to report&#x2014;and revert&#x2014;local
          modifications to those files <emphasis>without network
          access</emphasis>.  This cache (called the
          <quote>text-base</quote>) also allows Subversion to send the
          user's local modifications during a commit to the server as
          a compressed <firstterm>delta</firstterm> (or
          <quote>difference</quote>) against the pristine version.
          Having this cache is a tremendous benefit&#x2014;even if you
          have a fast net connection, it's much faster to send only a
          file's changes rather than the whole file to the
          server.</para>
        </sidebar>
        <para>Subversion has been optimized to help you with this task,
        and is able to do many things without communicating with the
        repository.  In particular, your working copy contains a
        hidden cached <quote>pristine</quote> copy of each version
        controlled file within the <filename>.svn</filename> area.
        Because of this, Subversion can quickly show you how your
        working files have changed, or even allow you to undo your
        changes without contacting the repository.</para>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.tour.cycle.examine.status">
          <info>
            <title>See an overview of your changes</title>
          </info>
          <para>To get an overview of your changes, you'll use the
          <command>svn status</command> command.  You'll probably use
          <command>svn status</command> more than any other Subversion
          command.</para>
          <sidebar>
            <info>
              <title>CVS Users: Hold That Update!</title>
            </info>
            <para>You're probably used to using <command>cvs
            update</command> to see what changes you've made to your
            working copy.  <command>svn status</command> will give you
            all the information you need regarding what has changed in
            your working copy&#x2014;without accessing the repository
            or potentially incorporating new changes published by
            other users.</para>
            <para>In Subversion, <command>update</command> does just
            that&#x2014;it updates your working copy with any changes
            committed to the repository since the last time you've
            updated your working copy.  You may have to break the
            habit of using the <command>update</command> command to
            see what local modifications you've made.</para>
          </sidebar>
          <para>If you run <command>svn status</command> at the top of
          your working copy with no arguments, it will detect all file
          and tree changes you've made.  Below are a few examples of
          the most common status codes that <command>svn
          status</command> can return.  (Note that the text following
          <literal>#</literal> is not
          actually printed by <command>svn status</command>.)</para>
          <screen>
A       stuff/loot/bloo.h   # file is scheduled for addition
C       stuff/loot/lump.c   # file has textual conflicts from an update
D       stuff/fish.c        # file is scheduled for deletion
M       bar.c               # the content in bar.c has local modifications
</screen>
          <para>In this output format <command>svn status</command>
          prints six columns of characters, followed by several
          whitespace characters, followed by a file or directory name.
          The first column tells the status of a file or directory
          and/or its contents.  The codes we listed are:</para>
          <variablelist>
            <varlistentry>
              <term>
                <computeroutput>A      item</computeroutput>
              </term>
              <listitem>
                <para>The file, directory, or symbolic link
                <filename>item</filename> has been scheduled for
                addition into the repository.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <computeroutput>C      item</computeroutput>
              </term>
              <listitem>
                <para>The file <filename>item</filename> is in a state
                of conflict.  That is, changes received from the
                server during an update overlap with local changes
                that you have in your working copy.  You must resolve
                this conflict before committing your changes to the
                repository.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <computeroutput>D      item</computeroutput>
              </term>
              <listitem>
                <para>The file, directory, or symbolic link
                <filename>item</filename> has been scheduled for
                deletion from the repository.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <computeroutput>M      item</computeroutput>
              </term>
              <listitem>
                <para>The contents of the file <filename>item</filename>
                have been modified.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <para>If you pass a specific path to <command>svn
          status</command>, you get information about that item
          alone:</para>
          <screen>
$ svn status stuff/fish.c
D      stuff/fish.c
</screen>
          <para><command>svn status</command> also has a
          <option>--verbose (-v)</option> option, which will show you
          the status of <emphasis>every</emphasis> item in your
          working copy, even if it has not been changed:</para>
          <screen>
$ svn status -v
M               44        23    sally     README
                44        30    sally     INSTALL
M               44        20    harry     bar.c
                44        18    ira       stuff
                44        35    harry     stuff/trout.c
D               44        19    ira       stuff/fish.c
                44        21    sally     stuff/things
A                0         ?     ?        stuff/things/bloo.h
                44        36    harry     stuff/things/gloo.c
</screen>
          <para>This is the <quote>long form</quote> output of
          <command>svn status</command>.  The letters in the first
          column mean the same as before, but the second column shows
          the working-revision of the item.  The third and fourth
          columns show the revision in which the item last changed,
          and who changed it.</para>
          <para>None of the prior invocations to <command>svn
          status</command> contact the repository&#x2014;instead, they
          compare the metadata in the
          <filename>.svn</filename> directory with the working copy.
          Finally, there is the <option>--show-updates (-u)</option>
          option, which contacts the repository and adds information
          about things that are out-of-date:</para>
          <screen>
$ svn status -u -v
M      *        44        23    sally     README
M               44        20    harry     bar.c
       *        44        35    harry     stuff/trout.c
D               44        19    ira       stuff/fish.c
A                0         ?     ?        stuff/things/bloo.h
Status against revision:   46
</screen>
          <para>Notice the two asterisks: if you were to run
          <command>svn update</command> at this point, you would
          receive changes to <filename>README</filename>
          and <filename>trout.c</filename>.  This tells you some very
          useful information&#x2014;you'll need to update and get the
          server changes on <filename>README</filename> before you
          commit, or the repository will reject your commit for being
          out-of-date.  (More on this subject later.)</para>
          <para><command>svn status</command> can display much more
            information about the files and directories in your
            working copy than we've shown here&#x2014;for an exhaustive
            description of svn status and its output, see <xref linkend="svn.ref.svn.c.status"/>.</para>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.tour.cycle.examine.diff">
          <info>
            <title>Examine the details of your local modifications</title>
          </info>
          <para>Another way to examine your changes is with the
          <command>svn diff</command> command.  You can find out
          <emphasis>exactly</emphasis> how you've modified things by
          running <command>svn diff</command> with no arguments, which
          prints out file changes in <firstterm>unified diff
          format</firstterm>:</para>
          <screen>
$ svn diff
Index: bar.c
===================================================================
--- bar.c	(revision 3)
+++ bar.c	(working copy)
@@ -1,7 +1,12 @@
+#include &lt;sys/types.h&gt;
+#include &lt;sys/stat.h&gt;
+#include &lt;unistd.h&gt;
+
+#include &lt;stdio.h&gt;

 int main(void) {
-  printf("Sixty-four slices of American Cheese...\n");
+  printf("Sixty-five slices of American Cheese...\n");
 return 0;
 }

Index: README
===================================================================
--- README	(revision 3)
+++ README	(working copy)
@@ -193,3 +193,4 @@
+Note to self:  pick up laundry.

Index: stuff/fish.c
===================================================================
--- stuff/fish.c	(revision 1)
+++ stuff/fish.c	(working copy)
-Welcome to the file known as 'fish'.
-Information on fish will be here soon.

Index: stuff/things/bloo.h
===================================================================
--- stuff/things/bloo.h	(revision 8)
+++ stuff/things/bloo.h	(working copy)
+Here is a new file to describe
+things about bloo.
</screen>
          <para>The <command>svn diff</command> command produces this
          output by comparing your working files against the cached
          <quote>pristine</quote> copies within the
          <filename>.svn</filename> area.  Files scheduled for
          addition are displayed as all added-text, and files
          scheduled for deletion are displayed as all deleted
          text.</para>
          <para>Output is displayed in unified diff format.  That is,
          removed lines are prefaced with <literal>-</literal> and
          added lines are prefaced with
          <literal>+</literal>.  <command>svn diff</command> also
          prints filename and offset information useful to the
          <command>patch</command> program, so you can generate
          <quote>patches</quote> by redirecting the diff output to a
          file:</para>
          <screen>
$ svn diff &gt; patchfile
</screen>
          <para>You could, for example, email the patch file to another
          developer for review or testing prior to commit.</para>
          <para>Subversion uses its internal diff engine, which produces
          unified diff format, by default.  If you want diff output in
          a different format, specify an external diff program using
          <option>--diff-cmd</option> and pass any flags you'd like to
          it using the <option>--extensions (-x)</option> option.  For
          example, to see local differences in file
          <filename>foo.c</filename> in context output format while
          ignoring case differences, you might run <command>svn diff
          --diff-cmd /usr/bin/diff --extensions '-i'
          foo.c</command>.</para>
        </section>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.tour.cycle.revert">
        <info>
          <title>Undoing Working Changes</title>
        </info>
        <para>Suppose while viewing the output of <command>svn
        diff</command> you determine that all the changes you made to
        a particular file are mistakes.  Maybe you shouldn't have
        changed the file at all, or perhaps it would be easier to make
        different changes starting from scratch.</para>
        <para>This is a perfect opportunity to use <command>svn
        revert</command>:</para>
        <screen>
$ svn revert README
Reverted 'README'
</screen>
        <para>Subversion reverts the file to its pre-modified state by
        overwriting it with the cached <quote>pristine</quote> copy
        from the <filename>.svn</filename> area.  But also note that
        <command>svn revert</command> can undo
        <emphasis>any</emphasis> scheduled operations&#x2014;for
        example, you might decide that you don't want to add a new
        file after all:</para>
        <screen>
$ svn status foo
?      foo

$ svn add foo
A         foo

$ svn revert foo
Reverted 'foo'

$ svn status foo
?      foo
</screen>
        <note>
          <para><command>svn revert</command><replaceable>ITEM</replaceable> has exactly the same
          effect as deleting <replaceable>ITEM</replaceable> from
          your working copy and then running <command>svn update -r
          BASE</command> <replaceable>ITEM</replaceable>.  However,
          if you're reverting a file, <command>svn revert</command>
          has one very noticeable difference&#x2014;it doesn't have
          to communicate with the repository to restore your
          file.</para>
        </note>
        <para>Or perhaps you mistakenly removed a file from version
        control:</para>
        <screen>
$ svn status README
       README

$ svn delete README
D         README

$ svn revert README
Reverted 'README'

$ svn status README
       README
</screen>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.tour.cycle.resolve">
        <info>
          <title>Resolve Conflicts (Merging Others' Changes)</title>
        </info>
        <para>We've already seen how <command>svn status -u</command>
        can predict conflicts.  Suppose you run <command>svn
        update</command> and some interesting things occur:</para>
        <screen>
$ svn update
U  INSTALL
G  README
C  bar.c
Updated to revision 46.
</screen>
        <para>The <computeroutput>U</computeroutput> and
        <computeroutput>G</computeroutput> codes are no cause for
        concern; those files cleanly absorbed changes from the
        repository.  The files marked with
        <computeroutput>U</computeroutput> contained no local changes
        but were <computeroutput>U</computeroutput>pdated with changes
        from the repository.  The <computeroutput>G</computeroutput>
        stands for mer<computeroutput>G</computeroutput>ed, which
        means that the file had local changes to begin with, but the
        changes coming from the repository didn't overlap with the local
        changes.</para>
        <para>But the <computeroutput>C</computeroutput> stands for
        <computeroutput>c</computeroutput>onflict.  This means that the
        changes from the server overlapped with your own, and now you
        have to manually choose between them.</para>
        <para>Whenever a conflict occurs, three things typically occur
        to assist you in noticing and resolving that conflict:</para>
        <itemizedlist>
          <listitem>
            <para>Subversion prints a <computeroutput>C</computeroutput>
            during the update, and remembers that the file is in a
            state of conflict.</para>
          </listitem>
          <listitem>
            <para>If Subversion considers the file to be mergeable,
            it places <firstterm>conflict
            markers</firstterm>&#x2014;special strings of text which
            delimit the <quote>sides</quote> of the
            conflict&#x2014;into the file to visibly demonstrate the
            overlapping areas.  (Subversion uses the
            <literal>svn:mime-type</literal> property to decide if a
            file is capable of contextual, line-based merging.  See
            <xref linkend="svn.advanced.props.special.mime-type"/> to learn more.)</para>
          </listitem>
          <listitem>
            <para>For every conflicted file, Subversion places three
            extra unversioned files in your working copy:</para>
            <variablelist>
              <varlistentry>
                <term>
                  <filename>filename.mine</filename>
                </term>
                <listitem>
                  <para>This is your file as it existed in your working
                  copy before you updated your working copy&#x2014;that
                  is, without conflict markers.  This file has only
                  your latest changes in it.  (If Subversion considers
                  the file to be unmergeable, then the
                  <filename>.mine</filename> file isn't created, since
                  it would be identical to the working file.)</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>
                  <filename>filename.rOLDREV</filename>
                </term>
                <listitem>
                  <para>This is the file that was the
                  <literal>BASE</literal> revision before you updated
                  your working copy.  That is, the file that you
                  checked out before you made your latest
                  edits.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>
                  <filename>filename.rNEWREV</filename>
                </term>
                <listitem>
                  <para>This is the file that your Subversion client
                  just received from the server when you updated your
                  working copy.  This file corresponds to the
                  <literal>HEAD</literal> revision of the
                  repository.</para>
                </listitem>
              </varlistentry>
            </variablelist>
            <para>Here <literal>OLDREV</literal> is the revision number
            of the file in your <filename>.svn</filename> directory
            and <literal>NEWREV</literal> is the revision number of
            the repository <literal>HEAD</literal>.</para>
          </listitem>
        </itemizedlist>
        <para>For example, Sally makes changes to the file
        <filename>sandwich.txt</filename> in the repository.  Harry has
        just changed the file in his working copy and checked it in.
        Sally updates her working copy before checking in and she gets
        a conflict:</para>
        <screen>
$ svn update
C  sandwich.txt
Updated to revision 2.
$ ls -1
sandwich.txt
sandwich.txt.mine
sandwich.txt.r1
sandwich.txt.r2
</screen>
        <para>At this point, Subversion will <emphasis>not</emphasis>
        allow you to commit the file <filename>sandwich.txt</filename>
        until the three temporary files are removed.</para>
        <screen>
$ svn commit -m "Add a few more things"
svn: Commit failed (details follow):
svn: Aborting commit: '/home/sally/svn-work/sandwich.txt' remains in conflict
</screen>
        <para>If you get a conflict, you need to do one of three
        things:</para>
        <itemizedlist>
          <listitem>
            <para>Merge the conflicted text <quote>by hand</quote> (by
              examining and editing the conflict markers within the
              file).</para>
          </listitem>
          <listitem>
            <para>Copy one of the temporary files on top of your
              working file.</para>
          </listitem>
          <listitem>
            <para>Run <command>svn revert &lt;filename&gt;</command>
              to throw away all of your local changes.</para>
          </listitem>
        </itemizedlist>
        <para>Once you've resolved the conflict, you need to let
        Subversion know by running <command>svn resolved</command>.
        This removes the three temporary files and Subversion no
        longer considers the file to be in a state of
        conflict.<footnote><para>You can always remove the temporary
        files yourself, but would you really want to do that when
        Subversion can do it for you?  We didn't think so.</para></footnote></para>
        <screen>
$ svn resolved sandwich.txt
Resolved conflicted state of 'sandwich.txt'
</screen>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.tour.cycle.resolve.byhand">
          <info>
            <title>Merging Conflicts by Hand</title>
          </info>
          <para>Merging conflicts by hand can be quite intimidating the
          first time you attempt it, but with a little practice, it
          can become as easy as falling off a bike.</para>
          <para>Here's an example.  Due to a miscommunication, you and
          Sally, your collaborator, both edit the file
          <filename>sandwich.txt</filename> at the same time.  Sally
          commits her changes, and when you go to update your working
          copy, you get a conflict and you're going to have to edit
          <filename>sandwich.txt</filename> to resolve the conflicts.
          First, let's take a look at the file:</para>
          <screen>
$ cat sandwich.txt
Top piece of bread
Mayonnaise
Lettuce
Tomato
Provolone
&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine
Salami
Mortadella
Prosciutto
=======
Sauerkraut
Grilled Chicken
&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r2
Creole Mustard
Bottom piece of bread
</screen>
          <para>The strings of less-than signs, equal signs, and
          greater-than signs are conflict markers, and are not part of
          the actual data in conflict.  You generally want to ensure
          that those are removed from the file before your next
          commit.  The text between the first two sets of markers is
          composed of the changes you made in the conflicting
          area:</para>
          <screen>
&lt;&lt;&lt;&lt;&lt;&lt;&lt; .mine
Salami
Mortadella
Prosciutto
=======
</screen>
          <para>The text between the second and third sets of conflict
          markers is the text from Sally's commit:</para>
          <screen>
=======
Sauerkraut
Grilled Chicken
&gt;&gt;&gt;&gt;&gt;&gt;&gt; .r2
</screen>
          <para>Usually you won't want to just delete the conflict
          markers and Sally's changes&#x2014;she's going to be awfully
          surprised when the sandwich arrives and it's not what she
          wanted.  So this is where you pick up the phone or walk
          across the office and explain to Sally that you can't get
          sauerkraut from an Italian deli.<footnote><para>And if you
          ask them for it, they may very well ride you out of town on
          a rail.</para></footnote> Once you've agreed on the changes
          you will check in, edit your file and remove the conflict
          markers.</para>
          <screen>
Top piece of bread
Mayonnaise
Lettuce
Tomato
Provolone
Salami
Mortadella
Prosciutto
Creole Mustard
Bottom piece of bread
</screen>
          <para>Now run <command>svn resolved</command>, and you're
          ready to commit your changes:</para>
          <screen>
$ svn resolved sandwich.txt
$ svn commit -m "Go ahead and use my sandwich, discarding Sally's edits."
</screen>
          <para>Note that <command>svn resolved</command>, unlike most
          of the other commands we deal with in this chapter, requires
          an argument.  In any case, you want to be careful and only
          run <command>svn resolved</command> when you're certain that
          you've fixed the conflict in your file&#x2014;once the
          temporary files are removed, Subversion will let you commit
          the file even if it still contains conflict markers.</para>
          <para>If you ever get confused while editing the conflicted
          file, you can always consult the three files that Subversion
          creates for you in your working copy&#x2014;including your
          file as it was before you updated.  You can even use a
          third-party interactive merging tool to examine those three
          files.</para>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.tour.cycle.resolve.copyover">
          <info>
            <title>Copying a File Onto Your Working File</title>
          </info>
          <para>If you get a conflict and decide that you want to throw
          out your changes, you can merely copy one of the temporary
          files created by Subversion over the file in your working
          copy:</para>
          <screen>
$ svn update
C  sandwich.txt
Updated to revision 2.
$ ls sandwich.*
sandwich.txt  sandwich.txt.mine  sandwich.txt.r2  sandwich.txt.r1
$ cp sandwich.txt.r2 sandwich.txt
$ svn resolved sandwich.txt
</screen>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.tour.cycle.resolve.revert">
          <info>
            <title>Punting: Using <command>svn revert</command></title>
          </info>
          <para>If you get a conflict, and upon examination decide that
          you want to throw out your changes and start your edits
          again, just revert your changes:</para>
          <screen>
$ svn revert sandwich.txt
Reverted 'sandwich.txt'
$ ls sandwich.*
sandwich.txt
</screen>
          <para>Note that when you revert a conflicted file, you don't
          have to run <command>svn resolved</command>.</para>
        </section>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.tour.cycle.commit">
        <info>
          <title>Commit Your Changes</title>
        </info>
        <para>Finally!  Your edits are finished, you've merged all
        changes from the server, and you're ready to commit your
        changes to the repository.</para>
        <para>The <command>svn commit</command> command sends all of
        your changes to the repository.  When you commit a change, you
        need to supply a <firstterm>log message</firstterm>,
        describing your change.  Your log message will be attached to
        the new revision you create.  If your log message is brief,
        you may wish to supply it on the command line using the
        <option>--message</option> (or <option>-m</option>)
        option:</para>
        <screen>
$ svn commit -m "Corrected number of cheese slices."
Sending        sandwich.txt
Transmitting file data .
Committed revision 3.
</screen>
        <para>However, if you've been composing your log message as you
        work, you may want to tell Subversion to get the message from
        a file by passing the filename with the
        <option>--file (-F)</option> option:</para>
        <screen>
$ svn commit -F logmsg
Sending        sandwich.txt
Transmitting file data .
Committed revision 4.
</screen>
        <para>If you fail to specify either the
        <option>--message</option> or <option>--file</option> option,
        then Subversion will automatically launch your favorite editor
        (see the <literal>editor-cmd</literal> section in
        <xref linkend="svn.advanced.confarea.opts.config"/>) for composing a log
        message.</para>
        <tip>
          <para>If you're in your editor writing a commit message and
          decide that you want to cancel your commit, you can just
          quit your editor without saving changes.  If you've already
          saved your commit message, simply delete the text, save
          again, then abort.</para>
          <screen>
$ svn commit
Waiting for Emacs...Done

Log message unchanged or not specified
a)bort, c)ontinue, e)dit
a
$
</screen>
        </tip>
        <para>The repository doesn't know or care if your changes make
        any sense as a whole; it only checks to make sure that nobody
        else has changed any of the same files that you did when you
        weren't looking.  If somebody <emphasis>has</emphasis> done
        that, the entire commit will fail with a message informing you
        that one or more of your files is out-of-date:</para>
        <screen>
$ svn commit -m "Add another rule"
Sending        rules.txt
svn: Commit failed (details follow):
svn: Your file or directory 'sandwich.txt' is probably out-of-date
&#x2026;
</screen>
        <para>(The exact wording of this error message depends on the
        network protocol and server you're using, but the idea is the
        same in all cases.)</para>
        <para>At this point, you need to run <command>svn
        update</command>, deal with any merges or conflicts that
        result, and attempt your commit again.</para>
        <para>That covers the basic work cycle for using Subversion.
        There are many other features in Subversion that you can use
        to manage your repository and working copy, but most of your
        day-to-day use of Subversion will involve only the commands
        that we've discussed so far in this chapter.  We will,
        however, cover a few more commands that you'll use fairly
        often.</para>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.tour.history">
      <info>
        <title>Examining History</title>
      </info>
      <para>Your Subversion repository is like a time machine.  It keeps
      a record of every change ever committed, and allows you to
      explore this history by examining previous versions of files and
      directories as well as the metadata that accompanies them.  With
      a single Subversion command, you can check out the repository
      (or restore an existing working copy) exactly as it was at any
      date or revision number in the past.  However, sometimes you
      just want to <emphasis>peer into</emphasis> the past instead of
      <emphasis>going into</emphasis> the past.</para>
      <para>There are several commands that can provide you with
      historical data from the repository:</para>
      <variablelist>
        <varlistentry>
          <term>
            <command>svn log</command>
          </term>
          <listitem>
            <para>Shows you broad information: log messages with date
              and author information attached to revisions, and which
              paths changed in each revision.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <command>svn diff</command>
          </term>
          <listitem>
            <para>Shows line-level details of a particular change.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <command>svn cat</command>
          </term>
          <listitem>
            <para>Retrieves a file as it existed in a particular
              revision number and display it on your screen.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <command>svn list</command>
          </term>
          <listitem>
            <para>Displays the files in a directory for any given
              revision.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <!-- =============================================================== -->
      <section xml:id="svn.tour.history.log">
        <info>
          <title>Generating a list of historical changes</title>
        </info>
        <para>To find information about the history of a file or
        directory, use the <command>svn log</command>
        command. <command>svn log</command> will provide you with a
        record of who made changes to a file or directory, at what
        revision it changed, the time and date of that revision, and,
        if it was provided, the log message that accompanied the
        commit.</para>
        <screen>
$ svn log
------------------------------------------------------------------------
r3 | sally | Mon, 15 Jul 2002 18:03:46 -0500 | 1 line

Added include lines and corrected # of cheese slices.
------------------------------------------------------------------------
r2 | harry | Mon, 15 Jul 2002 17:47:57 -0500 | 1 line

Added main() methods.
------------------------------------------------------------------------
r1 | sally | Mon, 15 Jul 2002 17:40:08 -0500 | 1 line

Initial import
------------------------------------------------------------------------
</screen>
        <para>Note that the log messages are printed in
        <emphasis>reverse chronological order</emphasis> by default.
        If you wish to see a different range of revisions in a
        particular order, or just a single revision, pass the
        <option>--revision (-r)</option> option:</para>
        <screen>
$ svn log -r 5:19    # shows logs 5 through 19 in chronological order

$ svn log -r 19:5    # shows logs 5 through 19 in reverse order

$ svn log -r 8       # shows log for revision 8
</screen>
        <para>You can also examine the log history of a single file or
        directory.  For example:</para>
        <screen>
$ svn log foo.c
&#x2026;
$ svn log http://foo.com/svn/trunk/code/foo.c
&#x2026;
</screen>
        <para>These will display log messages <emphasis>only</emphasis>
        for those revisions in which the working file (or URL)
        changed.</para>
        <sidebar>
          <info>
            <title>Why Does <command>svn log</command> Not Show Me What I
          Just Committed?</title>
          </info>
          <para>If you make a commit and immediately type <command>svn
          log</command> with no arguments, you may notice that your
          most recent commit doesn't show up in the list of log
          messages.  This is due to a combination of the behavior of
          <command>svn commit</command> and the default behavior of
          <command>svn log</command>.  First, when you commit changes
          to the repository, <command>svn</command> only bumps the
          revision of files (and directories) that it commits, so
          usually the parent directory remains at the older revision
          (See <xref linkend="svn.basic.in-action.mixedrevs.update-commit"/> for
          why).  <command>svn log</command> then defaults to fetching
          the history of the directory at its current revision, and
          thus you don't see the newly-committed changes.  The
          solution here is to either update your working copy or
          explicitly provide a revision number to <command>svn
          log</command> by using the <option>--revision</option>
          (<option>-r</option>) option.</para>
        </sidebar>
        <para>If you want even more information about a file or
        directory, <command>svn log</command> also takes a
        <option>--verbose (-v)</option> option.  Because Subversion
        allows you to move and copy files and directories, it is
        important to be able to track path changes in the filesystem,
        so in verbose mode, <command>svn log</command> will include a
        list of changed paths in a revision in its output:</para>
        <screen>
$ svn log -r 8 -v
------------------------------------------------------------------------
r8 | sally | 2002-07-14 08:15:29 -0500 | 1 line
Changed paths:
M /trunk/code/foo.c
M /trunk/code/bar.h
A /trunk/code/doc/README

Frozzled the sub-space winch.

------------------------------------------------------------------------
</screen>
        <para><command>svn log</command> also takes a <option>--quiet</option>
        (<option>-q</option>) option, which suppresses the body of the
        log message.  When combined with <option>--verbose</option>, it
        gives just the names of the changed files.</para>
        <sidebar>
          <info>
            <title>Why Does <command>svn log</command> Give Me an Empty
          Response?</title>
          </info>
          <para>After working with Subversion for a bit, most users will
          come across something like this:</para>
          <screen>
$ svn log -r 2
------------------------------------------------------------------------
$
</screen>
          <para>At first glance, this seems like an error.  But recall
          that while revisions are repository-wide, <command>svn
          log</command> operates on a path in the repository.  If you
          supply no path, Subversion uses the current working
          directory as the default target.  As a result, if you're
          operating in a subdirectory of your working copy and attempt
          to see the log of a revision in which neither that directory
          nor any of its children was changed, Subversion will show you
          an empty log.  If you want to see what changed in that
          revision, try pointing <command>svn log</command> directly at
          the top-most URL of your repository, as in <command>svn log -r 2
          http://svn.collab.net/repos/svn</command>.</para>
        </sidebar>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.tour.history.diff">
        <info>
          <title>Examining the details of historical changes</title>
        </info>
        <para>We've already seen <command>svn diff</command>
        before&#x2014;it displays file differences in unified diff
        format; it was used to show the local modifications made to
        our working copy before committing to the repository.</para>
        <para>In fact, it turns out that there are
        <emphasis>three</emphasis> distinct uses of <command>svn
        diff</command>:</para>
        <itemizedlist>
          <listitem>
            <para>Examining local changes</para>
          </listitem>
          <listitem>
            <para>Comparing your working copy to the repository</para>
          </listitem>
          <listitem>
            <para>Comparing repository to repository</para>
          </listitem>
        </itemizedlist>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.tour.history.diff.local">
          <info>
            <title>Examining Local Changes</title>
          </info>
          <para>As we've seen, invoking <command>svn diff</command> with
          no options will compare your working files to the cached
          <quote>pristine</quote> copies in
          the <filename>.svn</filename> area:</para>
          <screen>
$ svn diff
Index: rules.txt
===================================================================
--- rules.txt	(revision 3)
+++ rules.txt	(working copy)
@@ -1,4 +1,5 @@
 Be kind to others
 Freedom = Responsibility
 Everything in moderation
-Chew with your mouth open
+Chew with your mouth closed
+Listen when others are speaking
$
</screen>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.tour.history.diff.wcrepos">
          <info>
            <title>Comparing Working Copy to Repository</title>
          </info>
          <para>If a single <option>--revision</option>
          (<option>-r</option>) number is passed, then your
          working copy is compared to the specified revision in the
          repository.</para>
          <screen>
$ svn diff -r 3 rules.txt
Index: rules.txt
===================================================================
--- rules.txt	(revision 3)
+++ rules.txt	(working copy)
@@ -1,4 +1,5 @@
 Be kind to others
 Freedom = Responsibility
 Everything in moderation
-Chew with your mouth open
+Chew with your mouth closed
+Listen when others are speaking
$
</screen>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.tour.history.diff.reposrepos">
          <info>
            <title>Comparing Repository to Repository</title>
          </info>
          <para>If two revision numbers, separated by a colon, are
          passed via <option>--revision (-r)</option>, then the two
          revisions are directly compared.</para>
          <screen>
$ svn diff -r 2:3 rules.txt
Index: rules.txt
===================================================================
--- rules.txt	(revision 2)
+++ rules.txt	(revision 3)
@@ -1,4 +1,4 @@
 Be kind to others
-Freedom = Chocolate Ice Cream
+Freedom = Responsibility
 Everything in moderation
 Chew with your mouth open
$
</screen>
          <para>A more convenient way of comparing a revision to the
          previous revision is to use the <option>--change (-c)</option>:
          </para>
          <screen>
$ svn diff -c 3 rules.txt
Index: rules.txt
===================================================================
--- rules.txt	(revision 2)
+++ rules.txt	(revision 3)
@@ -1,4 +1,4 @@
 Be kind to others
-Freedom = Chocolate Ice Cream
+Freedom = Responsibility
 Everything in moderation
 Chew with your mouth open
$
</screen>
          <para>Lastly, you can compare repository revisions even when
          you don't have a working copy on your local machine, just by
          including the appropriate URL on the command line:</para>
          <screen>
$ svn diff -c 5 http://svn.example.com/repos/example/trunk/text/rules.txt
&#x2026;
$
</screen>
        </section>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.tour.history.browsing">
        <info>
          <title>Browsing the repository</title>
        </info>
        <para>Using <command>svn cat</command> and <command>svn
        list</command>, you can view various revisions of files and
        directories without changing the working revision of your
        working copy.  In fact, you don't even need a working copy to
        use either one.</para>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.tour.history.browsing.cat">
          <info>
            <title>
              <command>svn cat</command>
            </title>
          </info>
          <para>If you want to examine an earlier version of a file and
          not necessarily the differences between two files, you can use
          <command>svn cat</command>:</para>
          <screen>
$ svn cat -r 2 rules.txt
Be kind to others
Freedom = Chocolate Ice Cream
Everything in moderation
Chew with your mouth open
$
</screen>
          <para>You can also redirect the output directly into a
          file:</para>
          <screen>
$ svn cat -r 2 rules.txt &gt; rules.txt.v2
$
</screen>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.tour.history.browsing.list">
          <info>
            <title>
              <command>svn list</command>
            </title>
          </info>
          <para>The <command>svn list</command> command shows you what
          files are in a repository directory without actually
          downloading the files to your local machine:</para>
          <screen>
$ svn list http://svn.collab.net/repos/svn
README
branches/
clients/
tags/
trunk/
</screen>
          <para>If you want a more detailed listing, pass the
          <option>--verbose (-v)</option> flag to get output like
          this:</para>
          <screen>
$ svn list -v http://svn.collab.net/repos/svn
  20620 harry            1084 Jul 13  2006 README
  23339 harry                 Feb 04 01:40 branches/
  21282 sally                 Aug 27 09:41 developer-resources/
  23198 harry                 Jan 23 17:17 tags/
  23351 sally                 Feb 05 13:26 trunk/
</screen>
          <para>The columns tell you the revision at which the file or
          directory was last modified, the user who modified it, the size
          if it is a file, the date it was last modified, and the item's
          name.</para>
          <warning>
            <para>The <command>svn list</command> with no arguments
          defaults to the <emphasis>repository URL</emphasis> of the
          current working directory, <emphasis>not</emphasis> the
          local working copy directory.  After all, if you wanted a
          listing of your local directory, you could use just plain
          <command>ls</command> (or any reasonable non-Unixy
          equivalent).</para>
          </warning>
        </section>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.tour.history.snapshots">
        <info>
          <title>Fetching older repository snapshots</title>
        </info>
        <para>In addition to all of the above commands, you can use
        <command>svn update</command> and <command>svn
        checkout</command> with the <option>--revision</option> option
        to take an entire working copy <quote>back in time</quote>
        <footnote><para>See?  We told you that Subversion was a time
        machine.</para></footnote>:</para>
        <screen>
$ svn checkout -r 1729 # Checks out a new working copy at r1729
&#x2026;
$ svn update -r 1729 # Updates an existing working copy to r1729
&#x2026;
</screen>
        <tip>
          <para>Many Subversion newcomers attempt to use the above
          <command>svn update</command> example to <quote>undo</quote>
          committed changes, but this won't work as you can't commit
          changes that you obtain from backdating a working copy if
          the changed files have newer revisions.  See <xref linkend="svn.branchmerge.advanced.resurrect"/> for a
          description of how to <quote>undo</quote> a commit.</para>
        </tip>
        <para>Lastly, if you're building a release and wish to bundle up
        your files from Subversion but don't want those
        pesky <filename>.svn</filename> directories in the way, then
        you can use <command>svn export</command> to create a local
        copy of all or part of your repository
        sans <filename>.svn</filename> directories.  As
        with <command>svn update</command> and
        <command>svn checkout</command>, you can also pass the
        <option>--revision</option> option to <command>svn
        export</command>:</para>
        <screen>
$ svn export http://svn.example.com/svn/repos1 # Exports latest revision
&#x2026;
$ svn export http://svn.example.com/svn/repos1 -r 1729
# Exports revision r1729
&#x2026;
</screen>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.tour.cleanup">
      <info>
        <title>Sometimes You Just Need to Clean Up</title>
      </info>
      <para>When Subversion modifies your working copy (or any
      information within <filename>.svn</filename>), it tries to do
      so as safely as possible.  Before changing the working copy,
      Subversion writes its intentions to a log file.  Next it
      executes the commands in the log file to apply the requested
      change, holding a lock on the relevant part of the working
      copy while it works&#x2014;to prevent other Subversion clients
      from accessing the working copy in mid-change.  Finally,
      Subversion removes the log file.  Architecturally, this is
      similar to a journaled filesystem.  If a Subversion operation
      is interrupted (if the process is killed, or if the machine
      crashes, for example), the log files remain on disk.  By
      re-executing the log files, Subversion can complete the
      previously started operation, and your working copy can get
      itself back into a consistent state.</para>
      <para>And this is exactly what <command>svn cleanup</command>
      does: it searches your working copy and runs any leftover
      logs, removing working copy locks in the process.
      If Subversion ever tells you that some part of your working copy
      is <quote>locked</quote>, then this is the command that you
      should run.  Also, <command>svn status</command> will display
      an <literal>L</literal> next to locked items:</para>
      <screen>
$ svn status
  L    somedir
M      somedir/foo.c

$ svn cleanup
$ svn status
M      somedir/foo.c
</screen>
      <para>Don't confuse these working copy locks with the ordinary
      locks that Subversion users create when using
      the <quote>lock-modify-unlock</quote> model of concurrent
      version control; see
      <xref linkend="svn.advanced.locking.meanings"/> for
      clarification.</para>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.tour.summary">
      <info>
        <title>Summary</title>
      </info>
      <para>Now we've covered most of the Subversion client commands.
        Notable exceptions are those dealing with branching and
        merging (see <xref linkend="svn.branchmerge"/>) and properties (see
        <xref linkend="svn.advanced.props"/>).  However, you may want to
        take a moment to skim through <xref linkend="svn.ref"/> to
        get an idea of all the many different commands that Subversion
        has&#x2014;and how you can use them to make your work
        easier.</para>
    </section>
  </chapter>
  <!--
local variables:
sgml-parent-document: ("book.xml" "chapter")
end:
-->
  <chapter xml:id="svn.advanced">
    <info>
      <title>Advanced Topics</title>
    </info>
    <para>If you've been reading this book chapter by chapter, from
    start to finish, you should by now have acquired enough
    knowledge to use the Subversion client to perform the most
    common version control operations.  You understand how to
    check out a working copy from a Subversion repository.  You are
    comfortable with submitting and receiving changes using the
    <command>svn commit</command> and <command>svn update</command>
    functions.  You've probably even developed a reflex which causes
    you to run the <command>svn status</command> command almost
    unconsciously.  For all intents and purposes, you are ready to
    use Subversion in a typical environment.</para>
    <para>But the Subversion feature set doesn't stop at <quote>common
    version control operations</quote>.  It has other bits of
    functionality besides just communicating file and
    directory changes to and from a central repository.</para>
    <para>This chapter highlights some of Subversion's features that,
    while important, aren't part of the typical user's daily routine.
    It assumes that you are familiar with Subversion's basic file and
    directory versioning capabilities.  If you aren't, you'll want to
    first read <xref linkend="svn.basic"/> and <xref linkend="svn.tour"/>.  Once you've mastered those basics and
    consumed this chapter, you'll be a Subversion power-user!</para>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.tour.revs.specifiers">
      <info>
        <title>Revision Specifiers</title>
      </info>
      <para>As you saw in <xref linkend="svn.basic.in-action.revs"/>, revision
      numbers in Subversion are pretty straightforward&#x2014;integers
      that keep getting larger as you commit more changes to your
      versioned data.  Still, it doesn't take long before you can no
      longer remember exactly what happened in each and every
      revision.  Fortunately, the typical Subversion workflow doesn't
      often demand that you supply arbitrary revisions to the
      Subversion operations you perform.  For operations that
      <emphasis>do</emphasis> require a revision specifier, you
      generally supply a revision number that you saw in a commit
      email, in the output of some other Subversion operation, or in
      some other context that would give meaning to that particular
      number.</para>
      <para>But occasionally, you need to pinpoint a moment in time for
      which you don't already have a revision number memorized or
      handy.  So besides the integer revision numbers,
      <command>svn</command> allows as input some additional forms of
      revision specifiers&#x2014;<firstterm>revision keywords</firstterm>, and revision
      dates.</para>
      <note>
        <para>The various forms of Subversion revision specifiers can be
        mixed and matched when used to specify revision ranges.  For
        example, you can use <option>-r
        <replaceable>REV1</replaceable>:<replaceable>REV2</replaceable></option>
        where <replaceable>REV1</replaceable> is a revision keyword
        and <replaceable>REV2</replaceable> is a revision number, or
        where <replaceable>REV1</replaceable> is a date and
        <replaceable>REV2</replaceable> is a revision keyword, and so
        on.  The individual revision specifiers are independently
        evaluated, so you can put whatever you want on the opposite
        sides of that colon.</para>
      </note>
      <!-- =============================================================== -->
      <section xml:id="svn.tour.revs.keywords">
        <info>
          <title>Revision Keywords</title>
        </info>
        <indexterm>
          <primary>revisions</primary>
          <secondary>revision keywords</secondary>
        </indexterm>
        <indexterm>
          <primary>HEAD</primary>
        </indexterm>
        <indexterm>
          <primary>BASE</primary>
        </indexterm>
        <indexterm>
          <primary>COMMITTED</primary>
        </indexterm>
        <indexterm>
          <primary>PREV</primary>
        </indexterm>
        <para>The Subversion client understands a number of
        revision keywords.  These keywords can
        be used instead of integer arguments to the
        <option>--revision (-r)</option> switch, and are resolved into
        specific revision numbers by Subversion:</para>
        <variablelist>
          <varlistentry>
            <term>HEAD</term>
            <listitem>
              <para>The latest (or <quote>youngest</quote>) revision in
              the repository.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>BASE</term>
            <listitem>
              <para>The revision number of an item in a working copy.
              If the item has been locally modified, the <quote>BASE
              version</quote> refers to the way the item appears
              without those local modifications.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>COMMITTED</term>
            <listitem>
              <para>The most recent revision prior to, or equal to,
              <literal>BASE</literal>, in which an item changed.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>PREV</term>
            <listitem>
              <para>The revision immediately <emphasis>before</emphasis>
              the last revision in which an item changed.
              Technically, this boils down to
              <literal>COMMITTED</literal>-1.</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>As can be derived from their descriptions, the
        <literal>PREV</literal>, <literal>BASE</literal>, and
        <literal>COMMITTED</literal> revision keywords are used only
        when referring to a working copy path&#x2014;they don't apply
        to repository URLs.  <literal>HEAD</literal>, on the other
        hand, can be used in conjunction with both of these path
        types.</para>
        <para>Here are some examples of revision keywords in
        action:</para>
        <screen>
$ svn diff -r PREV:COMMITTED foo.c
# shows the last change committed to foo.c

$ svn log -r HEAD
# shows log message for the latest repository commit

$ svn diff -r HEAD
# compares your working copy (with all of its local changes) to the
# latest version of that tree in the repository

$ svn diff -r BASE:HEAD foo.c
# compares the unmodified version of foo.c with the latest version of
# foo.c in the repository

$ svn log -r BASE:HEAD
# shows all commit logs for the current versioned directory since you
# last updated

$ svn update -r PREV foo.c
# rewinds the last change on foo.c, decreasing foo.c's working revision

$ svn diff -r BASE:14 foo.c
# compares the unmodified version of foo.c with the way foo.c looked
# in revision 14
</screen>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.tour.revs.dates">
        <info>
          <title>Revision Dates</title>
        </info>
        <indexterm>
          <primary>revisions</primary>
          <secondary>specified as dates</secondary>
        </indexterm>
        <para>Revision numbers reveal nothing about the world outside
        the version control system, but sometimes you need to
        correlate a moment in real time with a moment in version
        history.  To facilitate this, the <option>--revision (-r)</option>
        option can also accept as input date specifiers wrapped in
        curly braces (<literal>{</literal> and <literal>}</literal>).
        Subversion accepts the standard ISO-8601 date and time
        formats, plus a few others.  Here are some examples.
        (Remember to use quotes around any date that contains
        spaces.)</para>
        <screen>
$ svn checkout -r {2006-02-17}
$ svn checkout -r {15:30}
$ svn checkout -r {15:30:00.200000}
$ svn checkout -r {"2006-02-17 15:30"}
$ svn checkout -r {"2006-02-17 15:30 +0230"}
$ svn checkout -r {2006-02-17T15:30}
$ svn checkout -r {2006-02-17T15:30Z}
$ svn checkout -r {2006-02-17T15:30-04:00}
$ svn checkout -r {20060217T1530}
$ svn checkout -r {20060217T1530Z}
$ svn checkout -r {20060217T1530-0500}
&#x2026;
</screen>
        <para>When you specify a date, Subversion resolves that date to
        the most recent revision of the repository as of that date,
        and then continues to operate against that resolved revision
        number:</para>
        <screen>
$ svn log -r {2006-11-28}
------------------------------------------------------------------------
r12 | ira | 2006-11-27 12:31:51 -0600 (Mon, 27 Nov 2006) | 6 lines
&#x2026;
</screen>
        <sidebar>
          <info>
            <title>Is Subversion a Day Early?</title>
          </info>
          <para>If you specify a single date as a revision without
          specifying a time of day (for example
          <literal>2006-11-27</literal>), you may think that Subversion
          should give you the last revision that took place on the
          27th of November.  Instead, you'll get back a revision from
          the 26th, or even earlier.  Remember that Subversion will
          find the <emphasis>most recent revision of the
          repository</emphasis> as of the date you give.  If you give
          a date without a timestamp, like
          <literal>2006-11-27</literal>, Subversion assumes a time of
          00:00:00, so looking for the most recent revision won't
          return anything on the day of the 27th.</para>
          <para>If you want to include the 27th in your search, you can
          either specify the 27th with the time (<literal>{"2006-11-27
          23:59"}</literal>), or just specify the next day
          (<literal>{2006-11-28}</literal>).</para>
        </sidebar>
        <para>You can also use a range of dates.  Subversion will find
        all revisions between both dates, inclusive:</para>
        <screen>
$ svn log -r {2006-11-20}:{2006-11-29}
&#x2026;
</screen>
        <warning>
          <para>Since the timestamp of a revision is stored as an
          unversioned, modifiable property of the revision (see <xref linkend="svn.advanced.props"/>, revision timestamps can be
          changed to represent complete falsifications of true
          chronology, or even removed altogether.  Subversion's
          ability to correctly convert revision dates into real
          revision numbers depends on revision datestamps maintaining
          a sequential ordering&#x2014;the younger the revision, the
          younger its timestamp.  If this ordering isn't maintained,
          you will likely find that trying to use dates to specify
          revision ranges in your repository doesn't always return the
          data you might have expected.</para>
        </warning>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.advanced.props">
      <info>
        <title>Properties</title>
      </info>
      <indexterm>
        <primary>properties</primary>
      </indexterm>
      <para>We've already covered in detail how Subversion stores and
      retrieves various versions of files and directories in its
      repository.  Whole chapters have been devoted to this most
      fundamental piece of functionality provided by the tool.  And
      if the versioning support stopped there, Subversion would still
      be complete from a version control perspective.</para>
      <para>But it doesn't stop there.</para>
      <para>In addition to versioning your directories and files,
      Subversion provides interfaces for adding, modifying, and
      removing versioned metadata on each of your versioned
      directories and files.  We refer to this metadata as
      <firstterm>properties</firstterm>, and they can be thought of as
      two-column tables that map property names to arbitrary values
      attached to each item in your working copy.  Generally speaking,
      the names and values of the properties can be whatever you want
      them to be, with the constraint that the names must be
      human-readable text.  And the best part about these properties
      is that they, too, are versioned, just like the textual contents
      of your files.  You can modify, commit, and revert property
      changes as easily as you can file content changes.  And the
      sending and receiving of property changes occurs as part of your
      typical commit and update operations&#x2014;you don't have to
      change your basic processes to accommodate them.</para>
      <note>
        <para>Subversion has reserved the set of properties whose names
        begin with <literal>svn:</literal> as its own.  While there
        are only a handful of such properties in use today, you should
        avoid creating custom properties for your own needs whose names
        begin with this prefix.  Otherwise, you run the risk that a
        future release of Subversion will grow support for a feature
        or behavior driven by a property of the same name but with
        perhaps an entirely different interpretation.</para>
      </note>
      <para>Properties show up elsewhere in Subversion, too.  Just as
      files and directories may have arbitrary property names and
      values attached to them, each revision as a whole may have
      arbitrary properties attached to it.  The same constraints
      apply&#x2014;human-readable names and anything-you-want binary
      values.  The main difference is that revision properties are not
      versioned.  In other words, if you change the value of, or
      delete, a revision property, there's no way within the scope of
      Subversion's functionality to recover the previous value.</para>
      <para>Subversion has no particular policy regarding the use of
      properties.  It asks only that you not use property names that
      begin with the prefix <literal>svn:</literal>.  That's the
      namespace that it sets aside for its own use.  And Subversion
      does, in fact, use properties, both the versioned and
      unversioned variety.  Certain versioned properties have special
      meaning or effects when found on files and directories, or house
      a particular bit of information about the revisions on which
      they are found.  Certain revision properties are automatically
      attached to revisions by Subversion's commit process, and carry
      information about the revision.  Most of these properties are
      mentioned elsewhere in this or other chapters as part of the
      more general topics to which they are related.  For an
      exhaustive list of Subversion's pre-defined properties, see
      <xref linkend="svn.ref.properties"/>.</para>
      <para>In this section, we will examine the utility&#x2014;both to
      users of Subversion, and to Subversion itself&#x2014;of property
      support.  You'll learn about the property-related
      <command>svn</command> subcommands, and how property
      modifications affect your normal Subversion workflow.</para>
      <!-- =============================================================== -->
      <section xml:id="svn.advanced.props.why">
        <info>
          <title>Why Properties?</title>
        </info>
        <para>Just as Subversion uses properties to store extra
        information about the files, directories, and revisions that
        it contains, you might also find properties to be of similar
        use.  You might find it useful to have a place
        close to your versioned data to hang custom metadata about
        that data.</para>
        <para>Say you wish to design a website that houses many digital
        photos, and displays them with captions and a datestamp.  Now,
        your set of photos is constantly changing, so you'd like to
        have as much of this site automated as possible.  These photos
        can be quite large, so as is common with sites of this nature,
        you want to provide smaller thumbnail images to your site
        visitors.</para>
        <para>Now, you can get this functionality using traditional
        files.  That is, you can have your
        <filename>image123.jpg</filename> and an
        <filename>image123-thumbnail.jpg</filename> side-by-side in a
        directory.  Or if you want to keep the filenames the same, you
        might have your thumbnails in a different directory, like
        <filename>thumbnails/image123.jpg</filename>.  You can also
        store your captions and datestamps in a similar fashion, again
        separated from the original image file.  But the problem here
        is that your collection of files grows in multiples with each
        new photo added to the site.</para>
        <para>Now consider the same website deployed in a way that makes
        use of Subversion's file properties.  Imagine having a single
        image file, <filename>image123.jpg</filename>, and then
        properties set on that file named <literal>caption</literal>,
        <literal>datestamp</literal>, and even
        <literal>thumbnail</literal>.  Now your working copy directory
        looks much more manageable&#x2014;in fact, it looks to the
        casual browser like there are nothing but image files in it.
        But your automation scripts know better.  They know that they
        can use <command>svn</command> (or better yet, they can use
        the Subversion language bindings&#x2014;see <xref linkend="svn.developer.usingapi"/>) to dig out the
        extra information that your site needs to display without
        having to read an index file or play path manipulation
        games.</para>
        <para>Custom revision properties are also frequently used.  One
        common such use is a property whose value contains an issue
        tracker ID with which the revision is associated, perhaps
        because the change made in that revision fixes a bug filed in
        the tracker issue with that ID.  Other uses include hanging
        more friendly names on the revision&#x2014;it might be hard to
        remember that revision 1935 was a fully tested revision.  But
        if there's, say, a <literal>test-results</literal> property on
        that revision with a value <literal>all passing</literal>,
        that's meaningful information to have.</para>
        <sidebar>
          <info>
            <title>Searchability (or, Why <emphasis>Not</emphasis>
          Properties)</title>
          </info>
          <para>For all their utility, Subversion properties&#x2014;or,
          more accurately, the available interfaces to them&#x2014;have
          a major shortcoming:
          while it is a simple matter to <emphasis>set</emphasis> a custom property,
          <emphasis>finding</emphasis> that property later is whole
          different ball of wax.</para>
          <para>Trying to locate a custom revision property generally
          involves performing a linear walk across all the revisions
          of the repository, asking of each revision, "Do you have the
          property I'm looking for?"  Trying to find a custom
          versioned property is painful, too, and often involves a
          recursive <command>svn propget</command> across an entire
          working copy.  In your situation, that might not be as bad
          as a linear walk across all revisions.  But it certainly
          leaves much to be desired in terms of both performance and
          likelihood of success, especially if the scope of your
          search would require a working copy from the root of your
          repository.</para>
          <para>For this reason, you might choose&#x2014;especially in
          the revision property use-case&#x2014;to simply add your
          metadata to the revision's log message, using some
          policy-driven (and perhaps programmatically-enforced)
          formatting that is designed to be quickly parsed from the
          output of <command>svn log</command>.  It is quite common to
          see in Subversion log messages the likes of:</para>
          <programlisting>
Issue(s): IZ2376, IZ1919
Reviewed by:  sally

This fixes a nasty segfault in the wort frabbing process
&#x2026;
</programlisting>
          <para>But here again lies some misfortune.  Subversion doesn't
          yet provide a log message templating mechanism, which would
          go a long way toward helping users be consistent with the
          formatting of their log-embedded revision metadata.</para>
        </sidebar>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.advanced.props.manip">
        <info>
          <title>Manipulating Properties</title>
        </info>
        <para>The <command>svn</command> command affords a few ways to
        add or modify file and directory properties.  For properties
        with short, human-readable values, perhaps the simplest way to
        add a new property is to specify the property name and value
        on the command line of the <command>propset</command>
        subcommand.</para>
        <screen>
$ svn propset copyright '(c) 2006 Red-Bean Software' calc/button.c
property 'copyright' set on 'calc/button.c'
$
</screen>
        <para>But we've been touting the flexibility that Subversion
        offers for your property values.  And if you are planning to
        have a multi-line textual, or even binary, property value, you
        probably do not want to supply that value on the command line.
        So the <command>propset</command> subcommand takes a
        <option>--file (-F)</option> option for specifying the name of
        a file which contains the new property value.</para>
        <screen>
$ svn propset license -F /path/to/LICENSE calc/button.c
property 'license' set on 'calc/button.c'
$
</screen>
        <para>There are some restrictions on the names you can use for
        properties.  A property name must start with a letter, a colon
        (<literal>:</literal>), or an underscore
        (<literal>_</literal>); after that, you can also use digits,
        hyphens (<literal>-</literal>), and periods
        (<literal>.</literal>).
          <footnote><para>If you're familiar with XML, this is pretty much the
            ASCII subset of the syntax for XML "Name".</para></footnote>
      </para>
        <para>In addition to the <command>propset</command> command, the
        <command>svn</command> program supplies the
        <command>propedit</command> command.  This command uses the
        configured editor program (see <xref linkend="svn.advanced.confarea.opts.config"/>) to add or
        modify properties.  When you run the command,
        <command>svn</command> invokes your editor program on a
        temporary file that contains the current value of the property
        (or which is empty, if you are adding a new property).  Then,
        you just modify that value in your editor program until it
        represents the new value you wish to store for the property,
        save the temporary file, and then exit the editor program.  If
        Subversion detects that you've actually changed the existing
        value of the property, it will accept that as the new property
        value.  If you exit your editor without making any changes, no
        property modification will occur:</para>
        <screen>
$ svn propedit copyright calc/button.c  ### exit the editor without changes
No changes to property 'copyright' on 'calc/button.c'
$
</screen>
        <para>We should note that, as with other <command>svn</command>
        subcommands, those related to properties can act on multiple
        paths at once.  This enables you to modify properties on whole
        sets of files with a single command.  For example, we could
        have done:</para>
        <screen>
$ svn propset copyright '(c) 2006 Red-Bean Software' calc/*
property 'copyright' set on 'calc/Makefile'
property 'copyright' set on 'calc/button.c'
property 'copyright' set on 'calc/integer.c'
&#x2026;
$
</screen>
        <para>All of this property adding and editing isn't really very
        useful if you can't easily get the stored property value.  So
        the <command>svn</command> program supplies two subcommands
        for displaying the names and values of properties stored on
        files and directories.  The <command>svn proplist</command>
        command will list the names of properties that exist on a
        path.  Once you know the names of the properties on the node,
        you can request their values individually using <command>svn
        propget</command>.  This command will, given a property name and a path (or set of
        paths), print the value of the property to
        the standard output stream.</para>
        <screen>
$ svn proplist calc/button.c
Properties on 'calc/button.c':
  copyright
  license
$ svn propget copyright calc/button.c
(c) 2006 Red-Bean Software
</screen>
        <para>There's even a variation of the
        <command>proplist</command> command that will list both the
        name and value of all of the properties.  Simply supply the
        <option>--verbose</option> (<option>-v</option>) option.</para>
        <screen>
$ svn proplist -v calc/button.c
Properties on 'calc/button.c':
  copyright : (c) 2006 Red-Bean Software
  license : ================================================================
Copyright (c) 2006 Red-Bean Software.  All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions 
are met:

1. Redistributions of source code must retain the above copyright
notice, this list of conditions, and the recipe for Fitz's famous
red-beans-and-rice.
&#x2026;
</screen>
        <para>The last property-related subcommand is
        <command>propdel</command>.  Since Subversion allows you to
        store properties with empty values, you can't remove a
        property altogether using <command>propedit</command> or
        <command>propset</command>.  For example, this command will
        <emphasis>not</emphasis> yield the desired effect:</para>
        <screen>
$ svn propset license '' calc/button.c
property 'license' set on 'calc/button.c'
$ svn proplist -v calc/button.c
Properties on 'calc/button.c':
  copyright : (c) 2006 Red-Bean Software
  license : 
$
</screen>
        <para>You need to use the <command>propdel</command> subcommand
        to delete properties altogether.  The syntax is similar to the
        other property commands:</para>
        <screen>
$ svn propdel license calc/button.c
property 'license' deleted from 'calc/button.c'.
$ svn proplist -v calc/button.c
Properties on 'calc/button.c':
  copyright : (c) 2006 Red-Bean Software
$
</screen>
        <para>Remember those unversioned revision properties?  You can
        modify those, too, using the same <command>svn</command>
        subcommands that we just described.  Simply add the
        <option>--revprop</option> command-line parameter, and specify
        the revision whose property you wish to modify.  Since
        revisions are global, you don't need to specify a target path
        to these property-related commands so long as you are
        positioned in a working copy of the repository whose
        revision property you wish to modify.  Otherwise, you can
        simply provide the URL of any path in the repository of
        interest (including the repository's root URL).  For example,
        you might want to replace the commit log message of an
        existing revision.
        <footnote><para>Fixing spelling errors, grammatical gotchas, and
            <quote>just-plain-wrongness</quote> in commit log
            messages is perhaps the most common use case for the
            <option>--revprop</option> option.</para></footnote>
        If your current working directory is part of a working copy of
        your repository, you can simply run the
        <command>svn propset</command> command with no target path:</para>
        <screen>
$ svn propset svn:log '* button.c: Fix a compiler warning.' -r11 --revprop
property 'svn:log' set on repository revision '11'
$
</screen>
        <para>But even if you haven't checked out a working copy from
        that repository, you can still affect the property change by
        providing the repository's root URL:</para>
        <screen>
$ svn propset svn:log '* button.c: Fix a compiler warning.' -r11 --revprop \
              http://svn.example.com/repos/project
property 'svn:log' set on repository revision '11'
$
</screen>
        <para>Note that the ability to modify these unversioned
        properties must be explicitly added by the repository
        administrator (see <xref linkend="svn.reposadmin.maint.setlog"/>).
        That's because the properties aren't versioned, so you run the risk of
        losing information if you aren't careful with your edits.
        The repository administrator can set up methods to protect
        against this loss, and by default, modification of
        unversioned properties is disabled.</para>
        <tip>
          <para>Users should, where possible, use <command>svn
          propedit</command> instead of <command>svn
          propset</command>.  While the end result of the commands is
          identical, the former will allow them to see the current
          value of the property they are about to change, which helps
          them to verify that they are, in fact, making the change
          they think they are making.  This is especially true when
          modifying unversioned revision properties.  Also, it is
          significantly easier to modify multiline property values in
          a text editor than at the command line.</para>
        </tip>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.advanced.props.workflow">
        <info>
          <title>Properties and the Subversion Workflow</title>
        </info>
        <para>Now that you are familiar with all of the
        property-related <command>svn</command> subcommands, let's see
        how property modifications affect the usual Subversion
        workflow.  As we mentioned earlier, file and directory
        properties are versioned, just like your file contents.  As a
        result, Subversion provides the same opportunities for
        merging&#x2014;cleanly or with conflicts&#x2014;someone
        else's modifications into your own.</para>
        <para>And as with file contents, your property changes are local
        modifications, only made permanent when you commit them to the
        repository with <command>svn commit</command>.  Your property
        changes can be easily unmade, too&#x2014;the <command>svn
        revert</command> command will restore your files and
        directories to their un-edited states&#x2014;contents, properties,
        and all.  Also, you can receive interesting information about
        the state of your file and directory properties by using the
        <command>svn status</command> and <command>svn diff</command>
        commands.</para>
        <screen>
$ svn status calc/button.c
 M     calc/button.c
$ svn diff calc/button.c
Property changes on: calc/button.c
___________________________________________________________________
Name: copyright
   + (c) 2006 Red-Bean Software

$
</screen>
        <para>Notice how the <command>status</command> subcommand
        displays <literal>M</literal> in the second column instead of
        the first.  That is because we have modified the properties on
        <filename>calc/button.c</filename>, but not its
        textual contents.  Had we changed both, we would have seen
        <literal>M</literal> in the first column, too (see <xref linkend="svn.tour.cycle.examine.status"/>).</para>
        <sidebar>
          <info>
            <title>Property Conflicts</title>
          </info>
          <para>As with file contents, local property modifications can
          conflict with changes committed by someone else.  If you
          update your working copy directory and receive property
          changes on a versioned object that clash with your own,
          Subversion will report that the object is in a conflicted
          state.</para>
          <screen>
% svn update calc
M  calc/Makefile.in
 C calc/button.c
Updated to revision 143.
$ 
</screen>
          <para>Subversion will also create, in the same directory as
          the conflicted object, a file with a
          <filename>.prej</filename> extension which contains the
          details of the conflict.  You should examine the contents of
          this file so you can decide how to resolve the conflict.
          Until the conflict is resolved, you will see a
          <literal>C</literal> in the second column of <command>svn
          status</command> output for that object, and attempts to
          commit your local modifications will fail.</para>
          <screen>
$ svn status calc
 C     calc/button.c
?      calc/button.c.prej
$ cat calc/button.c.prej 
prop 'linecount': user set to '1256', but update set to '1301'.
$
</screen>
          <para>To resolve property conflicts, simply ensure that the
          conflicting properties contain the values that they should,
          and then use the <command>svn resolved</command> command to
          alert Subversion that you have manually resolved the
          problem.</para>
        </sidebar>
        <para>You might also have noticed the non-standard way that
        Subversion currently displays property differences.  You can
        still run <command>svn diff</command> and redirect the output
        to create a usable patch file.  The <command>patch</command>
        program will ignore property patches&#x2014;as a rule, it
        ignores any noise it can't understand.  This does,
        unfortunately, mean that to fully apply a patch generated by
        <command>svn diff</command>, any property modifications will
        need to be applied by hand.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.advanced.props.auto">
        <info>
          <title>Automatic Property Setting</title>
        </info>
        <para>Properties are a powerful feature of Subversion, acting as
        key components of many Subversion features discussed elsewhere
        in this and other chapters&#x2014;textual diff and merge
        support, keyword substitution, newline translation, etc.  But
        to get the full benefit of properties, they must be set on the
        right files and directories.  Unfortunately, that
        step can be easily forgotten in the routine of things, especially
        since failing to set a property doesn't usually result in an
        obvious error (at least compared to, say, failing to
        add a file to version control).  To help your properties get
        applied to the places that need them, Subversion provides a
        couple of simple but useful features.</para>
        <para>Whenever you introduce a file to version control using the
        <command>svn add</command> or <command>svn import</command>
        commands, Subversion tries to assist by setting some common
        file properties automatically.  First, on operating systems
        whose filesystems support an execute permission bit,
        Subversion will automatically set the
        <literal>svn:executable</literal> property on newly added or
        imported files whose execute bit is enabled.  (See <xref linkend="svn.advanced.props.special.executable"/> for more
        about this property.)  Secondly, it runs a very basic
        heuristic to determine if that file contains human-readable
        content.  If not, Subversion will automatically set the
        <literal>svn:mime-type</literal> property on that file to
        <literal>application/octet-stream</literal> (the generic
        <quote>this is a collection of bytes</quote> MIME type).  Of
        course, if Subversion guesses incorrectly, or if you wish to
        set the <literal>svn:mime-type</literal> property to something
        more precise&#x2014;perhaps <literal>image/png</literal> or
        <literal>application/x-shockwave-flash</literal>&#x2014;you can
        always remove or edit that property.  (For more on
        Subversion's use of MIME types, see <xref linkend="svn.advanced.props.special.mime-type"/>.)</para>
        <para>Subversion also provides, via its runtime configuration
        system (see <xref linkend="svn.advanced.confarea"/>), a more
        flexible automatic property setting feature which allows you
        to create mappings of filename patterns to property names and
        values.  Once again, these mappings affect adds and imports,
        and can not only override the default MIME type decision made
        by Subversion during those operations, but can also set
        additional Subversion or custom properties, too.  For example,
        you might create a mapping that says that any time you add
        JPEG files&#x2014;ones whose names match the pattern
        <literal>*.jpg</literal>&#x2014;Subversion should automatically
        set the <literal>svn:mime-type</literal> property on those
        files to <literal>image/jpeg</literal>.  Or perhaps any files
        that match <literal>*.cpp</literal> should have
        <literal>svn:eol-style</literal> set to
        <literal>native</literal>, and <literal>svn:keywords</literal>
        set to <literal>Id</literal>.  Automatic property support is
        perhaps the handiest property-related tool in the Subversion
        toolbox.  See <xref linkend="svn.advanced.confarea.opts.config"/> for more about
        configuring that support.</para>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.advanced.props.file-portability">
      <info>
        <title>File Portability</title>
      </info>
      <para>Fortunately for Subversion users who routinely find
      themselves on different computers with different operating
      systems, Subversion's command-line program behaves almost
      identically on all those systems.  If you know how to wield
      <command>svn</command> on one platform, you know how to wield it
      everywhere.</para>
      <para>However, the same is not always true of other general classes
      of software, or of the actual files you keep in Subversion.  For
      example, on a Windows machine, the definition of a <quote>text
      file</quote> would be similar to that used on a Linux box, but
      with a key difference&#x2014;the character sequences used to mark
      the ends of the lines of those files.  There are other
      differences, too.  Unix platforms have (and Subversion supports)
      symbolic links; Windows does not.  Unix platforms use filesystem
      permission to determine executability; Windows uses filename
      extensions.</para>
      <para>Because Subversion is in no position to unite the whole
      world in common definitions and implementations of all of these
      things, the best it can do is to try to help make your life
      simpler when you need to work with your versioned files and
      directories on multiple computers and operating systems.  This
      section describes some of the ways Subversion does this.</para>
      <!-- =============================================================== -->
      <section xml:id="svn.advanced.props.special.mime-type">
        <info>
          <title>File Content Type</title>
        </info>
        <para>Subversion joins the ranks of the many applications which
        recognize and make use of Multipurpose Internet Mail
        Extensions (MIME) content types.  Besides being a
        general-purpose storage location for a file's content type,
        the value of the <literal>svn:mime-type</literal> file
        property determines some behavioral characteristics of
        Subversion itself.</para>
        <sidebar>
          <info>
            <title>Identifying File Types</title>
          </info>
          <para>Various programs on most modern operating systems make
          assumptions about the type and format of the contents of a
          file by the file's name, specifically its file extension.
          For example, files whose names end in
          <filename>.txt</filename> are generally assumed to be
          human-readable, able to be understood by simple perusal
          rather than requiring complex processing to decipher.  Files
          whose names end in <filename>.png</filename>, on the other
          hand, are assumed to be of the Portable Network Graphics
          type&#x2014;not human-readable at all, and sensible only when
          interpreted by software which understands the PNG format and
          can render the information in that format as a raster
          image.</para>
          <para>Unfortunately, some of those extensions have changed
          their meanings over time.  When personal computers first appeared,
          a file named <filename>README.DOC</filename> would have
          almost certainly been a plaintext file, just like today's
          <filename>.txt</filename> files.  But by the mid-1990's, you
          could almost bet that a file of that name would not be a
          plaintext file at all, but instead a Microsoft Word document
          in a proprietary, non-human-readable format.  But this
          change didn't occur overnight&#x2014;there was certainly a
          period of confusion for computer users over what exactly
          they had in hand when they saw a <filename>.DOC</filename>
          file.
          <footnote><para>You think that was rough?  During that same era,
              WordPerfect also used <filename>.DOC</filename> for their
              proprietary file format's preferred extension!</para></footnote>
        </para>
          <para>The popularity of computer networking cast still more
          doubt on the mapping between a file's name and its content.
          With information being served across networks and generated
          dynamically by server-side scripts, there was often no real
          file per se, and therefore no file name.  Web
          servers, for example, needed some other way to tell browsers
          what they were downloading so the browser could do something
          intelligent with that information, whether that was to
          display the data using a program registered to handle that
          data type, or to prompt the user for where on the client
          machine to store the downloaded data.</para>
          <para>Eventually, a standard emerged for, among other things,
          describing the contents of a data stream.  In 1996, RFC2045
          was published, the first of five RFCs describing MIME.  It
          describes the concept of media types and subtypes, and
          recommends a syntax for the representation of those types.
          Today, MIME media types&#x2014;or <quote>MIME
          types</quote>&#x2014;are used almost universally across
          e-mail applications, Web servers, and other software as the
          de facto mechanism for clearing up the file content
          confusion.</para>
        </sidebar>
        <para>For example, one of the benefits that Subversion typically
        provides is contextual, line-based merging of changes received
        from the server during an update into your working file.  But
        for files containing non-textual data, there is often no
        concept of a <quote>line</quote>.  So, for versioned files
        whose <literal>svn:mime-type</literal> property is set to a
        non-textual MIME type (generally, something that doesn't begin
        with <literal>text/</literal>, though there are exceptions),
        Subversion does not attempt to perform contextual merges
        during updates.  Instead, any time you have locally modified a
        binary working copy file that is also being updated, your file
        is left untouched and Subversion creates two new files.  One
        file has a <filename>.oldrev</filename> extension and contains
        the BASE revision of the file.  The other file has a
        <filename>.newrev</filename> extension and contains the
        contents of the updated revision of the file.  This behavior
        is really for the protection of the user against failed
        attempts at performing contextual merges on files that simply
        cannot be contextually merged.</para>
        <para>Also, if the <literal>svn:mime-type</literal> property is
        set, then the Subversion Apache module will use its value to
        populate the <literal>Content-type:</literal> HTTP header when
        responding to GET requests.  This gives your web browser a
        crucial clue about how to display a file when you use it to
        peruse your Subversion repository's contents.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.advanced.props.special.executable">
        <info>
          <title>File Executability</title>
        </info>
        <para>On many operating systems, the ability to execute a file
        as a command is governed by the presence of an execute
        permission bit.  This bit usually defaults to being disabled,
        and must be explicitly enabled by the user for each file that
        needs it.  But it would be a monumental hassle to have to
        remember exactly which files in freshly checked-out working
        copy were supposed to have their executable bits toggled on,
        and then to have to do that toggling.  So, Subversion provides
        the <literal>svn:executable</literal> property as a way to
        specify that the executable bit for the file on which that
        property is set should be enabled, and Subversion honors that
        request when populating working copies with such files.</para>
        <para>This property has no effect on filesystems that have no
        concept of an executable permission bit, such as FAT32 and
        NTFS.
        <footnote><para>The Windows filesystems use file extensions (such as
            <literal>.EXE</literal>, <literal>.BAT</literal>, and
            <literal>.COM</literal>) to denote executable
            files.</para></footnote>
        Also, although it has no defined values, Subversion will force
        its value to <literal>*</literal> when setting this property.
        Finally, this property is valid only on files, not on
        directories.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.advanced.props.special.eol-style">
        <info>
          <title>End-of-Line Character Sequences</title>
        </info>
        <para>Unless otherwise noted using a versioned file's
        <literal>svn:mime-type</literal> property, Subversion
        assumes the file contains human-readable data.  Generally
        speaking, Subversion only uses this knowledge to determine
        if contextual difference reports for that file are
        possible.  Otherwise, to Subversion, bytes are bytes.</para>
        <para>This means that by default, Subversion doesn't pay any
        attention to the type of <firstterm>end-of-line (EOL)
        markers</firstterm> used in your files.  Unfortunately,
        different operating systems have different conventions about
        which character sequences represent the end of a line of text
        in a file.  For example, the usual line ending token used by
        software on the Windows platform is a pair of ASCII control
        characters&#x2014;a carriage return (<literal>CR</literal>)
        followed by a line feed (<literal>LF</literal>).  Unix
        software, however, just uses the <literal>LF</literal>
        character to denote the end of a line.</para>
        <para>Not all of the various tools on these operating systems
        understand files that contain line endings
        in a format that differs from the <firstterm>native line
        ending style</firstterm> of the operating system on which
        they are running.  So, typically, Unix programs
        treat the <literal>CR</literal> character present in Windows
        files as a regular character (usually rendered as
        <literal>^M</literal>), and Windows programs combine
        all of the lines of a Unix file into one giant line because
        no carriage return-linefeed (or <literal>CRLF</literal>)
        character combination was found to denote the ends of
        the lines.</para>
        <para>This sensitivity to foreign EOL markers can be
        frustrating for folks who share a file across different
        operating systems.  For example, consider a source code
        file, and developers that edit this file on both Windows and
        Unix systems.  If all the developers always use tools which
        preserve the line ending style of the file, no problems
        occur.</para>
        <para>But in practice, many common tools either fail to
        properly read a file with foreign EOL markers, or they
        convert the file's line endings to the native style when the
        file is saved.  If the former is true for a developer, he
        has to use an external conversion utility (such as
        <command>dos2unix</command> or its companion,
        <command>unix2dos</command>) to prepare the file for
        editing.  The latter case requires no extra preparation.
        But both cases result in a file that differs from the
        original quite literally on every line!  Prior to committing
        his changes, the user has two choices.  Either he can use a
        conversion utility to restore the modified file to the same
        line ending style that it was in before his edits were made.
        Or, he can simply commit the file&#x2014;new EOL markers and
        all.</para>
        <para>The result of scenarios like these include wasted time
        and unnecessary modifications to committed files.  Wasted
        time is painful enough.  But when commits change every line
        in a file, this complicates the job of determining which of
        those lines were changed in a non-trivial way.  Where was
        that bug really fixed?  On what line was a syntax error
        introduced?</para>
        <para>The solution to this problem is the
        <literal>svn:eol-style</literal> property.  When this
        property is set to a valid value, Subversion uses it to
        determine what special processing to perform on the file so
        that the file's line ending style isn't flip-flopping with
        every commit that comes from a different operating
        system.  The valid values are:</para>
        <variablelist>
          <varlistentry>
            <term>
              <literal>native</literal>
            </term>
            <listitem>
              <para>This causes the file to contain the EOL markers
              that are native to the operating system on which
              Subversion was run.  In other words, if a user on a
              Windows machine checks out a working copy that
              contains a file with an
              <literal>svn:eol-style</literal> property set to
              <literal>native</literal>, that file will contain
              <literal>CRLF</literal> EOL markers.  A Unix user
              checking out a working copy which contains the same
              file will see <literal>LF</literal> EOL markers in his
              copy of the file.</para>
              <para>Note that Subversion will actually store the file
              in the repository using normalized
              <literal>LF</literal> EOL markers regardless of the
              operating system.  This is basically transparent to
              the user, though.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>CRLF</literal>
            </term>
            <listitem>
              <para>This causes the file to contain
              <literal>CRLF</literal> sequences for EOL markers,
              regardless of the operating system in use.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>LF</literal>
            </term>
            <listitem>
              <para>This causes the file to contain
              <literal>LF</literal> characters for EOL markers,
              regardless of the operating system in use.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>CR</literal>
            </term>
            <listitem>
              <para>This causes the file to contain
              <literal>CR</literal> characters for EOL markers,
              regardless of the operating system in use.  This line
              ending style is not very common.  It was used on older
              Macintosh platforms (on which Subversion doesn't even
              run).</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.advanced.props.special.ignore">
      <info>
        <title>Ignoring Unversioned Items</title>
      </info>
      <para>In any given working copy there is a good chance that
      alongside all those versioned files and directories are other
      files and directories which are neither versioned nor intended
      to be.  Text editors litter directories with backup files.
      Software compilers generate intermediate&#x2014;or even
      final&#x2014;files which you typically wouldn't bother to
      version.  And users themselves drop various other files and
      directories wherever they see fit, often in version control
      working copies.</para>
      <para>It's ludicrous to expect Subversion working copies to be
      somehow impervious to this kind of clutter and impurity.  In
      fact, Subversion counts it as a <emphasis>feature</emphasis>
      that its working copies are just typical directories, just like
      unversioned trees.  But these not-to-be-versioned files and
      directories can cause some annoyance for Subversion users.  For
      example, because the <command>svn add</command> and <command>svn
      import</command> commands act recursively by default, and don't
      know which files in a given tree you do and don't wish to
      version, it's easy to accidentally add stuff to version control
      that you didn't mean to.  And because <command>svn
      status</command> reports, by default, every item of interest in
      a working copy&#x2014;including unversioned files and
      directories&#x2014;its output can get quite noisy where many of
      these things exist.</para>
      <para>So Subversion provides two ways for telling it which
      files you would prefer that it simply disregard.  One of the
      ways involves the use of Subversion's runtime configuration
      system (see <xref linkend="svn.advanced.confarea"/>), and
      therefore applies to all the Subversion operations which make
      use of that runtime configuration, generally those performed on
      a particular computer, or by a particular user of a computer.
      The other way makes use of Subversion's directory property
      support, is more tightly bound to the versioned tree itself, and
      therefore affects everyone who has a working copy of that tree.
      Both of the mechanisms use file patterns.</para>
      <para>The Subversion runtime configuration system provides an
      option, <literal>global-ignores</literal>, whose value is a
      whitespace-delimited collection of file patterns (also known as
      <firstterm>globs</firstterm>).  The Subversion client checks
      these patterns against the names of the files which are
      candidates for addition to version control, as well as to
      unversioned files which the <command>svn status</command>
      command notices.  If any file's name matches one of the
      patterns, Subversion will basically act as if the file didn't
      exist at all.  This is really useful for the kinds of files that
      you almost never want to version, such as editor backup files
      like Emacs' <literal>*~</literal> and <literal>.*~</literal>
      files.</para>
      <para>When found on a versioned directory, the
      <literal>svn:ignore</literal> property is expected to contain a
      list of newline-delimited file patterns which Subversion should
      use to determine ignorable objects in that same directory.
      These patterns do not override those found in the
      <literal>global-ignores</literal> runtime configuration option,
      but are instead appended to that list.  And it's worth noting
      again that, unlike the <literal>global-ignores</literal> option,
      the patterns found in the <literal>svn:ignore</literal>
      property apply only to the directory on which that property is
      set, and not to any of its subdirectories.  The
      <literal>svn:ignore</literal> property is a good way to tell
      Subversion to ignore files that are likely to be present in
      every user's working copy of that directory, such as compiler
      output or&#x2014;to use an example more appropriate to this
      book&#x2014;the HTML, PDF, or PostScript files generated as the
      result of a conversion of some source DocBook XML files to a
      more legible output format.</para>
      <note>
        <para>Subversion's support for ignorable file patterns extends
        only to the one-time process of adding unversioned
        files and directories to version control.  Once an object is
        under Subversion's control, the ignore pattern mechanisms no
        longer apply to it.  In other words, don't expect Subversion
        to avoid committing changes you've made to a versioned file
        simply because that file's name matches an ignore
        pattern&#x2014;Subversion <emphasis>always</emphasis> notices
        all of its versioned objects.</para>
      </note>
      <sidebar>
        <info>
          <title>Ignore Patterns for CVS Users</title>
        </info>
        <para>The Subversion <literal>svn:ignore</literal> property is
        very similar in syntax and function to the CVS
        <filename>.cvsignore</filename> file.  In fact, if you are
        migrating a CVS working copy to Subversion, you can directly
        migrate the ignore patterns by using the
        <filename>.cvsignore</filename> file as input file to the
        <command>svn propset</command> command:</para>
        <screen>
$ svn propset svn:ignore -F .cvsignore .
property 'svn:ignore' set on '.'
$
</screen>
        <para>There are, however, some differences in the ways that CVS
        and Subversion handle ignore patterns.  The two systems use
        the ignore patterns at some different times, and there are
        slight discrepancies in what the ignore patterns apply to.
        Also, Subversion does not recognize the use of the
        <literal>!</literal> pattern as a reset back to having no
        ignore patterns at all.</para>
      </sidebar>
      <para>The global list of ignore patterns tends to be more a
      matter of personal taste, and tied more closely to a user's
      particular tool chain than to the details of any particular
      working copy's needs.  So, the rest of this section will focus
      on the <literal>svn:ignore</literal> property and its
      uses.</para>
      <para>Say you have the following output from <command>svn
      status</command>:</para>
      <screen>
$ svn status calc
 M     calc/button.c
?      calc/calculator
?      calc/data.c
?      calc/debug_log
?      calc/debug_log.1
?      calc/debug_log.2.gz
?      calc/debug_log.3.gz
</screen>
      <para>In this example, you have made some property modifications
      to <filename>button.c</filename>, but in your working copy you
      also have some unversioned files: the latest
      <filename>calculator</filename> program that you've compiled
      from your source code, a source file named
      <filename>data.c</filename>, and a set of debugging output log
      files.  Now, you know that your build system always results in
      the <filename>calculator</filename> program being generated.
      <footnote><para>Isn't that the whole point of a build system?</para></footnote>
      And you know that your test suite always leaves those debugging
      log files lying around.  These facts are true for all working
      copies of this project, not just your own.  And you know that
      you aren't interested in seeing those things every time you run
      <command>svn status</command>, and pretty sure that nobody else
      is interested in them either.  So you use <command>svn propedit
      svn:ignore calc</command> to add some ignore patterns to the
      <filename>calc</filename> directory.  For example, you might add
      this as the new value of the <literal>svn:ignore</literal>
      property:</para>
      <programlisting>
calculator
debug_log*
</programlisting>
      <para>After you've added this property, you will now have a local
      property modification on the <filename>calc</filename>
      directory.  But notice what else is different about your
      <command>svn status</command> output:</para>
      <screen>
$ svn status
 M     calc
 M     calc/button.c
?      calc/data.c
</screen>
      <para>Now, all that cruft is missing from the output!  Of course,
      your <filename>calculator</filename> compiled program and all
      those logfiles are still in your working copy.  Subversion is
      simply not reminding you that they are present and unversioned.
      And now with all the uninteresting noise removed from the
      display, you are left with more interesting items&#x2014;such as
      that source code file <filename>data.c</filename> that you
      probably forgot to add to version control.</para>
      <para>Of course, this less-verbose report of your working copy
      status isn't the only one available.  If you actually want to
      see the ignored files as part of the status report, you can pass
      the <option>--no-ignore</option> option to Subversion:</para>
      <screen>
$ svn status --no-ignore
 M     calc
 M     calc/button.c
I      calc/calculator
?      calc/data.c
I      calc/debug_log
I      calc/debug_log.1
I      calc/debug_log.2.gz
I      calc/debug_log.3.gz
</screen>
      <para>As mentioned earlier, the list of file patterns to ignore is
      also used by <command>svn add</command> and <command>svn
      import</command>.  Both of these operations involve asking
      Subversion to begin managing some set of files and directories.
      Rather than force the user to pick and choose which files in a
      tree she wishes to start versioning, Subversion uses the ignore
      patterns&#x2014;both the global and the per-directory
      lists&#x2014;to determine which files should not be swept into
      the version control system as part of a larger recursive
      addition or import operation.  And here again, you can use the
      <option>--no-ignore</option> option to tell Subversion ignore
      its ignores list and operate on all the files and directories
      present.</para>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.advanced.props.special.keywords">
      <info>
        <title>Keyword Substitution</title>
      </info>
      <para>Subversion has the ability to substitute
      <firstterm>keywords</firstterm>&#x2014;pieces of useful,
      dynamic information about a versioned file&#x2014;into the
      contents of the file itself.  Keywords generally provide
      information about the last modification made to the file.
      Because this information changes each time the
      file changes, and more importantly, just
      <emphasis>after</emphasis> the file changes, it is a hassle
      for any process except the version control system to keep
      the data completely up-to-date.  Left to human authors, the
      information would inevitably grow stale.</para>
      <para>For example, say you have a document in which you would
      like to display the last date on which it was modified.  You
      could burden every author of that document to, just before
      committing their changes, also tweak the part of the
      document that describes when it was last changed.  But
      sooner or later, someone would forget to do that.  Instead,
      simply ask Subversion to perform keyword substitution on the
      <literal>LastChangedDate</literal> keyword.  You control
      where the keyword is inserted into your document by placing
      a <firstterm>keyword anchor</firstterm> at the desired
      location in the file.  This anchor is just a string of text
      formatted as
      <literal>$</literal><replaceable>KeywordName</replaceable><literal>$</literal>.</para>
      <para>All keywords are case-sensitive where they appear as
      anchors in files: you must use the correct capitalization in
      order for the keyword to be expanded.  You should consider the
      value of the <literal>svn:keywords</literal> property to be
      case-sensitive too&#x2014;certain keyword names will be recognized
      regardless of case, but this behavior is deprecated.</para>
      <para>Subversion defines the list of keywords available for
      substitution.  That list contains the following five keywords, 
      some of which have aliases that you can also use:</para>
      <variablelist>
        <varlistentry>
          <term>
            <literal>Date</literal>
          </term>
          <listitem>
            <para>This keyword describes the last time the file was
            known to have been changed in the repository, and
            is of the form <literal>$Date:
            2006-07-22 21:42:37 -0700 (Sat, 22 Jul 2006)
            $</literal>.  It may also be specified as
            <literal>LastChangedDate</literal>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>Revision</literal>
          </term>
          <listitem>
            <para>This keyword describes the last known revision in
            which this file changed in the repository, and looks
            something like <literal>$Revision: 144 $</literal>.  
            It may also be specified as
            <literal>LastChangedRevision</literal> or
            <literal>Rev</literal>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>Author</literal>
          </term>
          <listitem>
            <para>This keyword describes the last known user to
            change this file in the repository, and looks
            something like <literal>$Author: harry $</literal>.  
            It may also be specified as 
            <literal>LastChangedBy</literal>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>HeadURL</literal>
          </term>
          <listitem>
            <para>This keyword describes the full URL to the latest
            version of the file in the repository, and looks
            something like <literal>$HeadURL:
            http://svn.collab.net/repos/trunk/README $</literal>.
            It may be abbreviated as
            <literal>URL</literal>.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <literal>Id</literal>
          </term>
          <listitem>
            <para>This keyword is a compressed combination of the
            other keywords.  Its substitution looks something like
            <literal>$Id: calc.c 148 2006-07-28 21:30:43Z sally
            $</literal>, and is interpreted to mean that the file
            <filename>calc.c</filename> was last changed in revision
            148 on the evening of July 28, 2006 by the user
            <literal>sally</literal>.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>Several of the previous descriptions use the phrase
      <quote>last known</quote> or similar wording.  Keep in mind that
      keyword expansion is a client-side operation, and your client
      only <quote>knows</quote> about changes which have occurred in
      the repository when you update your working copy to include
      those changes.  If you never update your working copy, your
      keywords will never expand to different values even if those
      versioned files are being changed regularly in the
      repository.</para>
      <para>Simply adding keyword anchor text to your file does
      nothing special.  Subversion will never attempt to perform
      textual substitutions on your file contents unless
      explicitly asked to do so.  After all, you might be writing
      a document
      <footnote><para>&#x2026; or maybe even a section of a book &#x2026;</para></footnote> 
      about how to use keywords, and you don't want Subversion to
      substitute your beautiful examples of un-substituted keyword
      anchors!</para>
      <para>To tell Subversion whether or not to substitute keywords
      on a particular file, we again turn to the property-related
      subcommands.  The <literal>svn:keywords</literal> property,
      when set on a versioned file, controls which keywords will
      be substituted on that file.  The value is a space-delimited
      list of the keyword names or aliases found in the previous
      table.</para>
      <para>For example, say you have a versioned file named
      <filename>weather.txt</filename> that looks like
      this:</para>
      <programlisting>
Here is the latest report from the front lines.
$LastChangedDate$
$Rev$
Cumulus clouds are appearing more frequently as summer approaches.
</programlisting>
      <para>With no <literal>svn:keywords</literal> property set on
      that file, Subversion will do nothing special.  Now, let's
      enable substitution of the
      <literal>LastChangedDate</literal> keyword.</para>
      <screen>
$ svn propset svn:keywords "Date Author" weather.txt
property 'svn:keywords' set on 'weather.txt'
$
</screen>
      <para>Now you have made a local property modification on the
      <filename>weather.txt</filename> file.  You will see no
      changes to the file's contents (unless you made some of your
      own prior to setting the property).  Notice that the file
      contained a keyword anchor for the <literal>Rev</literal>
      keyword, yet we did not include that keyword in the property
      value we set.  Subversion will happily ignore requests to
      substitute keywords that are not present in the file, and
      will not substitute keywords that are not present in the
      <literal>svn:keywords</literal> property value.</para>
      <para>Immediately after you commit this property change,
      Subversion will update your working file with the new
      substitute text.  Instead of seeing your keyword anchor
      <literal>$LastChangedDate$</literal>, you'll see its
      substituted result.  That result also contains the name of
      the keyword, and continues to be bounded by the dollar sign
      (<literal>$</literal>) characters.  And as we predicted, the
      <literal>Rev</literal> keyword was not substituted because
      we didn't ask for it to be.</para>
      <para>Note also that we set the <literal>svn:keywords</literal>
      property to <quote>Date Author</quote> yet the keyword
      anchor used the alias <literal>$LastChangedDate$</literal>
      and still expanded correctly.</para>
      <screen>
Here is the latest report from the front lines.
$LastChangedDate: 2006-07-22 21:42:37 -0700 (Sat, 22 Jul 2006) $
$Rev$
Cumulus clouds are appearing more frequently as summer approaches.
</screen>
      <para>If someone else now commits a change to
      <filename>weather.txt</filename>, your copy of that file
      will continue to display the same substituted keyword value
      as before&#x2014;until you update your working copy.  At that
      time the keywords in your <filename>weather.txt</filename>
      file will be re-substituted with information that
      reflects the most recent known commit to that file.</para>
      <sidebar>
        <info>
          <title>Where's $GlobalRev$?</title>
        </info>
        <para>New users are often confused by how the
        <literal>$Rev$</literal> keyword works.  Since the repository
        has a single, globally increasing revision number, many people
        assume that it is this number which is reflected by the
        <literal>$Rev$</literal> keyword's value.  But
        <literal>$Rev$</literal> expands to show the last revision in
        which the file <emphasis>changed</emphasis>, not the last
        revision to which it was updated.  Understanding this clears
        the confusion, but frustration often remains&#x2014;without the
        support of a Subversion keyword to do so, how can you
        automatically get the global revision number into your
        files?</para>
        <para>To do this, you need external processing.  Subversion
        ships with a tool called <command>svnversion</command> which
        was designed for just this purpose.
        <command>svnversion</command> crawls your working copy and
        generates as output the revision(s) it finds.  You can use
        this program, plus some additional tooling, to embed that
        revision information into your files.  For more information on
        <command>svnversion</command>, see <xref linkend="svn.ref.svnversion"/>.</para>
      </sidebar>
      <para>Subversion 1.2 introduced a new variant of the keyword
      syntax which brought additional, useful&#x2014;though perhaps
      atypical&#x2014;functionality.  You can now tell Subversion
      to maintain a fixed length (in terms of the number of bytes
      consumed) for the substituted keyword.  By using a
      double-colon (<literal>::</literal>) after the keyword name,
      followed by a number of space characters, you define that
      fixed width.  When Subversion goes to substitute your
      keyword for the keyword and its value, it will essentially
      replace only those space characters, leaving the overall
      width of the keyword field unchanged.  If the substituted
      value is shorter than the defined field width, there will be
      extra padding characters (spaces) at the end of the
      substituted field; if it is too long, it is truncated with a
      special hash (<literal>#</literal>) character just before
      the final dollar sign terminator.</para>
      <para>For example, say you have a document in which you have
      some section of tabular data reflecting the document's
      Subversion keywords.  Using the original Subversion keyword
      substitution syntax, your file might look something
      like:</para>
      <screen>
$Rev$:     Revision of last commit
$Author$:  Author of last commit
$Date$:    Date of last commit
</screen>
      <para>Now, that looks nice and tabular at the start of things.
      But when you then commit that file (with keyword substitution
      enabled, of course), you see:</para>
      <screen>
$Rev: 12 $:     Revision of last commit
$Author: harry $:  Author of last commit
$Date: 2006-03-15 02:33:03 -0500 (Wed, 15 Mar 2006) $:    Date of last commit
</screen>
      <para>The result is not so beautiful.  And you might be
      tempted to then adjust the file after the substitution so
      that it again looks tabular.  But that only holds as long as
      the keyword values are the same width.  If the last
      committed revision rolls into a new place value (say, from
      99 to 100), or if another person with a longer username
      commits the file, stuff gets all crooked again.  However, if
      you are using Subversion 1.2 or better, you can use the new
      fixed-length keyword syntax, define some field widths that
      seem sane, and now your file might look like this:</para>
      <screen>
$Rev::               $:  Revision of last commit
$Author::            $:  Author of last commit
$Date::              $:  Date of last commit
</screen>
      <para>You commit this change to your file.  This time,
      Subversion notices the new fixed-length keyword syntax, and
      maintains the width of the fields as defined by the padding
      you placed between the double-colon and the trailing dollar
      sign.  After substitution, the width of the fields is
      completely unchanged&#x2014;the short values for
      <literal>Rev</literal> and <literal>Author</literal> are
      padded with spaces, and the long <literal>Date</literal>
      field is truncated by a hash character:</para>
      <screen>
$Rev:: 13            $:  Revision of last commit
$Author:: harry      $:  Author of last commit
$Date:: 2006-03-15 0#$:  Date of last commit
</screen>
      <para>The use of fixed-length keywords is especially handy
      when performing substitutions into complex file formats that
      themselves use fixed-length fields for data, or for which
      the stored size of a given data field is overbearingly
      difficult to modify from outside the format's native
      application (such as for Microsoft Office documents).</para>
      <warning>
        <para>Be aware that because the width of a keyword field is
        measured in bytes, the potential for corruption of
        multi-byte values exists.  For example, a username which
        contains some multi-byte UTF-8 characters might suffer
        truncation in the middle of the string of bytes which make
        up one of those characters.  The result will be a mere
        truncation when viewed at the byte level, but will likely
        appear as a string with an incorrect or garbled final
        character when viewed as UTF-8 text.  It is conceivable
        that certain applications, when asked to load the file,
        would notice the broken UTF-8 text and deem the entire
        file corrupt, refusing to operate on the file
        altogether.  So, when limiting keywords to a fixed size,
        choose a size that allows for this type of byte-wise
        expansion.</para>
      </warning>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.advanced.locking">
      <info>
        <title>Locking</title>
      </info>
      <para>Subversion's copy-modify-merge version control model lives
      and dies on its data merging algorithms, specifically on how
      well those algorithms perform when trying to resolve conflicts
      caused by multiple users modifying the same file concurrently.
      Subversion itself provides only one such algorithm, a three-way
      differencing algorithm which is smart enough to handle data at a
      granularity of a single line of text.  Subversion also allows
      you to supplement its content merge processing with external
      differencing utilities (as described in <xref linkend="svn.advanced.externaldifftools.diff3"/>), some of
      which may do an even better job, perhaps providing granularity
      of a word or a single character of text.  But common among those
      algorithms is that they generally work only on text files.  The
      landscape starts to look pretty grim when you start talking
      about content merges of non-textual file formats.  And when you
      can't find a tool that can handle that type of merging, you
      begin to run into problems with the copy-modify-merge
      model.</para>
      <para>Let's look at a real-life example of where this model runs
      aground.  Harry and Sally are both graphic designers working on
      the same project, a bit of marketing collateral for an
      automobile mechanic.  Central to the design of a particular
      poster is an image of a car in need of some body work, stored in
      a file using the PNG image format.  The poster's layout is
      almost finished, and both Harry and Sally are pleased with the
      particular photo they chose for their damaged car&#x2014;a baby
      blue 1967 Ford Mustang with an unfortunate bit of crumpling on
      the left front fender.</para>
      <para>Now, as is common in graphic design work, there's a change
      in plans which causes the car's color to be a concern.  So Sally
      updates her working copy to <literal>HEAD</literal>, fires up
      her photo editing software, and sets about tweaking the image so
      that the car is now cherry red.  Meanwhile, Harry, feeling
      particularly inspired that day, decides that the image would
      have greater impact if the car also appears to have suffered
      greater impact.  He, too, updates to <literal>HEAD</literal>,
      and then draws some cracks on the vehicle's windshield.  He
      manages to finish his work before Sally finishes hers, and after
      admiring the fruits of his undeniable talent, commits the
      modified image.  Shortly thereafter, Sally is finished with the
      car's new finish, and tries to commit her changes.  But, as
      expected, Subversion fails the commit, informing Sally that now
      her version of the image is out of date.</para>
      <para>Here's where the difficulty sets in.  Were Harry and Sally
      making changes to a text file, Sally would simply update her
      working copy, receiving Harry's changes in the process.  In the
      worst possible case, they would have modified the same region of
      the file, and Sally would have to work out by hand the proper
      resolution to the conflict.  But these aren't text
      files&#x2014;they are binary images.  And while it's a simple
      matter to describe what one would expect the results of this
      content merge to be, there is precious little chance that any
      software exists which is smart enough to examine the common
      baseline image that each of these graphic artists worked
      against, the changes that Harry made, and the changes that Sally
      made, and spit out an image of a busted-up red Mustang with a
      cracked windshield!</para>
      <para>Clearly, things would have gone more smoothly if Harry and
      Sally had serialized their modifications to the image&#x2014;if, say,
      Harry had waited to draw his windshield cracks on Sally's
      now-red car, or if Sally had tweaked the color of a car whose
      windshield was already cracked.  As is discussed in <xref linkend="svn.basic.vsn-models.copy-merge"/>, most of these
      types of problems go away entirely where perfect communication
      between Harry and Sally exists.
      <footnote><para>Communication wouldn't have been such bad medicine for
          Harry and Sally's Hollywood namesakes, either, for that
          matter.</para></footnote>
      But as one's version control system is, in fact, one form of
      communication, it follows that having that software facilitate
      the serialization of non-parallelizable editing efforts is no
      bad thing.  This where Subversion's implementation of the
      lock-modify-unlock model steps into the spotlight.  This is
      where we talk about Subversion's <firstterm>locking</firstterm>
      feature, which is similar to the <quote>reserved
      checkouts</quote> mechanisms of other version control
      systems.</para>
      <para>Subversion's locking feature serves two main
      purposes:</para>
      <itemizedlist>
        <listitem>
          <para><emphasis>Serializing access to a versioned
          object</emphasis>.  By allowing a user to
          programmatically claim the exclusive right to change to a
          file in the repository, that user can be reasonably
          confident that energy invested on unmergeable changes won't
          be wasted&#x2014;his commit of those changes will succeed.</para>
        </listitem>
        <listitem>
          <para><emphasis>Aiding communication</emphasis>.  By alerting
          other users that serialization is in effect for a particular
          versioned object, those other users can reasonably expect
          that the object is about to be changed by someone else,
          and they, too, can avoid wasting their time and energy on
          unmergeable changes that won't be committable due to eventual
          out-of-dateness.</para>
        </listitem>
      </itemizedlist>
      <para>When referring to Subversion's locking feature, one is
      actually talking about a fairly diverse collection of behaviors
      which include the ability to lock a versioned file
      <footnote><para>Subversion does not currently allow locks on directories.</para></footnote>
      (claiming the exclusive right to modify the file), to unlock
      that file (yielding that exclusive right to modify), to see
      reports about which files are locked and by whom, to annotate
      files for which locking before editing is strongly advised, and
      so on.  In this section, we'll cover all of these facets of the
      larger locking feature.</para>
      <sidebar xml:id="svn.advanced.locking.meanings">
        <info>
          <title>The three meanings of <quote>lock</quote></title>
        </info>
        <para>In this section, and almost everywhere in this book, the
        words <quote>lock</quote> and <quote>locking</quote> describe
        a mechanism for mutual exclusion between users to avoid
        clashing commits. Unfortunately, there are two other sorts
        of <quote>lock</quote> with which Subversion, and therefore
        this book, sometimes needs to be concerned.</para>
        <para>The first is <firstterm>working copy locks</firstterm>,
        used internally by Subversion to prevent clashes between
        multiple Subversion clients operating on the same working
        copy.  This is the sort of lock indicated by an
        <computeroutput>L</computeroutput> in the third column of
        <command>svn status</command> output, and removed by the
        <command>svn cleanup</command> command, as described in <xref linkend="svn.tour.cleanup"/>.</para>
        <para>Secondly, there are <firstterm>database locks</firstterm>,
        used internally by the Berkeley DB backend to prevent clashes
        between multiple programs trying to access the database.  This
        is the sort of lock whose unwanted persistence after an error
        can cause a repository to be <quote>wedged</quote>, as
        described in <xref linkend="svn.reposadmin.maint.recovery"/>.</para>
        <para>You can generally forget about these other kinds of locks
        until something goes wrong that requires you to care about
        them.  In this book, <quote>lock</quote> means the first sort
        unless the contrary is either clear from context or explicitly
        stated.</para>
      </sidebar>
      <!-- =============================================================== -->
      <section xml:id="svn.advanced.locking.creation">
        <info>
          <title>Creating locks</title>
        </info>
        <para>In the Subversion repository, a
        <firstterm>lock</firstterm> is a piece of metadata which
        grants exclusive access to one user to change a file.  This
        user is said to be the <firstterm>lock owner</firstterm>.
        Each lock also has a unique identifier, typically a long
        string of characters, known as the <firstterm>lock
        token</firstterm>.  The repository manages locks, ultimately
        handling their creation, enforcement, and removal.  If any
        commit transaction attempts to modify or delete a locked file
        (or delete one of the parent directories of the file), the
        repository will demand two pieces of information&#x2014;that
        the client performing the commit be authenticated as the lock
        owner, and that the lock token has been provided as part of
        the commit process as a sort of proof that client knows which
        lock it is using.</para>
        <para>To demonstrate lock creation, let's refer back to our
        example of multiple graphic designers working with on the same
        binary image files.  Harry has decided to change a JPEG image.
        To prevent other people from committing changes to the file
        while he is modifying it (as well as alerting them that he is
        about to change it), he locks the file in the repository using
        the <command>svn lock</command> command.</para>
        <screen>
$ svn lock banana.jpg -m "Editing file for tomorrow's release."
'banana.jpg' locked by user 'harry'.
$
</screen>
        <para>There are a number of new things demonstrated in the
        previous example.  First, notice that Harry passed the
        <option>--message (-m)</option> option to <command>svn
        lock</command>.  Similar to <command>svn commit</command>, the
        <command>svn lock</command> command can take comments (either
        via <option>--message (-m)</option> or <option>--file
        (-F)</option>) to describe the reason for locking the file.
        Unlike <command>svn commit</command>, however, <command>svn
        lock</command> will not demand a message by launching your
        preferred text editor.  Lock comments are optional, but still
        recommended to aid communication.</para>
        <para>Secondly, the lock attempt succeeded.  This means that the
        file wasn't already locked, and that Harry had the latest
        version of the file.  If Harry's working copy of the file had
        been out-of-date, the repository would have rejected the
        request, forcing Harry to <command>svn update</command> and
        reattempt the locking command.  The locking command would also
        have failed if the file already been locked by someone
        else.</para>
        <para>As you can see, the <command>svn lock</command> command
        prints confirmation of the successful lock.  At this point,
        the fact that the file is locked becomes apparent in the
        output of the <command>svn status</command> and <command>svn
        info</command> reporting subcommands.</para>
        <screen>
$ svn status
     K banana.jpg

$ svn info banana.jpg
Path: banana.jpg
Name: banana.jpg
URL: http://svn.example.com/repos/project/banana.jpg
Repository UUID: edb2f264-5ef2-0310-a47a-87b0ce17a8ec
Revision: 2198
Node Kind: file
Schedule: normal
Last Changed Author: frank
Last Changed Rev: 1950
Last Changed Date: 2006-03-15 12:43:04 -0600 (Wed, 15 Mar 2006)
Text Last Updated: 2006-06-08 19:23:07 -0500 (Thu, 08 Jun 2006)
Properties Last Updated: 2006-06-08 19:23:07 -0500 (Thu, 08 Jun 2006)
Checksum: 3b110d3b10638f5d1f4fe0f436a5a2a5
Lock Token: opaquelocktoken:0c0f600b-88f9-0310-9e48-355b44d4a58e
Lock Owner: harry
Lock Created: 2006-06-14 17:20:31 -0500 (Wed, 14 Jun 2006)
Lock Comment (1 line):
Editing file for tomorrow's release.

$
</screen>
        <para>That the <command>svn info</command> command, which does
        not contact the repository when run against working copy
        paths, can display the lock token reveals an important fact
        about lock tokens&#x2014;that they are cached in the working
        copy.  The presence of the lock token is critical.  It gives
        the working copy authorization to make use of the lock later
        on.  Also, the <command>svn status</command> command shows a
        <literal>K</literal> next to the file (short for locKed),
        indicating that the lock token is present.</para>
        <sidebar>
          <info>
            <title>Regarding lock tokens</title>
          </info>
          <para>A lock token isn't an authentication token, so much as
          an <emphasis>authorization</emphasis> token.  The token
          isn't a protected secret.  In fact, a lock's unique token is
          discoverable by anyone who runs <command>svn info
          URL</command>.  A lock token is special only when it lives
          inside a working copy.  It's proof that the lock was created
          in that particular working copy, and not somewhere else by
          some other client.  Merely authenticating as the lock owner
          isn't enough to prevent accidents.</para>
          <para>For example, suppose you lock a file using a computer at
          your office, but leave work for the day before you finish
          your changes to that file.  It should not be possible to
          accidentally commit changes to that same file from your home
          computer later that evening simply because you've
          authenticated as the lock's owner.  In other words, the lock
          token prevents one piece of Subversion-related software from
          undermining the work of another.  (In our example, if you
          really need to change the file from an alternate working
          copy, you would need to <firstterm>break</firstterm> the lock and re-lock the
          file.)</para>
        </sidebar>
        <para>Now that Harry has locked <filename>banana.jpg</filename>,
        Sally is unable to change or delete that file:</para>
        <screen>
$ svn delete banana.jpg
D         banana.jpg
$ svn commit -m "Delete useless file."
Deleting       banana.jpg
svn: Commit failed (details follow):
svn: DELETE of
'/repos/project/!svn/wrk/64bad3a9-96f9-0310-818a-df4224ddc35d/banana.jpg':
423 Locked (http://svn.example.com)
$
</screen>
        <para>But Harry, after touching up the banana's shade of yellow,
        is able to commit his changes to the file.  That's because he
        authenticates as the lock owner, and also because his working
        copy holds the correct lock token:</para>
        <screen>
$ svn status
M    K banana.jpg
$ svn commit -m "Make banana more yellow"
Sending        banana.jpg
Transmitting file data .
Committed revision 2201.
$ svn status
$
</screen>
        <para>Notice that after the commit is finished, <command>svn
        status</command> shows that the lock token is no longer
        present in working copy.  This is the standard behavior of
        <command>svn commit</command>&#x2014;it searches the working
        copy (or list of targets, if you provide such a list) for
        local modifications, and sends all the lock tokens it
        encounters during this walk to the server as part of the
        commit transaction.  After the commit completes successfully,
        all of the repository locks that were mentioned are
        released&#x2014;<emphasis>even on files that weren't
        committed</emphasis>.  This is meant to discourage users from
        being sloppy about locking, or from holding locks for too
        long.  If Harry haphazardly locks thirty files in a directory
        named <filename>images</filename> because he's unsure of which
        files he needs to change, yet only only changes four of those
        files, when he runs <command>svn commit images</command>, the
        process will still release all thirty locks.</para>
        <para>This behavior of automatically releasing locks can be
        overridden with the <option>--no-unlock</option> option to
        <command>svn commit</command>.  This is best used for those
        times when you want to commit changes, but still plan to make
        more changes and thus need to retain existing locks.  You can
        also make this your default behavior by setting the
        <literal>no-unlock</literal> runtime configuration option (see
        <xref linkend="svn.advanced.confarea"/>).</para>
        <para>Of course, locking a file doesn't oblige one to commit a
        change to it.  The lock can be released at any time with a
        simple <command>svn unlock</command> command:</para>
        <screen>
$ svn unlock banana.c
'banana.c' unlocked.
</screen>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.advanced.locking.discovery">
        <info>
          <title>Discovering locks</title>
        </info>
        <para>When a commit fails due to someone else's locks, it's
        fairly easy to learn about them.  The easiest of
        these is <command>svn status --show-updates</command>:</para>
        <screen>
$ svn status -u
M              23   bar.c
M    O         32   raisin.jpg
       *       72   foo.h
Status against revision:     105
$
</screen>
        <para>In this example, Sally can see not only that her copy of
        <filename>foo.h</filename> is out-of-date, but that one of the
        two modified files she plans to commit is locked in the
        repository.  The <literal>O</literal> symbol stands for
        <quote>Other</quote>, meaning that a lock exists on the file,
        and was created by somebody else.  If she were to attempt a
        commit, the lock on <filename>raisin.jpg</filename> would
        prevent it.  Sally is left wondering who made the lock, when,
        and why.  Once again, <command>svn info</command> has the
        answers:</para>
        <screen>
$ svn info http://svn.example.com/repos/project/raisin.jpg
Path: raisin.jpg
Name: raisin.jpg
URL: http://svn.example.com/repos/project/raisin.jpg
Repository UUID: edb2f264-5ef2-0310-a47a-87b0ce17a8ec
Revision: 105
Node Kind: file
Last Changed Author: sally
Last Changed Rev: 32
Last Changed Date: 2006-01-25 12:43:04 -0600 (Sun, 25 Jan 2006)
Lock Token: opaquelocktoken:fc2b4dee-98f9-0310-abf3-653ff3226e6b
Lock Owner: harry
Lock Created: 2006-02-16 13:29:18 -0500 (Thu, 16 Feb 2006)
Lock Comment (1 line):
Need to make a quick tweak to this image.
$
</screen>
        <para>Just as <command>svn info</command> can be used to examine
        objects in the working copy, it can also be used to examine
        objects in the repository.  If the main argument to
        <command>svn info</command> is a working copy path, then all
        of the working copy's cached information is displayed; any
        mention of a lock means that the working copy is holding a
        lock token (if a file is locked by another user or in another
        working copy, <command>svn info</command> on a working copy
        path will show no lock information at all).  If the main
        argument to <command>svn info</command> is a URL, then the
        information reflects the latest version of an object in the
        repository, and any mention of a lock describes the current
        lock on the object.</para>
        <para>So in this particular example, Sally can see that Harry
        locked the file on February 16th to <quote>make a quick
        tweak</quote>.  It being June, she suspects that he probably
        forgot all about the lock.  She might phone Harry to complain
        and ask him to release the lock.  If he's unavailable, she
        might try to forcibly break the lock herself or ask an
        administrator to do so.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.advanced.locking.break-steal">
        <info>
          <title>Breaking and stealing locks</title>
        </info>
        <para>A repository lock isn't sacred&#x2014;in Subversion's
        default configuration state, locks can be released not only by
        the person who created them, but by anyone at all.  When
        somebody other than the original lock creator destroys a lock,
        we refer to this as <firstterm>breaking</firstterm> the
        lock.</para>
        <para>From the administrator's chair, it's simple to break
        locks.  The <command>svnlook</command>
        and <command>svnadmin</command> programs have the ability to
        display and remove locks directly from the repository.  (For
        more information about these tools, see
        <xref linkend="svn.reposadmin.maint.tk"/>.)</para>
        <screen>
$ svnadmin lslocks /var/svn/repos
Path: /project2/images/banana.jpg
UUID Token: opaquelocktoken:c32b4d88-e8fb-2310-abb3-153ff1236923
Owner: frank
Created: 2006-06-15 13:29:18 -0500 (Thu, 15 Jun 2006)
Expires: 
Comment (1 line):
Still improving the yellow color.

Path: /project/raisin.jpg
UUID Token: opaquelocktoken:fc2b4dee-98f9-0310-abf3-653ff3226e6b
Owner: harry
Created: 2006-02-16 13:29:18 -0500 (Thu, 16 Feb 2006)
Expires: 
Comment (1 line):
Need to make a quick tweak to this image.

$ svnadmin rmlocks /var/svn/repos /project/raisin.jpg
Removed lock on '/project/raisin.jpg'.
$
</screen>
        <para>The more interesting option is allowing users to break
        each other's locks over the network.  To do this, Sally simply
        needs to pass the <option>--force</option> to the unlock
        command:</para>
        <screen>
$ svn status -u
M              23   bar.c
M    O         32   raisin.jpg
       *       72   foo.h
Status against revision:     105
$ svn unlock raisin.jpg
svn: 'raisin.jpg' is not locked in this working copy
$ svn info raisin.jpg | grep URL
URL: http://svn.example.com/repos/project/raisin.jpg
$ svn unlock http://svn.example.com/repos/project/raisin.jpg
svn: Unlock request failed: 403 Forbidden (http://svn.example.com)
$ svn unlock --force http://svn.example.com/repos/project/raisin.jpg
'raisin.jpg' unlocked.
$
</screen>
        <para>Now, Sally's initial attempt to unlock failed because she
        ran <command>svn unlock</command> directly on her working copy
        of the file, and no lock token was present.  To remove the
        lock directly from the repository, she needs to pass a URL
        to <command>svn unlock</command>.  Her first attempt to unlock
        the URL fails, because she can't authenticate as the lock
        owner (nor does she have the lock token).  But when she
        passes <option>--force</option>, the authentication and
        authorization requirements are ignored, and the remote lock is
        broken.</para>
        <para>Simply breaking a lock may not be enough.  In
        the running example, Sally may not only want to break Harry's
        long-forgotten lock, but re-lock the file for her own use.
        She can accomplish this by running <command>svn unlock
        --force</command> and then <command>svn lock</command>
        back-to-back, but there's a small chance that somebody else
        might lock the file between the two commands.  The simpler thing
        to is <firstterm>steal</firstterm> the lock, which involves
        breaking and re-locking the file all in one atomic step.  To
        do this, Sally passes the <option>--force</option> option
        to <command>svn lock</command>:</para>
        <screen>
$ svn lock raisin.jpg
svn: Lock request failed: 423 Locked (http://svn.example.com)
$ svn lock --force raisin.jpg
'raisin.jpg' locked by user 'sally'.
$
</screen>
        <para>In any case, whether the lock is broken or stolen, Harry
        may be in for a surprise.  Harry's working copy still contains
        the original lock token, but that lock no longer exists.  The
        lock token is said to be <firstterm>defunct</firstterm>.  The
        lock represented by the lock token has either been broken (no
        longer in the repository), or stolen (replaced with a
        different lock).  Either way, Harry can see this by asking
        <command>svn status</command> to contact the
        repository:</para>
        <screen>
$ svn status
     K raisin.jpg
$ svn status -u
     B         32   raisin.jpg
$ svn update
  B  raisin.jpg
$ svn status
$
</screen>
        <para>If the repository lock was broken, then <command>svn
        status --show-updates</command> displays a
        <literal>B</literal> (Broken) symbol next to the file.  If a
        new lock exists in place of the old one, then a
        <literal>T</literal> (sTolen) symbol is shown.  Finally,
        <command>svn update</command> notices any defunct lock tokens
        and removes them from the working copy.</para>
        <sidebar>
          <info>
            <title>Locking Policies</title>
          </info>
          <para>Different systems have different notions of how strict a
          lock should be.  Some folks argue that locks must be
          strictly enforced at all costs, releasable only by the
          original creator or administrator.  They argue that if
          anyone can break a lock, then chaos runs rampant and the
          whole point of locking is defeated.  The other side argues
          that locks are first and foremost a communication tool.  If
          users are constantly breaking each others' locks, then it
          represents a cultural failure within the team and the
          problem falls outside the scope of software enforcement.</para>
          <para>Subversion defaults to the <quote>softer</quote>
          approach, but still allows administrators to create stricter
          enforcement policies through the use of hook scripts.  In
          particular, the <filename>pre-lock</filename> and
          <filename>pre-unlock</filename> hooks allow administrators
          to decide when lock creation and lock releases are allowed
          to happen.  Depending on whether or not a lock already
          exists, these two hooks can decide whether or not to allow a
          certain user to break or steal a lock.  The
          <filename>post-lock</filename> and
          <filename>post-unlock</filename> hooks are also available,
          and can be used to send email after locking actions.  To
          learn more about repository hooks, see <xref linkend="svn.reposadmin.create.hooks"/>.</para>
        </sidebar>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.advanced.locking.lock-communication">
        <info>
          <title>Lock Communication</title>
        </info>
        <para>We've seen how <command>svn lock</command>
        and <command>svn unlock</command> can be used to create,
        release, break, and steal locks.  This satisfies the goal of
        serializing commit access to a file.  But what about the
        larger problem of preventing wasted time?</para>
        <para>For example, suppose Harry locks an image file and then
        begins editing it.  Meanwhile, miles away, Sally wants to do
        the same thing.  She doesn't think to run <command>svn status
        --show-updates</command>, so she has no idea that Harry has
        already locked the file.  She spends hours editing the file,
        and when she tries to commit her change, she discovers that
        either the file is locked or that she's out-of-date.
        Regardless, her changes aren't mergeable with Harry's.  One of
        these two people has to throw away their work, and a lot of
        time has been wasted.</para>
        <para>Subversion's solution to this problem is to provide a
        mechanism to remind users that a file ought to be locked
        <emphasis>before</emphasis> the editing begins.  The mechanism
        is a special property, <literal>svn:needs-lock</literal>.  If
        that property is attached to a file (regardless of its value,
        which is irrelevant), then Subversion will try to use
        filesystem-level permissions to make the file read-only&#x2014;unless,
        of course, the user has explicitly locked the file.
        When a lock token is present (as a result of running
        <command>svn lock</command>), the file becomes read-write.
        When the lock is released, the file becomes read-only
        again.</para>
        <para>The theory, then, is that if the image file has this
        property attached, then Sally would immediately notice
        something is strange when she opens the file for editing:
        many applications alert users immediately when a read-only
        file is opened for editing, and nearly all would
        prevent her from saving changes to the file.  This
        reminds her to lock the file before editing, whereby she
        discovers the pre-existing lock:</para>
        <screen>
$ /usr/local/bin/gimp raisin.jpg
gimp: error: file is read-only!
$ ls -l raisin.jpg
-r--r--r--   1 sally   sally   215589 Jun  8 19:23 raisin.jpg
$ svn lock raisin.jpg
svn: Lock request failed: 423 Locked (http://svn.example.com)
$ svn info http://svn.example.com/repos/project/raisin.jpg | grep Lock
Lock Token: opaquelocktoken:fc2b4dee-98f9-0310-abf3-653ff3226e6b
Lock Owner: harry
Lock Created: 2006-06-08 07:29:18 -0500 (Thu, 08 June 2006)
Lock Comment (1 line):
Making some tweaks.  Locking for the next two hours.
$
</screen>
        <tip>
          <para>Users and administrators alike are encouraged to attach
          the <literal>svn:needs-lock</literal> property to any file
          which cannot be contextually merged.  This is the primary
          technique for encouraging good locking habits and preventing
          wasted effort.</para>
        </tip>
        <para>Note that this property is a communication tool which
        works independently from the locking system.  In other words,
        any file can be locked, whether or not this property is
        present.  And conversely, the presence of this property
        doesn't make the repository require a lock when
        committing.</para>
        <para>Unfortunately, the system isn't flawless.  It's possible
        that even when a file has the property, the read-only reminder
        won't always work.  Sometimes applications misbehave and
        <quote>hijack</quote> the read-only file, silently allowing
        users to edit and save the file anyway.  There's not much that
        Subversion can do in this situation&#x2014;at the end of the
        day, there's simply no substitution for good interpersonal
        communication.
        <footnote><para>Except, perhaps, a classic Vulcan mind-meld.</para></footnote>
      </para>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.advanced.externals">
      <info>
        <title>Externals Definitions</title>
      </info>
      <para>Sometimes it is useful to construct a working copy that is
      made out of a number of different checkouts.  For example, you
      may want different subdirectories to come from different
      locations in a repository, or perhaps from different
      repositories altogether.  You could certainly set up such a
      scenario by hand&#x2014;using <command>svn checkout</command> to
      create the sort of nested working copy structure you are trying
      to achieve.  But if this layout is important for everyone who
      uses your repository, every other user will need to perform the
      same checkout operations that you did.</para>
      <para>Fortunately, Subversion provides support for
      <firstterm>externals definitions</firstterm>.  An externals
      definition is a mapping of a local directory to the
      URL&#x2014;and ideally a particular revision&#x2014;of a
      versioned directory.  In Subversion, you declare externals
      definitions in groups using the <literal>svn:externals</literal>
      property.  You can create or modify this property using
      <command>svn propset</command> or <command>svn
      propedit</command> (see <xref linkend="svn.advanced.props.manip"/>).  It can be set on any versioned directory, and its value is
      a multi-line table of subdirectories (relative to the versioned
      directory on which the property is set), optional revision
      flags, and fully qualified, absolute Subversion repository
      URLs.</para>
      <screen>
$ svn propget svn:externals calc
third-party/sounds             http://sounds.red-bean.com/repos
third-party/skins              http://skins.red-bean.com/repositories/skinproj
third-party/skins/toolkit -r21 http://svn.red-bean.com/repos/skin-maker
</screen>
      <para>The convenience of the <literal>svn:externals</literal>
      property is that once it is set on a versioned directory,
      everyone who checks out a working copy with that directory also
      gets the benefit of the externals definition.  In other words,
      once one person has made the effort to define those nested
      working copy checkouts, no one else has to
      bother&#x2014;Subversion will, upon checkout of the original
      working copy, also check out the external working copies.</para>
      <warning>
        <para>The relative target subdirectories of externals
        definitions <emphasis>must not</emphasis> already exist on your or other users'
        systems&#x2014;Subversion will create them when it checks out
        the external working copy.</para>
      </warning>
      <para>Note the previous externals definition example.  When
      someone checks out a working copy of the
      <filename>calc</filename> directory, Subversion also continues
      to check out the items found in its externals definition.</para>
      <screen>
$ svn checkout http://svn.example.com/repos/calc
A  calc
A  calc/Makefile
A  calc/integer.c
A  calc/button.c
Checked out revision 148.

Fetching external item into calc/third-party/sounds
A  calc/third-party/sounds/ding.ogg
A  calc/third-party/sounds/dong.ogg
A  calc/third-party/sounds/clang.ogg
&#x2026;
A  calc/third-party/sounds/bang.ogg
A  calc/third-party/sounds/twang.ogg
Checked out revision 14.

Fetching external item into calc/third-party/skins
&#x2026;
</screen>
      <para>If you need to change the externals definition, you can do
      so using the regular property modification subcommands.  When
      you commit a change to the <literal>svn:externals</literal>
      property, Subversion will synchronize the checked-out items
      against the changed externals definition when you next run
      <command>svn update</command>.  The same thing will happen when
      others update their working copies and receive your changes to
      the externals definition.</para>
      <tip>
        <para>Because the <literal>svn:externals</literal> property has
        a multiline value, we strongly recommend that you use
        <command>svn propedit</command> instead of <command>svn
        propset</command>.</para>
      </tip>
      <tip>
        <para>You should seriously consider using explicit revision
        numbers in all of your externals definitions.  Doing so means
        that you get to decide when to pull down a different snapshot
        of external information, and exactly which snapshot to pull.
        Besides avoiding the surprise of getting changes to
        third-party repositories that you might not have any control
        over, using explicit revision numbers also means that as you
        backdate your working copy to a previous revision, your
        externals definitions will also revert to the way they looked
        in that previous revision, which in turn means that the
        external working copies will be updated to match they way
        <emphasis>they</emphasis> looked back when your repository was
        at that previous revision.  For software projects, this could
        be the difference between a successful and a failed build of
        an older snapshot of your complex codebase.</para>
      </tip>
      <para>The <command>svn status</command> command also recognizes
      externals definitions, displaying a status code of
      <literal>X</literal> for the disjoint subdirectories into which
      externals are checked out, and then recursing into those
      subdirectories to display the status of the external items
      themselves.</para>
      <para>The support that exists for externals definitions in
      Subversion is less than ideal, though.  First, an
      externals definition can only point to directories, not files.
      Second, the externals definition cannot point to relative paths
      (paths like <filename>../../skins/myskin</filename>).  Third, the
      working copies created via the externals definition support are
      still disconnected from the primary working copy (on whose
      versioned directories the <literal>svn:externals</literal>
      property was actually set).  And Subversion still only truly
      operates on non-disjoint working copies.  So, for example, if
      you want to commit changes that you've made in one or more of
      those external working copies, you must run <command>svn
      commit</command> explicitly on those working
      copies&#x2014;committing on the primary working copy will not
      recurse into any external ones.</para>
      <para>Also, since the definitions themselves use absolute URLs,
      moving or copying a directory to which they are attached will
      not affect what gets checked out as an external (though the
      relative local target subdirectory will, of course, move with
      renamed directory).  This can be confusing&#x2014;even
      frustrating&#x2014;in certain situations.  For example, say you
      have a top-level directory named
      <filename>my-project</filename>, and you've created an externals
      definition on one of its subdirectories
      (<filename>my-project/some-dir</filename>) which tracks the
      latest revision of another of its subdirectories
      (<filename>my-project/external-dir</filename>).</para>
      <screen>
$ svn checkout http://svn.example.com/projects .
A    my-project
A    my-project/some-dir
A    my-project/external-dir
&#x2026;
Fetching external item into 'my-project/some-dir/subdir'
Checked out external at revision 11.

Checked out revision 11.
$ svn propget svn:externals my-project/some-dir
subdir http://svn.example.com/projects/my-project/external-dir

$
</screen>
      <para>Now you use <command>svn move</command> to rename the
      <filename>my-project</filename> directory.  At this point, your
      externals definition will still refer to a path under the
      <filename>my-project</filename> directory, even though that
      directory no longer exists.</para>
      <screen>
$ svn move -q my-project renamed-project
$ svn commit -m "Rename my-project to renamed-project."
Deleting       my-project
Adding         my-renamed-project

Committed revision 12.
$ svn update

Fetching external item into 'renamed-project/some-dir/subdir'
svn: Target path does not exist
$
</screen>
      <para>Also, the absolute URLs that externals definitions use
      can cause problems with repositories that are available via
      multiple URL schemes.  For example, if your Subversion server is
      configured to allow everyone to check out the repository over
      <literal>http://</literal> or <literal>https://</literal>, but
      only allow commits to come in via <literal>https://</literal>,
      you have an interesting problem on your hands.  If your
      externals definitions use the <literal>http://</literal> form
      of the repository URLs, you won't be able to commit anything
      from the working copies created by those externals.  On the
      other hand, if they use the <literal>https://</literal> form of
      the URLs, anyone who might be checking out via
      <literal>http://</literal> because their client doesn't support
      <literal>https://</literal> will be unable to fetch the external
      items.  Be aware, too, that if you need to re-parent your
      working copy (using <command>svn switch --relocate</command>),
      externals definitions will <emphasis>not</emphasis> also be
      re-parented.</para>
      <para>Finally, there might be times when you would prefer that
      <command>svn</command> subcommands would not recognize, or
      otherwise operate upon, the external working copies.   In those instances,
      you can pass the <option>--ignore-externals</option> option to
      the subcommand.</para>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.advanced.pegrevs">
      <info>
        <title>Peg and Operative Revisions</title>
      </info>
      <para>We copy, move, rename, and
      completely replace files and directories on our computers all
      the time.  And your version control system shouldn't get in the
      way of your doing these things with your version-controlled
      files and directories, either.  Subversion's file management
      support is quite liberating, affording almost as much
      flexibility for versioned files as you'd expect when
      manipulating your unversioned ones.  But that flexibility means
      that across the lifetime of your repository, a given versioned
      object might have many paths, and a given path might represent
      several entirely different versioned objects.  And this
      introduces a certain level of complexity to your interactions
      with those paths and objects.</para>
      <para>Subversion is pretty smart about noticing when an object's
      version history includes such <quote>changes of address</quote>.
      For example, if you ask for the revision history log of a
      particular file that was renamed last week, Subversion happily
      provides all those logs&#x2014;the revision in which the rename
      itself happened, plus the logs of relevant revisions both before
      and after that rename.  So, most of the time, you don't even
      have to think about such things.  But occasionally, Subversion
      needs your help to clear up ambiguities.</para>
      <para>The simplest example of this occurs when a directory or file
      is deleted from version control, and then a new directory or
      file is created with the same name and added to version control.
      Clearly the thing you deleted and the thing you later added
      aren't the same thing.  They merely happen to have had the same
      path, <filename>/trunk/object</filename> for example.  What,
      then, does it mean to ask Subversion about the history of
      <filename>/trunk/object</filename>?  Are you asking about the
      thing currently at that location, or the old thing you deleted
      from that location?  Are you asking about the operations that
      have happened to <emphasis>all</emphasis> the objects that have
      ever lived at that path?  Clearly, Subversion needs a hint about
      what you really want.</para>
      <para>And thanks to moves, versioned object history can get far
      more twisted than that, even.  For example, you might have a
      directory named <filename>concept</filename>, containing some
      nascent software project you've been toying with.  Eventually,
      though, that project matures to the point that the idea seems to
      actually have some wings, so you do the unthinkable and decide
      to give the project a name.
      <footnote><para><quote>You're not supposed to name it.  Once you name it,
          you start getting attached to it.</quote>&#x2014;Mike
          Wazowski</para></footnote>
      Let's say you called your software Frabnaggilywort.  At this
      point, it makes sense to rename the directory to reflect the
      project's new name, so <filename>concept</filename> is renamed
      to <filename>frabnaggilywort</filename>.  Life goes on,
      Frabnaggilywort releases a 1.0 version, and is downloaded and
      used daily by hordes of people aiming to improve their
      lives.</para>
      <para>It's a nice story, really, but it doesn't end there.
      Entrepreneur that you are, you've already got another think in
      the tank.  So you make a new directory,
      <filename>concept</filename>, and the cycle begins again.  In
      fact, the cycle begins again many times over the years, each
      time starting with that old <filename>concept</filename>
      directory, then sometimes seeing that directory renamed as the
      idea cures, sometimes seeing it deleted when you scrap the idea.
      Or, to get really sick, maybe you rename
      <filename>concept</filename> to something else for a while, but
      later rename the thing back to <filename>concept</filename> for
      some reason.</para>
      <para>In scenarios like these, attempting to instruct
      Subversion to work with these re-used paths can be a little like
      instructing a motorist in Chicago's West Suburbs to drive east
      down Roosevelt Road and turn left onto Main Street.  In a mere
      twenty minutes, you can cross <quote>Main Street</quote> in
      Wheaton, Glen Ellyn, and Lombard.  And no, they aren't the same
      street.  Our motorist&#x2014;and our Subversion&#x2014;need a
      little more detail in order to do the right thing.</para>
      <para>In version 1.1, Subversion introduced a way for you to tell
      it exactly which Main Street you meant.  It's called the
      <firstterm>peg revision</firstterm>, and it is a revision
      provided to Subversion for the sole purpose of identifying a
      unique line of history.  Because at most one versioned object
      may occupy a path at any given time&#x2014;or, more precisely, in
      any one revision&#x2014;the combination of a path and a peg
      revision is all that is needed to refer to a specific line of
      history.  Peg revisions are specified to the Subversion
      command-line client using <firstterm>at syntax</firstterm>, so
      called because the syntax involves appending an <quote>at
      sign</quote> (<literal>@</literal>) and the peg revision to the
      end of the path with which the revision is associated.</para>
      <para>But what of the <option>--revision (-r)</option> of which
      we've spoken so much in this book?  That revision (or set of
      revisions) is called the <firstterm>operative
      revision</firstterm> (or <firstterm>operative revision
      range</firstterm>).  Once a particular line of history has been
      identified using a path and peg revision, Subversion performs
      the requested operation using the operative revision(s).  To map
      this to our Chicagoland streets analogy, if we are told to go to
      606 N. Main Street in Wheaton,
      <footnote><para>606 N. Main Street, Wheaton, Illinois, is the home of
          the Wheaton History Center.  Get it&#x2014;<quote>History
          Center</quote>?  It seemed appropriate&#x2026;.</para></footnote>
      we can think of <quote>Main Street</quote> as our path and
      <quote>Wheaton</quote> as our peg revision.  These two pieces of
      information identify a unique path which can travelled (north or
      south on Main Street), and will keep us from travelling up and
      down the wrong Main Street in search of our destination.  Now we
      throw in <quote>606 N.</quote> as our operative revision, of
      sorts, and we know <emphasis>exactly</emphasis> where to
      go.</para>
      <sidebar>
        <info>
          <title>The peg revision algorithm</title>
        </info>
        <para>The Subversion command-line performs the peg revision
        algorithm any time it needs to resolve possible ambiguities in
        the paths and revisions provided to it.  Here's an example of
        such an invocation:</para>
        <screen>
$ svn <replaceable>command</replaceable> -r <replaceable>OPERATIVE-REV</replaceable> item@<replaceable>PEG-REV</replaceable>
</screen>
        <para>If <replaceable>OPERATIVE-REV</replaceable> is older than
        <replaceable>PEG-REV</replaceable>, then the algorithm is as
        follows:</para>
        <itemizedlist>
          <listitem>
            <para>Locate <replaceable>item</replaceable> in the revision
            identified by <replaceable>PEG-REV</replaceable>.  There
            can be only one such object.</para>
          </listitem>
          <listitem>
            <para>Trace the object's history backwards (through any
            possible renames) to its ancestor in the revision
            <replaceable>OPERATIVE-REV</replaceable>.</para>
          </listitem>
          <listitem>
            <para>Perform the requested action on that ancestor,
            wherever it is located, or whatever its name might
            be or have been at that time.</para>
          </listitem>
        </itemizedlist>
        <para>But what if <replaceable>OPERATIVE-REV</replaceable> is
        <emphasis>younger</emphasis> than
        <replaceable>PEG-REV</replaceable>?  Well, that adds some
        complexity to the theoretical problem of locating the path in
        <replaceable>OPERATIVE-REV</replaceable>, because the path's
        history could have forked multiple times (thanks to copy
        operations) between <replaceable>PEG-REV</replaceable> and
        <replaceable>OPERATIVE-REV</replaceable>.  And that's not
        all&#x2014;Subversion doesn't store enough information to
        performantly trace an object's history forward, anyway.  So
        the algorithm is a little different:</para>
        <itemizedlist>
          <listitem>
            <para>Locate <replaceable>item</replaceable> in the revision
            identified by <replaceable>OPERATIVE-REV</replaceable>.  There
            can be only one such object.</para>
          </listitem>
          <listitem>
            <para>Trace the object's history backwards (through any
            possible renames) to its ancestor in the revision
            <replaceable>PEG-REV</replaceable>.</para>
          </listitem>
          <listitem>
            <para>Verify that the object's location (path-wise) in
            <replaceable>PEG-REV</replaceable> is the same as it is in
            <replaceable>OPERATIVE-REV</replaceable>.  If that's the
            case, then at least the two locations are known to be
            directly related, so perform the requested action on the
            location in <replaceable>OPERATIVE-REV</replaceable>.
            Otherwise, relatedness was not established, so error out
            with a loud complaint that no viable location was found.
            (Someday, we expect that Subversion will be able to handle
            this usage scenario with more flexibility and
            grace.)</para>
          </listitem>
        </itemizedlist>
        <para>Note that even when you don't explicitly supply a peg
        revision or operative revision, they are still present.  For
        your convenience, the default peg revision is
        <literal>BASE</literal> for working copy items and
        <literal>HEAD</literal> for repository URLs.  And when no
        operative revision is provided, it defaults to being the same
        revision as the peg revision.</para>
      </sidebar>
      <para>Say that long ago we created our repository, and in revision 1
      added our first <filename>concept</filename> directory, plus an
      <filename>IDEA</filename> file in that directory talking about
      the concept.  After several revisions in which real code was
      added and tweaked, we, in revision 20, renamed this directory to
      <filename>frabnaggilywort</filename>.  By revision 27, we had a
      new concept, a new <filename>concept</filename> directory to
      hold it, and a new <filename>IDEA</filename> file to describe
      it.  And then five years and twenty thousand revisions flew by,
      just like they would in any good romance story.</para>
      <para>Now, years later, we wonder what the
      <filename>IDEA</filename> file looked like back in revision 1.
      But Subversion needs to know if we are asking about how the
      <emphasis>current</emphasis> file looked back in revision 1, or
      if we are asking for the contents of whatever file lived at
      <filename>concepts/IDEA</filename> in revision 1.  Certainly
      those questions have different answers, and because of peg
      revisions, you can ask either of them.  To find out how the
      current <filename>IDEA</filename> file looked in that old
      revision, you run:</para>
      <screen>
$ svn cat -r 1 concept/IDEA 
svn: Unable to find repository location for 'concept/IDEA' in revision 1
</screen>
      <para>Of course, in this example, the current
      <filename>IDEA</filename> file didn't exist yet in revision 1,
      so Subversion gives an error.  The command above is shorthand
      for a longer notation which explicitly lists a peg revision.
      The expanded notation is:</para>
      <screen>
$ svn cat -r 1 concept/IDEA@BASE
svn: Unable to find repository location for 'concept/IDEA' in revision 1
</screen>
      <para>And when executed, it has the expected results.</para>
      <para>The perceptive reader is probably wondering at this point if
      the peg revision syntax causes problems for working copy paths
      or URLs that actually have at signs in them.  After
      all, how does <command>svn</command> know whether
      <literal>news@11</literal> is the name of a directory in my
      tree, or just a syntax for <quote>revision 11 of
      <filename>news</filename></quote>?  Thankfully, while
      <command>svn</command> will always assume the latter, there is a
      trivial workaround.  You need only append an at sign to the
      end of the path, such as <literal>news@11@</literal>.
      <command>svn</command> only cares about the last at sign in
      the argument, and it is not considered illegal to omit a literal
      peg revision specifier after that at sign.  This workaround
      even applies to paths that end in an at sign&#x2014;you would
      use <literal>filename@@</literal> to talk about a file named
      <filename>filename@</filename>.</para>
      <para>Let's ask the other question, then&#x2014;in revision 1, what
      were the contents of whatever file occupied the address
      <filename>concepts/IDEA</filename> at the time?  We'll use an
      explicit peg revision to help us out.</para>
      <screen>
$ svn cat concept/IDEA@1
The idea behind this project is to come up with a piece of software
that can frab a naggily wort.  Frabbing naggily worts is tricky
business, and doing it incorrectly can have serious ramifications, so
we need to employ over-the-top input validation and data verification
mechanisms.
</screen>
      <para>Notice that we didn't provide an operative revision this
      time.  That's because when no operative revision is specified,
      Subversion assumes a default operative revision that's the same
      as the peg revision.</para>
      <para>As you can see, the output from our operation appears to be
      correct.  The text even mentions frabbing naggily worts, so this
      is almost certainly the file which describes the software now
      called Frabnaggilywort.  In fact, we can verify this using the
      combination of an explicit peg revision and explicit operative
      revision.  We know that in <literal>HEAD</literal>, the
      Frabnaggilywort project is located in the
      <filename>frabnaggilywort</filename> directory.  So we specify
      that we want to see how the line of history identified in
      <literal>HEAD</literal> as the path
      <filename>frabnaggilywort/IDEA</filename> looked in revision
      1.</para>
      <screen>
$ svn cat -r 1 frabnaggilywort/IDEA@HEAD
The idea behind this project is to come up with a piece of software
that can frab a naggily wort.  Frabbing naggily worts is tricky
business, and doing it incorrectly can have serious ramifications, so
we need to employ over-the-top input validation and data verification
mechanisms.
</screen>
      <para>And the peg and operative revisions need not be so trivial,
      either.  For example, say <filename>frabnaggilywort</filename>
      had been deleted from <literal>HEAD</literal>, but we know it
      existed in revision 20, and we want to see the diffs for its
      <filename>IDEA</filename> file between revisions 4 and 10.  We
      can use the peg revision 20 in conjunction with the URL that
      would have held Frabnaggilywort's <filename>IDEA</filename> file
      in revision 20, and then use 4 and 10 as our operative revision
      range.</para>
      <screen>
$ svn diff -r 4:10 http://svn.red-bean.com/projects/frabnaggilywort/IDEA@20
Index: frabnaggilywort/IDEA
===================================================================
--- frabnaggilywort/IDEA	(revision 4)
+++ frabnaggilywort/IDEA	(revision 10)
@@ -1,5 +1,5 @@
-The idea behind this project is to come up with a piece of software
-that can frab a naggily wort.  Frabbing naggily worts is tricky
-business, and doing it incorrectly can have serious ramifications, so
-we need to employ over-the-top input validation and data verification
-mechanisms.
+The idea behind this project is to come up with a piece of
+client-server software that can remotely frab a naggily wort.
+Frabbing naggily worts is tricky business, and doing it incorrectly
+can have serious ramifications, so we need to employ over-the-top
+input validation and data verification mechanisms.
</screen>
      <para>Fortunately, most folks aren't faced with such complex
      situations.  But when you are, remember that peg revisions are
      that extra hint Subversion needs to clear up ambiguity.</para>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.serverconfig.netmodel">
      <info>
        <title>Network Model</title>
      </info>
      <para>At some point, you're going to need to understand how your
      Subversion client communicates with its server.  Subversion's
      networking layer is abstracted, meaning that Subversion clients
      exhibit the same general behaviors no matter what sort of server
      they are operating against.  Whether speaking the HTTP protocol
      (<literal>http://</literal>) with the Apache HTTP Server or
      speaking the custom Subversion protocol
      (<literal>svn://</literal>) with <command>svnserve</command>,
      the basic network model is the same.  In this section, we'll
      explain the basics of that network model, including how
      Subversion manages authentication and authorization
      matters.</para>
      <!-- =============================================================== -->
      <section xml:id="svn.serverconfig.netmodel.reqresp">
        <info>
          <title>Requests and Responses</title>
        </info>
        <para>The Subversion client spends most of its time managing
        working copies.  When it needs information from a remote
        repository, however, it makes a network request, and the
        server responds with an appropriate answer.  The details of
        the network protocol are hidden from the user&#x2014;the client
        attempts to access a URL, and depending on the URL scheme, a
        particular protocol is used to contact the server (see <xref linkend="svn.basic.in-action.wc.sb-1"/>).</para>
        <tip>
          <para>Run <command>svn --version</command> to see
        which URL schemes and protocols the client knows how to
        use.</para>
        </tip>
        <para>When the server process receives a client request, it
        often demands that the client identify itself.  It issues
        an authentication challenge to the client, and the client
        responds by providing <firstterm>credentials</firstterm> back
        to the server.  Once authentication is complete, the server
        responds with the original information the client asked for.
        Notice that this system is different from systems like CVS,
        where the client pre-emptively offers credentials (<quote>logs
        in</quote>) to the server before ever making a request.  In
        Subversion, the server <quote>pulls</quote> credentials by
        challenging the client at the appropriate moment, rather than
        the client <quote>pushing</quote> them.  This makes certain
        operations more elegant.  For example, if a server is
        configured to allow anyone in the world to read a repository,
        then the server will never issue an authentication challenge
        when a client attempts to <command>svn checkout</command>.</para>
        <para>If the particular network requests issued by the client
        result in a new revision being created in the repository,
        (e.g. <command>svn commit</command>), then Subversion uses the
        authenticated username associated with those requests as the
        author of the revision.  That is, the authenticated user's
        name is stored as the value of the
        <literal>svn:author</literal> property on the new revision
        (see <xref linkend="svn.ref.properties"/>).  If
        the client was not authenticated (in other words, the server
        never issued an authentication challenge), then the revision's
        <literal>svn:author</literal> property is empty.
      </para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.serverconfig.netmodel.credcache">
        <info>
          <title>Client Credentials Caching</title>
        </info>
        <para>Many servers are configured to require authentication on
        every request.  This would be a big annoyance to users, if
        they were forced to type their passwords over and over again.
        Fortunately, the Subversion client has a remedy for
        this&#x2014;a built-in system for caching authentication
        credentials on disk.  By default, whenever the command-line
        client successfully responds to a server's authentication
        challenge, it saves the credentials in the user's private
        runtime configuration area
        (<filename>~/.subversion/auth/</filename> on Unix-like systems
        or <filename>%APPDATA%/Subversion/auth/</filename> on Windows;
        see <xref linkend="svn.advanced.confarea"/> for more details
        about the runtime configuration system).  Successful
        credentials are cached on disk, keyed on a combination of the
        server's hostname, port, and authentication realm.</para>
        <para>When the client receives an authentication challenge, it
        first looks for the appropriate credentials in the user's disk
        cache.  If seemingly suitable credentials are not present, or
        if the cached credentials ultimately fail to authenticate,
        then the client will, by default, fall back to prompting the
        user for the necessary information.</para>
        <para>The security-conscious reader will suspect immediately
        that there is reason for concern here.  <quote>Caching
        passwords on disk?  That's terrible!  You should never do
        that!</quote></para>
        <para>The Subversion developers recognize the legitimacy of such
        concerns, and so Subversion works with available mechanisms
        provided by the operating system and environment to try to
        minimize the risk of leaking this information.  Here's a
        breakdown of what this means for users on the most common
        platforms:</para>
        <itemizedlist>
          <listitem>
            <para>On Windows 2000 and later, the Subversion client uses
            standard Windows cryptography services to encrypt the
            password on disk.  Because the encryption key is managed
            by Windows and is tied to the user's own login
            credentials, only the user can decrypt the cached
            password.  (Note that if the user's Windows account password
            is reset by an administrator, all of the cached passwords
            become undecipherable.  The Subversion client will behave
            as if they don't exist, prompting for passwords when
            required.)</para>
          </listitem>
          <listitem>
            <para>Similarly, on Mac OS X, the Subversion client stores
            all repository passwords in the login keyring (managed by
            the Keychain service), which is protected by the user's
            account password.  User preference settings can impose
            additional policies, such as requiring the user's account
            password be entered each time the Subversion password is
            used.</para>
          </listitem>
          <listitem>
            <para>For other Unix-like operating systems, no standard
            <quote>keychain</quote> services exist.  However,
            the <filename>auth/</filename> caching area is still
            permission-protected so that only the user (owner) can
            read data from it, not the world at large.  The operating
            system's own file permissions protect the passwords.</para>
          </listitem>
        </itemizedlist>
        <para>Of course, for the truly paranoid, none of these
        mechanisms meets the test of perfection.  So for those folks
        willing to sacrifice convenience for the ultimate security,
        Subversion provides various ways of disabling its credentials
        caching system altogether.</para>
        <para>To disable caching for a single command, pass the
        <option>--no-auth-cache</option> option:</para>
        <screen>
$ svn commit -F log_msg.txt --no-auth-cache
Authentication realm: &lt;svn://host.example.com:3690&gt; example realm
Username:  joe
Password for 'joe':

Adding         newfile
Transmitting file data .
Committed revision 2324.

# password was not cached, so a second commit still prompts us

$ svn delete newfile
$ svn commit -F new_msg.txt
Authentication realm: &lt;svn://host.example.com:3690&gt; example realm
Username:  joe
&#x2026;
</screen>
        <para>Or, if you want to disable credential caching permanently,
        you can edit the <filename>config</filename> file in your
        runtime configuration area, and set the
        <option>store-auth-creds</option> option to
        <literal>no</literal>.  This will prevent the storing of
        credentials used in any Subversion interactions you perform on
        the affected computer.  This can be extended to cover all
        users on the computer, too, by modifying the system-wide
        runtime configuration area (described in <xref linkend="svn.advanced.confarea.layout"/>).</para>
        <screen>
[auth]
store-auth-creds = no
</screen>
        <para>Sometimes users will want to remove specific credentials
        from the disk cache.  To do this, you need to navigate into
        the <filename>auth/</filename> area and manually delete the
        appropriate cache file.  Credentials are cached in individual
        files;  if you look inside each file, you will see keys and
        values.  The <literal>svn:realmstring</literal> key describes
        the particular server realm that the file is associated
        with:</para>
        <screen>
$ ls ~/.subversion/auth/svn.simple/
5671adf2865e267db74f09ba6f872c28
3893ed123b39500bca8a0b382839198e
5c3c22968347b390f349ff340196ed39

$ cat ~/.subversion/auth/svn.simple/5671adf2865e267db74f09ba6f872c28

K 8
username
V 3
joe
K 8
password
V 4
blah
K 15
svn:realmstring
V 45
&lt;https://svn.domain.com:443&gt; Joe's repository
END
</screen>
        <para>Once you have located the proper cache file, just delete
        it.</para>
        <para>One last word about <command>svn</command>'s
        authentication behavior, specifically regarding the
        <option>--username</option> and <option>--password</option>
        options.  Many client subcommands accept these options, but it
        is important to understand using these options does
        <emphasis>not</emphasis> automatically send credentials to the
        server.  As discussed earlier, the server <quote>pulls</quote>
        credentials from the client when it deems necessary; the
        client cannot <quote>push</quote> them at will.  If a username
        and/or password are passed as options, they will only be
        presented to the server if the server requests them.
        <footnote><para>Again, a common mistake is to misconfigure a
           server so that it never issues an authentication challenge.
           When users pass <option>--username</option> and
           <option>--password</option> options to the client, they're
           surprised to see that they're never used, i.e. new revisions
           still appear to have been committed
           anonymously!</para></footnote>

        These options are typically used to authenticate as a
        different user than Subversion would have chosen by default
        (such as your system login name), or when trying to avoid
        interactive prompting (such as when calling
        <command>svn</command> from a script).</para>
        <para>Here is a final summary that describes how a Subversion
        client behaves when it receives an authentication
        challenge.</para>
        <orderedlist inheritnum="ignore" continuation="restarts">
          <listitem>
            <para>First, the client checks whether the user specified
            any credentials as command-line options
            (<option>--username</option> and/or
            <option>--password</option>).  If not, or if these options
            fail to authenticate successfully, then</para>
          </listitem>
          <listitem>
            <para>the client looks up the server's hostname, port, and realm in
            the runtime <filename>auth/</filename> area, to see if the
            user already has the appropriate credentials cached.  If
            not, or if the cached credentials fail to authenticate,
            then</para>
          </listitem>
          <listitem>
            <para>finally, the client resorts to prompting the user
            (unless instructed not to do so via the
            <option>--non-interactive</option> option or its
            client-specific equivalents).</para>
          </listitem>
        </orderedlist>
        <para>If the client successfully authenticates by any of the
        methods listed above, it will attempt to cache the credentials
        on disk (unless the user has disabled this behavior, as
        mentioned earlier).</para>
      </section>
    </section>
  </chapter>
  <!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
  <chapter xml:id="svn.branchmerge">
    <info>
      <title>Branching and Merging</title>
    </info>
    <blockquote>
      <attribution>Confucius</attribution>
      <para>
        <quote>&#x541B;&#x5B50;&#x52A1;&#x672C;
      (It is upon the Trunk that a gentleman works.)</quote>
      </para>
    </blockquote>
    <para>Branching, tagging, and merging are concepts common to
    almost all version control systems.  If you're not familiar with
    these ideas, we provide a good introduction in this chapter.  If
    you are familiar, then hopefully you'll find it interesting to
    see how Subversion implements these ideas.</para>
    <para>Branching is a fundamental part of version control.  If
    you're going to allow Subversion to manage your data, then this
    is a feature you'll eventually come to depend on.  This chapter
    assumes that you're already familiar with Subversion's basic
    concepts (<xref linkend="svn.basic"/>).</para>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.branchmerge.whatis">
      <info>
        <title>What's a Branch?</title>
      </info>
      <para>Suppose it's your job to maintain a document for a division
      in your company, a handbook of some sort.  One day a different
      division asks you for the same handbook, but with a few parts
      <quote>tweaked</quote> for them, since they do things slightly
      differently.</para>
      <para>What do you do in this situation?  You do the obvious thing:
      you make a second copy of your document, and begin maintaining
      the two copies separately.  As each department asks you to make
      small changes, you incorporate them into one copy or the
      other.</para>
      <para>You often want to make the same change to both copies.  For
      example, if you discover a typo in the first copy, it's very
      likely that the same typo exists in the second copy.  The two
      documents are almost the same, after all; they only differ in
      small, specific ways.</para>
      <para>This is the basic concept of a
      <firstterm>branch</firstterm>&#x2014;namely, a line of
      development that exists independently of another line, yet still
      shares a common history if you look far enough back in time.  A
      branch always begins life as a copy of something, and moves on
      from there, generating its own history (see <xref linkend="svn.branchmerge.whatis.dia-1"/>).</para>
      <figure xml:id="svn.branchmerge.whatis.dia-1">
        <info>
          <title>Branches of development</title>
        </info>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/ch04dia1.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>Subversion has commands to help you maintain parallel
      branches of your files and directories.  It allows you to create
      branches by copying your data, and remembers that the copies are
      related to one another.  It also helps you duplicate changes
      from one branch to another.  Finally, it can make portions of
      your working copy reflect different branches, so that you can
      <quote>mix and match</quote> different lines of development in
      your daily work.</para>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.branchmerge.using">
      <info>
        <title>Using Branches</title>
      </info>
      <para>At this point, you should understand how each commit creates
      an entire new filesystem tree (called a <quote>revision</quote>)
      in the repository.  If not, go back and read about revisions in
      <xref linkend="svn.basic.in-action.revs"/>.</para>
      <para>For this chapter, we'll go back to the same example from
      <xref linkend="svn.basic"/>.  Remember that you and your
      collaborator, Sally, are sharing a repository that contains two
      projects, <filename>paint</filename> and
      <filename>calc</filename>.  Notice that in <xref linkend="svn.branchmerge.using.dia-1"/>, however, each project
      directory now contains subdirectories named
      <filename>trunk</filename> and <filename>branches</filename>.
      The reason for this will soon become clear.</para>
      <figure xml:id="svn.branchmerge.using.dia-1">
        <info>
          <title>Starting repository layout</title>
        </info>
        <mediaobject>
          <imageobject>
            <imagedata fileref="images/ch04dia2.png"/>
          </imageobject>
        </mediaobject>
      </figure>
      <para>As before, assume that Sally and you both have working
      copies of the <quote>calc</quote> project.  Specifically, you
      each have a working copy of <filename>/calc/trunk</filename>.
      All the files for the project are in this subdirectory rather
      than in <filename>/calc</filename> itself, because your team has
      decided that <filename>/calc/trunk</filename> is where the
      <quote>main line</quote> of development is going to take
      place.</para>
      <para>Let's say that you've been given the task of implementing a
      large software feature.  It will take a long time to write, and
      will affect all the files in the project.  The immediate problem
      is that you don't want to interfere with Sally, who is in the
      process of fixing small bugs here and there.  She's depending on
      the fact that the latest version of the project (in
      <filename>/calc/trunk</filename>) is always usable.  If you
      start committing your changes bit-by-bit, you'll surely break
      things for Sally (and other team members as well.)</para>
      <para>One strategy is to crawl into a hole: you and Sally can stop
      sharing information for a week or two.  That is, start gutting
      and reorganizing all the files in your working copy, but don't
      commit or update until you're completely finished with the task.
      There are a number of problems with this, though.  First, it's
      not very safe.  Most people like to save their work to the
      repository frequently, should something bad accidentally happen
      to their working copy.  Second, it's not very flexible.  If you
      do your work on different computers (perhaps you have a working
      copy of <filename>/calc/trunk</filename> on two different
      machines), you'll need to manually copy your changes back and
      forth, or just do all the work on a single computer.  By that
      same token, it's difficult to share your changes-in-progress
      with anyone else.  A common software development <quote>best
      practice</quote> is to allow your peers to review your work as
      you go.  If nobody sees your intermediate commits, you lose
      potential feedback, and may end up going down the wrong path for
      weeks before another person on your team notices.  Finally, when
      you're finished with all your changes, you might find it very
      difficult to re-merge your final work with the rest of the
      company's main body of code.  Sally (or others) may have made
      many other changes in the repository that are difficult to
      incorporate into your working copy&#x2014;especially if you
      run <command>svn update</command> after weeks of
      isolation.</para>
      <para>The better solution is to create your own branch, or line of
      development, in the repository.  This allows you to save your
      half-broken work frequently without interfering with others, yet
      you can still selectively share information with your
      collaborators.  You'll see exactly how this works as we go.
      </para>
      <!-- =============================================================== -->
      <section xml:id="svn.branchmerge.using.create">
        <info>
          <title>Creating a Branch</title>
        </info>
        <para>Creating a branch is very simple&#x2014;you make a copy of
        the project in the repository using the <command>svn
        copy</command> command.  Subversion is not only able to copy
        single files, but whole directories as well.  In this case,
        you want to make a copy of the
        <filename>/calc/trunk</filename> directory.  Where should the
        new copy live?  Wherever you wish&#x2014;it's a matter of
        project policy.  Let's say that your team has a policy of
        creating branches in the <filename>/calc/branches</filename>
        area of the repository, and you want to name your branch
        <literal>my-calc-branch</literal>.  You'll want to create a
        new directory,
        <filename>/calc/branches/my-calc-branch</filename>, which
        begins its life as a copy of
        <filename>/calc/trunk</filename>.</para>
        <para>At this point, you might have seen <command>svn
        copy</command> used to copy one file to another within a
        working copy.  But it can also be used to do
        a <quote>remote</quote> copy entirely within the repository.
        Just copy one URL to another:</para>
        <screen>
$ svn copy http://svn.example.com/repos/calc/trunk \
           http://svn.example.com/repos/calc/branches/my-calc-branch \
      -m "Creating a private branch of /calc/trunk."

Committed revision 341.
</screen>
        <para>This command causes a near-instantaneous commit in the
        repository, creating a new directory in revision 341.  The new
        directory is a copy of <filename>/calc/trunk</filename>.  This
        is shown in
        <xref linkend="svn.branchmerge.using.create.dia-1"/>.
        <footnote><para>Subversion does not support copying between different
        repositories.  When using URLs with <command>svn
        copy</command> or <command>svn move</command>, you can only
        copy items within the same repository.</para></footnote>

        While it's also possible to create a branch by
        using <command>svn copy</command> to duplicate a directory
        within the working copy, this technique isn't recommended.  It
        can be quite slow, in fact!  Copying a directory on the
        client-side is a linear-time operation, in that it actually
        has to duplicate every file and subdirectory on local disk.
        Copying a directory on the server, however, is a constant-time
        operation, and it's the way most people create
        branches.</para>
        <figure xml:id="svn.branchmerge.using.create.dia-1">
          <info>
            <title>Repository with new copy</title>
          </info>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/ch04dia3.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <sidebar>
          <info>
            <title>Cheap Copies</title>
          </info>
          <para>Subversion's repository has a special design.  When you
          copy a directory, you don't need to worry about the
          repository growing huge&#x2014;Subversion doesn't actually
          duplicate any data.  Instead, it creates a new directory
          entry that points to an <emphasis>existing</emphasis> tree.
          If you're an experienced Unix user, you'll recognize this as
          the same concept behind a hard-link.  As further changes are
          made to files and directories beneath the copied directory,
          Subversion continues to employ this hard-link concept where
          it can.  It only duplicates data when it is necessary to
          disambiguate different versions of objects.</para>
          <para>This is why you'll often hear Subversion users talk
          about <quote>cheap copies</quote>.  It doesn't matter how
          large the directory is&#x2014;it takes a very tiny, constant
          amount of time and space to make a copy of it.  In fact,
          this feature is the basis of how commits work in Subversion:
          each revision is a <quote>cheap copy</quote> of the previous
          revision, with a few items lazily changed within.  (To read
          more about this, visit Subversion's website and read about
          the <quote>bubble up</quote> method in Subversion's design
          documents.)</para>
          <para>Of course, these internal mechanics of copying and
          sharing data are hidden from the user, who simply sees
          copies of trees.  The main point here is that copies are
          cheap, both in time and space.  If you create a branch
          entirely within the repository (by running <command>svn copy
          URL1 URL2</command>), it's a quick, constant-time operation.
          Make branches as often as you want.</para>
        </sidebar>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.branchmerge.using.work">
        <info>
          <title>Working with Your Branch</title>
        </info>
        <para>Now that you've created a branch of the project, you can
        check out a new working copy to start using it:</para>
        <screen>
$ svn checkout http://svn.example.com/repos/calc/branches/my-calc-branch
A  my-calc-branch/Makefile
A  my-calc-branch/integer.c
A  my-calc-branch/button.c
Checked out revision 341.
</screen>
        <para>There's nothing special about this working copy; it simply
        mirrors a different directory in the repository.  When you
        commit changes, however, Sally won't see them when she
        updates, because her working copy is of
        <filename>/calc/trunk</filename>.  (Be sure to read <xref linkend="svn.branchmerge.switchwc"/> later in this chapter: the
        <command>svn switch</command> command is an alternate way of
        creating a working copy of a branch.)</para>
        <para>Let's pretend that a week goes by, and the following
        commits happen:</para>
        <itemizedlist>
          <listitem>
            <para>
          You make a change to
          <filename>/calc/branches/my-calc-branch/button.c</filename>,
          which creates revision 342.</para>
          </listitem>
          <listitem>
            <para>
          You make a change to
          <filename>/calc/branches/my-calc-branch/integer.c</filename>,
          which creates revision 343.</para>
          </listitem>
          <listitem>
            <para>
          Sally makes a change to
          <filename>/calc/trunk/integer.c</filename>, which creates
          revision 344.</para>
          </listitem>
        </itemizedlist>
        <para>There are now two independent lines of development, shown
        in <xref linkend="svn.branchmerge.using.work.dia-1"/>, happening on
        <filename>integer.c</filename>.</para>
        <figure xml:id="svn.branchmerge.using.work.dia-1">
          <info>
            <title>The branching of one file's history</title>
          </info>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/ch04dia4.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>Things get interesting when you look at the history of
        changes made to your copy of
        <filename>integer.c</filename>:</para>
        <screen>
$ pwd
/home/user/my-calc-branch

$ svn log -v integer.c
------------------------------------------------------------------------
r343 | user | 2002-11-07 15:27:56 -0600 (Thu, 07 Nov 2002) | 2 lines
Changed paths:
   M /calc/branches/my-calc-branch/integer.c

* integer.c:  frozzled the wazjub.

------------------------------------------------------------------------
r341 | user | 2002-11-03 15:27:56 -0600 (Thu, 07 Nov 2002) | 2 lines
Changed paths:
   A /calc/branches/my-calc-branch (from /calc/trunk:340)

Creating a private branch of /calc/trunk.

------------------------------------------------------------------------
r303 | sally | 2002-10-29 21:14:35 -0600 (Tue, 29 Oct 2002) | 2 lines
Changed paths:
   M /calc/trunk/integer.c

* integer.c:  changed a docstring.

------------------------------------------------------------------------
r98 | sally | 2002-02-22 15:35:29 -0600 (Fri, 22 Feb 2002) | 2 lines
Changed paths:
   M /calc/trunk/integer.c

* integer.c:  adding this file to the project.

------------------------------------------------------------------------
</screen>
        <para>Notice that Subversion is tracing the history of your
        branch's <filename>integer.c</filename> all the way back
        through time, even traversing the point where it was copied.
        It shows the creation of the branch as an event in the
        history, because <filename>integer.c</filename> was implicitly
        copied when all of <filename>/calc/trunk/</filename> was
        copied.  Now look what happens when Sally runs the same
        command on her copy of the file:</para>
        <screen>
$ pwd
/home/sally/calc

$ svn log -v integer.c
------------------------------------------------------------------------
r344 | sally | 2002-11-07 15:27:56 -0600 (Thu, 07 Nov 2002) | 2 lines
Changed paths:
   M /calc/trunk/integer.c

* integer.c:  fix a bunch of spelling errors.

------------------------------------------------------------------------
r303 | sally | 2002-10-29 21:14:35 -0600 (Tue, 29 Oct 2002) | 2 lines
Changed paths:
   M /calc/trunk/integer.c

* integer.c:  changed a docstring.

------------------------------------------------------------------------
r98 | sally | 2002-02-22 15:35:29 -0600 (Fri, 22 Feb 2002) | 2 lines
Changed paths:
   M /calc/trunk/integer.c

* integer.c:  adding this file to the project.

------------------------------------------------------------------------
</screen>
        <para>Sally sees her own revision 344 change, but not the change
        you made in revision 343.  As far as Subversion is concerned,
        these two commits affected different files in different
        repository locations.  However, Subversion
        <emphasis>does</emphasis> show that the two files share a
        common history.  Before the branch-copy was made in revision
        341, they used to be the same file.  That's why you and Sally
        both see the changes made in revisions 303 and 98.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.branchmerge.using.concepts">
        <info>
          <title>The Key Concepts Behind Branching</title>
        </info>
        <para>There are two important lessons that you should remember
        from this section.  First, Subversion has no internal concept
        of a branch&#x2014;it only knows how to make copies.  When you
        copy a directory, the resulting directory is only
        a <quote>branch</quote> because <emphasis>you</emphasis>
        attach that meaning to it.  You may think of the directory
        differently, or treat it differently, but to Subversion it's
        just an ordinary directory that happens to carry some extra
        historical information.</para>
        <para>Second, because of this copy mechanism, Subversion's
        branches exist as <emphasis>normal filesystem
        directories</emphasis> in the repository.  This is different
        from other version control systems, where branches are
        typically defined by adding
        extra-dimensional <quote>labels</quote> to collections of
        files.  The location of your branch directory doesn't matter
        to Subversion.  Most teams follow a convention of putting all
        branches into a <filename>/branches</filename> directory, but
        you're free to invent any policy you wish.</para>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.branchmerge.basicmerging">
      <info>
        <title>Basic Merging</title>
      </info>
      <para>Now you and Sally are working on parallel branches of the
      project: you're working on a private branch, and Sally is
      working on the <firstterm>trunk</firstterm>, or main line of
      development.</para>
      <para>For projects that have a large number of contributors, it's
      common for most people to have working copies of the trunk.
      Whenever someone needs to make a long-running change that is
      likely to disrupt the trunk, a standard procedure is to create a
      private branch and commit changes there until all the work is
      complete.</para>
      <para>So, the good news is that you and Sally aren't interfering
      with each other.  The bad news is that it's very easy to drift
      <emphasis>too</emphasis> far apart.  Remember that one of the
      problems with the <quote>crawl in a hole</quote> strategy is
      that by the time you're finished with your branch, it may be
      near-impossible to merge your changes back into the trunk
      without a huge number of conflicts.</para>
      <para>Instead, you and Sally might continue to share changes as
      you work.  It's up to you to decide which changes are worth
      sharing; Subversion gives you the ability to selectively
      <quote>copy</quote> changes between branches.  And when you're
      completely finished with your branch, your entire set of branch
      changes can be copied back into the trunk.  In Subversion
      terminology, the general act of replicating changes from one
      branch to another is called <firstterm>merging</firstterm>, and
      is performed using various invocations of the <command>svn
      merge</command> command.</para>
      <para>In the examples that follow, we're assuming that both your
      Subversion client and server are running Subversion 1.5 (or
      later).  If either client or server is older than version 1.5,
      then things are more complicated: the system won't track changes
      automatically, and you'll have to use <quote>manual</quote>
      methods to achieve similar results.  (See
      <xref linkend="svn.branchmerge.advanced"/>.)</para>
      <!-- =============================================================== -->
      <section xml:id="svn.branchemerge.basicmerging.stayinsync">
        <info>
          <title>Keeping a Branch in Sync</title>
        </info>
        <para>Continuing with our running example, let's suppose that a
        week has passed since you started working on your private
        branch.  Your new feature isn't finished yet, but at the same
        time you know that other people on your team have continued to
        make important changes in the
        project's <filename>/trunk</filename>.  It's in your best
        interest to replicate those changes to your own branch, just
        to make sure they mesh well with your changes.  In fact, this
        is a best practice: by frequently keeping your branch in sync
        with the main development line, it helps
        prevent <quote>surprise</quote> conflicts when it comes time
        for you to fold your changes back into the trunk.</para>
        <para>Subversion is aware of the history of your branch, and
        knows when it divided away from the trunk.  To replicate the
        latest, greatest trunk changes to your branch, simply
        run:</para>
        <screen>
$ pwd
/home/user/my-calc-branch

$ svn merge http://svn.example.com/repos/calc/trunk
--- Merging r345 through r356 into '.':
U  button.c
U  integer.c
</screen>
        <para>Your branch working copy now contains new local
        modifications, and these edits are duplications of all of the
        changes that have happened on the trunk since you first
        created your branch:</para>
        <screen>
$ svn status
M  button.c
M  integer.c
</screen>
        <para>At this point, the wise thing to do is look at the changes
        carefully with <command>svn diff</command>, then build and
        test your branch.  You might need to resolve some conflicts
        (just as you do with <command>svn update</command>), or
        possibly make some small edits to get things working properly.
        (Remember, just because there are
        no <emphasis>syntactic</emphasis> conflicts doesn't mean there
        aren't any <emphasis>semantic</emphasis> conflicts!)  If you
        encounter serious problems, you can always abort the local
        changes by running <command>svn revert</command> and start a
        long <quote>what's going on?</quote> discussion with your
        collaborators.  If things look good, however, then you can
        submit your changes into the repository:</para>
        <screen>
$ svn commit -m "Merged /trunk to /my-calc-branch."
Sending        button.c
Sending        integer.c
Transmitting file data ..
Committed revision 357.
</screen>
        <para>At this point, your private branch is now <quote>in
          sync</quote> with the trunk, so you can rest easier knowing
          that as you continue to work in isolation, you're not
          drifting <emphasis>too</emphasis> far away from what
          everyone else is doing.</para>
        <sidebar>
          <info>
            <title>Why Not Use Patches Instead?</title>
          </info>
          <para>A question may be on your mind, especially if you're a
          Unix user: why bother to use <command>svn merge</command> at
          all?  Why not simply use the operating system's
          <command>patch</command> command to accomplish the same job?
          For example:</para>
          <screen>
$ cd my-calc-branch
$ svn diff -r 341:HEAD http://svn.example.com/repos/calc/trunk &gt; patchfile
$ patch -p0  &lt; patchfile
Patching file integer.c using Plan A...
Hunk #1 succeeded at 147.
Hunk #2 succeeded at 164.
Hunk #3 succeeded at 241.
Hunk #4 succeeded at 249.
done
</screen>
          <para>In this particular case, yes, there really is no
          difference.  But <command>svn merge</command> has special
          abilities that surpass the <command>patch</command> program.
          The file format used by <command>patch</command> is quite
          limited; it's only able to tweak file contents.  There's no
          way to represent changes to <emphasis>trees</emphasis>, such
          as the addition, removal, or renaming of files and
          directories.  Nor can the <command>patch</command> program
          notice changes to properties.  If Sally's change had,
          say, added a new directory, the output of <command>svn
          diff</command> wouldn't have mentioned it at
          all.  <command>svn diff</command> only outputs the limited
          patch-format, so there are some ideas it simply can't
          express.</para>
          <para>The <command>svn merge</command> command, however, can
          express changes in tree structure and properties by directly
          applying them to your working copy.  Even more important,
          this command records the changes that have been duplicated
          to your branch, so that Subversion is aware of exactly which
          changes exist in each location (see
          <xref linkend="svn.branchmerge.basicmerging.basicmergetracking.mergeinfo"/>.)
          This is a critical feature that makes branch management
          usable; without it, users would have to manually keep notes
          on which sets of changes have or haven't been merged
          yet.</para>
        </sidebar>
        <para>Suppose, now, that another week has passed.  You've
        committed more changes to your branch, and your comrades have
        continued to improve the trunk as well.  Once again, you'd
        like to replicate the latest trunk changes to your branch and
        bring yourself in sync.  Just run the same merge command
        again!</para>
        <screen>
$ svn merge http://svn.example.com/repos/calc/trunk
--- Merging r357 through r380 into '.':
U  integer.c
U  Makefile
A  README
</screen>
        <para>Subversion knows which trunk changes you've already
        replicated to your branch, so it carefully only replicates
        those changes you don't yet have.  Once again, you'll have to
        build, test, and <command>svn commit</command> the local
        modifications to your branch.</para>
        <para>What happens when you finally finish your work, though?
        Your new feature is finished, and you're ready to merge your
        branch changes back to the trunk (so your team can enjoy the
        bounty of your labor.)  The process is simple.  First, bring
        your branch in sync with trunk again, just as you've been
        doing all along:</para>
        <screen>
$ svn merge http://svn.example.com/repos/calc/trunk
--- Merging r381 through r385 into '.':
U  button.c
U  README

$ # build, test, ...

$ svn commit -m "Final merge of trunk changes to my-calc-branch."
Sending        button.c
Sending        README
Transmitting file data ..
Committed revision 390.
</screen>
        <para>Now, you use <command>svn merge</command> to replicate
        your branch changes back into the trunk.  To do this, you'll
        need a working copy of <filename>/trunk</filename>.  You can
        do this by either doing an <command>svn checkout</command>,
        dredging up an old trunk working copy from somewhere on your
        disk, or by using <command>svn switch</command> (see
        <xref linkend="svn.branchmerge.switchwc"/>.)  Then
        invoke <command>svn merge</command> within your trunk working
        copy:</para>
        <screen>
$ pwd
/home/user/calc-trunk

$ svn merge http://svn.example.com/repos/calc/branches/my-calc-branch
--- Merging r341 through r390 into '.':
U  button.c
U  integer.c
U  Makefile

$ # build, test, verify, ...

$ svn commit -m "Merge my-calc-branch back into trunk!"
Sending        button.c
Sending        integer.c
Sending        Makefile
Transmitting file data ..
Committed revision 391.
</screen>
        <para>Congratulations, your branch has now been re-merged back
        into the main line of development.  You'll no longer need your
        branch at this point anymore, so you can do some basic
        housecleaning in the repository:</para>
        <screen>
$ svn delete http://svn.example.com/repos/calc/branches/my-calc-branch
Committed revision 392.
</screen>
        <para>But wait!  Isn't the history of that branch valuable?
        What if somebody wants to audit the evolution of your feature
        someday, and look at all your commits?  No need to worry.
        Remember that even though your branch is no longer visible in
        the <filename>/branches</filename> directory, its existence is
        still an immutable part of the repository's history.  A
        simple <command>svn log</command> command on
        the <filename>/branches</filename> URL will show the entire
        history of your branch.  Your branch can even be resurrected
        at some point, should you desire.  (See
        <xref linkend="svn.branchmerge.advanced.resurrect"/>.)</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.branchemerge.basicmerging.basicmergetracking">
        <info>
          <title>Basic Merge Tracking</title>
        </info>
        <para>###TODO: set expectations on what gets tracked and what
      doesn't.</para>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.branchmerge.basicmerging.basicmergetracking.mergeinfo">
          <info>
            <title>Mergeinfo</title>
          </info>
          <para>###TODO: explain svn:mergeinfo prop and 'svn mergeinfo'
          command, so users get a general sense of how the system is
          tracking changes.</para>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.branchmerge.basicmerging.basicmergetracking.previews">
          <info>
            <title>Previewing Merges</title>
          </info>
          <para>It's a best practice to do your merge into a working
          copy that has <emphasis>no</emphasis> local edits and has
          been recently updated.  If your working copy
          isn't <quote>clean</quote> in these ways, you can run into
          some headaches.</para>
          <para>Assuming your working copy is tidy, merging isn't a
          particularly high-risk operation.  If you get the merge
          wrong the first time, simply <command>svn revert</command>
          the changes and try again.</para>
          <para>If you've merged into a working copy that already has
          local modifications, the changes applied by a merge will be
          mixed with your pre-existing ones, and running
          <command>svn revert</command> is no longer an option.  The
          two sets of changes may be impossible to separate.</para>
          <para>In cases like this, people take comfort in being able to
          predict or examine merges before they happen.  One simple
          way to do that is to run <command>svn diff</command> with
          the same arguments you plan to pass to <command>svn
          merge</command>, as we already showed in our first example
          of merging.  Another method of previewing is to pass the
          <option>--dry-run</option> option to the merge
          command:</para>
          <screen>
$ svn merge --dry-run http://svn.example.com/repos/calc/trunk
U  integer.c

$ svn status
#  nothing printed, working copy is still unchanged.
</screen>
          <para>The <option>--dry-run</option> option doesn't actually
          apply any local changes to the working copy.  It only shows
          status codes that <emphasis>would</emphasis> be printed in a
          real merge.  It's useful for getting a <quote>high
          level</quote> preview of the potential merge, for those
          times when running <command>svn diff</command> gives too
          much detail.</para>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.branchmerge.basicmerging.basicmergetracking.layered">
          <info>
            <title>Multi-Layered Merges</title>
          </info>
          <para>###TODO: explain how a merge can apply successive
          patches, and that any intermediate conflicts *must* be
          resolved (for now, at least.)</para>
        </section>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.branchmerge.advanced">
      <info>
        <title>Advanced Merging</title>
      </info>
      <para>###TODO: Intro: talk about how and why advanced users can
      pass specific revision numbers to 'svn merge'.</para>
      <!-- =============================================================== -->
      <section xml:id="svn.branchmerge.copychanges.specific">
        <info>
          <title>Copying Specific Changes</title>
        </info>
        <para>Let's go back in time and imagine that you haven't yet
        merged your private branch back to the trunk. ... ### TODO:
        explain why we'd want to cherrypick one change, and let's say
        it's r344:</para>
        <para>Assume you get word that Sally made an interesting change
        to <filename>integer.c</filename> on the trunk.  ###TODO: blah
        blah: If you look at Sally's log message for revision 344, you
        can see that she fixed some spelling errors.  No doubt, your
        copy of the same file still has the same spelling errors.
        It's likely that your future changes to this file will be
        affecting the same areas that have the spelling errors, so
        you're in for some potential conflicts when you merge your
        branch someday.  It's better, then, to receive Sally's change
        now, <emphasis>before</emphasis> you start working too heavily
        in the same places.</para>
        <screen>
$ svn diff -c 344 http://svn.example.com/repos/calc/trunk

Index: integer.c
===================================================================
--- integer.c	(revision 343)
+++ integer.c	(revision 344)
@@ -147,7 +147,7 @@
     case 6:  sprintf(info-&gt;operating_system, "HPFS (OS/2 or NT)"); break;
     case 7:  sprintf(info-&gt;operating_system, "Macintosh"); break;
     case 8:  sprintf(info-&gt;operating_system, "Z-System"); break;
-    case 9:  sprintf(info-&gt;operating_system, "CPM"); break;
+    case 9:  sprintf(info-&gt;operating_system, "CP/M"); break;
     case 10:  sprintf(info-&gt;operating_system, "TOPS-20"); break;
     case 11:  sprintf(info-&gt;operating_system, "NTFS (Windows NT)"); break;
     case 12:  sprintf(info-&gt;operating_system, "QDOS"); break;
@@ -164,7 +164,7 @@
     low = (unsigned short) read_byte(gzfile);  /* read LSB */
     high = (unsigned short) read_byte(gzfile); /* read MSB */
     high = high &lt;&lt; 8;  /* interpret MSB correctly */
-    total = low + high; /* add them togethe for correct total */
+    total = low + high; /* add them together for correct total */

     info-&gt;extra_header = (unsigned char *) my_malloc(total);
     fread(info-&gt;extra_header, total, 1, gzfile);
@@ -241,7 +241,7 @@
      Store the offset with ftell() ! */

   if ((info-&gt;data_offset = ftell(gzfile))== -1) {
-    printf("error: ftell() retturned -1.\n");
+    printf("error: ftell() returned -1.\n");
     exit(1);
   }

@@ -249,7 +249,7 @@
   printf("I believe start of compressed data is %u\n", info-&gt;data_offset);
   #endif

-  /* Set postion eight bytes from the end of the file. */
+  /* Set position eight bytes from the end of the file. */

   if (fseek(gzfile, -8, SEEK_END)) {
     printf("error: fseek() returned non-zero\n");
</screen>
        <para>The <command>svn merge</command> command is almost exactly
        the same.  Instead of printing the differences to your
        terminal, however, it applies them directly to your working
        copy as <emphasis>local modifications</emphasis>:</para>
        <screen>
$ svn merge -c 344 http://svn.example.com/repos/calc/trunk
U  integer.c

$ svn status
M  integer.c
</screen>
        <para>The output of <command>svn merge</command> shows that your
        copy of <filename>integer.c</filename> was patched.  It now
        contains Sally's change&#x2014;the change has been
        <quote>copied</quote> from the trunk to your working copy of
        your private branch, and now exists as a local modification.
        At this point, it's up to you to review the local modification
        and make sure it works correctly.</para>
        <para>In another scenario, it's possible that things may not have
        gone so well, and that <filename>integer.c</filename> may have
        entered a conflicted state.  You might need to resolve the
        conflict using standard procedures (see <xref linkend="svn.tour"/>), or if you decide that the merge was a
        bad idea altogether, simply give up and <command>svn
        revert</command> the local change.</para>
        <para>But assuming that you've reviewed the merged change, you can
        <command>svn commit</command> the change as usual.  At that
        point, the change has been merged into your repository branch.
        In version control terminology, this act of copying changes
        between branches is commonly called
        <firstterm>porting</firstterm> changes.</para>
        <para>When you commit the local modification, it's a good
        practice to mention that you're porting a specific change from
        one branch to another.  For example:</para>
        <screen>
$ svn commit -m "integer.c: ported r344 (spelling fixes) from trunk."
Sending        integer.c
Transmitting file data .
Committed revision 360.
</screen>
        <para>A word of warning: while <command>svn diff</command> and
        <command>svn merge</command> are very similar in concept, they
        do have different syntax in many cases.  Be sure to read about
        them in <xref linkend="svn.ref"/> for details, or ask
        <command>svn help</command>.  For example, <command>svn
        merge</command> requires a working-copy path as a target, i.e.
        a place where it should apply the tree-changes.  If the target
        isn't specified, it assumes you are trying to perform one of
        the following common operations:</para>
        <orderedlist inheritnum="ignore" continuation="restarts">
          <listitem>
            <para>You want to merge directory changes into your current
            working directory.</para>
          </listitem>
          <listitem>
            <para>You want to merge the changes in a specific file into
            a file by the same name which exists in your current working
            directory.</para>
          </listitem>
        </orderedlist>
        <para>If you are merging a directory and haven't specified a
        target path, <command>svn merge</command> assumes the first case
        above and tries to apply the changes into your current
        directory.  If you are merging a file, and that file (or a file
        by the same name) exists in your current working directory,
        <command>svn merge</command> assumes the second case and tries
        to apply the changes to a local file with the same name.</para>
        <para>If you want changes applied somewhere else, you'll
        need to say so.  For example, if you're sitting in the parent
        directory of your working copy, you'll have to specify the
        target directory to receive the changes:</para>
        <screen>
$ svn merge -c 344 http://svn.example.com/repos/calc/trunk my-calc-branch
U   my-calc-branch/integer.c
</screen>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.branchmerge.advanced.advancedsyntax">
        <info>
          <title>Advanced Merge Syntax</title>
        </info>
        <para>You've now seen some examples of the <command>svn
          merge</command> command, and you're about to see several
          more.  If you're feeling confused about exactly how merging
          works, you're not alone.  Many users (especially those new
          to version control) are initially perplexed about the proper
          syntax of the command, and about how and when the feature
          should be used.  But fear not, this command is actually much
          simpler than you think!  There's a very easy technique for
          understanding exactly how <command>svn merge</command>
          behaves.</para>
        <para>The main source of confusion is the
        <emphasis>name</emphasis> of the command.  The term
        <quote>merge</quote> somehow denotes that branches are
        combined together, or that there's some sort of mysterious
        blending of data going on.  That's not the case.  A better
        name for the command might have been <command>svn
        diff-and-apply</command>, because that's all that happens:
        two repository trees are compared, and the differences are
        applied to a working copy.</para>
        <para>If you're using <command>svn merge</command> to do basic
        copying of changes between branches, it will generally do the
        right thing automatically.  For example, a command like</para>
        <screen>
$ svn merge http://svn.example.com/repos/calc/some-branch
</screen>
        <para>... will attempt to duplicate any changes made
        on <filename>some-branch</filename> into your current working
        directory, which is presumably a working copy that shares some
        historical connection to the branch.  The command is smart
        enough to only duplicate changes that your working copy
        doesn't yet have.  If you repeat this command once a week, it
        will only duplicate the <quote>newest</quote> branch changes
        that happened since you last merged.</para>
        <para>If you choose to use the <command>svn merge</command>
        command in all its full glory by giving it specific revision
        ranges to duplicate, then the command takes three main
        arguments:</para>
        <orderedlist inheritnum="ignore" continuation="restarts">
          <listitem>
            <para>An initial repository tree (often called the
        <firstterm>left side</firstterm> of the
        comparison),</para>
          </listitem>
          <listitem>
            <para>A final repository tree (often called the
        <firstterm>right side</firstterm> of the
        comparison),</para>
          </listitem>
          <listitem>
            <para>A working copy to accept the differences as
        local changes (often called the <firstterm>target</firstterm>
        of the merge).</para>
          </listitem>
        </orderedlist>
        <para>Once these three arguments are specified, the two trees
        are compared, and the resulting differences are applied to the
        target working copy as local modifications.  When the command
        is done, the results are no different than if you had
        hand-edited the files, or run various <command>svn
        add</command> or <command>svn delete</command> commands
        yourself.  If you like the results, you can commit them.  If
        you don't like the results, you can simply <command>svn
        revert</command> all of the changes.</para>
        <para>The syntax of <command>svn merge</command> allows you to
        specify the three necessary arguments rather flexibly.  Here
        are some examples:</para>
        <screen>
$ svn merge http://svn.example.com/repos/branch1@150 \
            http://svn.example.com/repos/branch2@212 \
            my-working-copy

$ svn merge -r 100:200 http://svn.example.com/repos/trunk my-working-copy

$ svn merge -r 100:200 http://svn.example.com/repos/trunk
</screen>
        <para>The first syntax lays out all three arguments explicitly,
        naming each tree in the form <emphasis>URL@REV</emphasis> and
        naming the working copy target.  The second syntax can be used
        as a shorthand for situations when you're comparing two
        different revisions of the same URL.  The last syntax shows
        how the working-copy argument is optional; if omitted, it
        defaults to the current directory.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.branchmerge.advanced.undo">
        <info>
          <title>Undoing Changes</title>
        </info>
        <para>Another common use for <command>svn merge</command> is to
        roll back a change that has already been committed.  Suppose
        you're working away happily on a working copy of
        <filename>/calc/trunk</filename>, and you discover that the
        change made way back in revision 303, which changed
        <filename>integer.c</filename>, is completely wrong.  It never
        should have been committed.  You can use <command>svn
        merge</command> to <quote>undo</quote> the change in your
        working copy, and then commit the local modification to the
        repository.  All you need to do is to specify a
        <emphasis>reverse</emphasis> difference.  (You can do this by
        specifying <option>--revision 303:302</option>, or by an
        equivalent <option>--change -303</option>.)</para>
        <screen>
$ svn merge -c -303 http://svn.example.com/repos/calc/trunk
U  integer.c

$ svn status
M  integer.c

$ svn diff
&#x2026;
# verify that the change is removed
&#x2026;

$ svn commit -m "Undoing change committed in r303."
Sending        integer.c
Transmitting file data .
Committed revision 350.
</screen>
        <para>One way to think about a repository revision is as a
        specific group of changes (some version control systems call
        these <firstterm>changesets</firstterm>).  By using the
        <option>-r</option> option, you can ask <command>svn
        merge</command> to apply a changeset, or whole range of
        changesets, to your working copy.  In our case of undoing a
        change, we're asking <command>svn merge</command> to apply
        changeset #303 to our working copy
        <emphasis>backwards</emphasis>.</para>
        <sidebar>
          <info>
            <title>Subversion and Changesets</title>
          </info>
          <para>Everyone seems to have a slightly different definition
          of <quote>changeset</quote>, or at least a different
          expectation of what it means for a version control system to
          have <quote>changeset features</quote>.  For our purpose,
          let's say that a changeset is just a collection of changes
          with a unique name.  The changes might include textual edits
          to file contents, modifications to tree structure, or tweaks
          to metadata.  In more common speak, a changeset is just a
          patch with a name you can refer to.</para>
          <para>In Subversion, a global revision number N names a tree
          in the repository: it's the way the repository looked after
          the Nth commit.  It's also the name of an implicit
          changeset: if you compare tree N with tree N-1, you can
          derive the exact patch that was committed.  For this reason,
          it's easy to think of <quote>revision N</quote> as not just
          a tree, but a changeset as well.  If you use an issue
          tracker to manage bugs, you can use the revision numbers to
          refer to particular patches that fix bugs&#x2014;for example,
          <quote>this issue was fixed by revision 9238.</quote>.
          Somebody can then run <command>svn log -r9238</command> to
          read about the exact changeset which fixed the bug, and run
          <command>svn diff -c 9238</command> to see the patch
          itself.  And Subversion's <literal>merge</literal> command
          also uses revision numbers.  You can merge specific changesets
          from one branch to another by naming them in the merge
          arguments: <command>svn merge -c 9238</command> would
          merge changeset #9238 into your working copy.</para>
        </sidebar>
        <para>Keep in mind that rolling back a change like this is just
        like any other <command>svn merge</command> operation, so you
        should use <command>svn status</command> and <command>svn
        diff</command> to confirm that your work is in the state you
        want it to be in, and then use <command>svn commit</command>
        to send the final version to the repository.  After
        committing, this particular changeset is no longer reflected
        in the <literal>HEAD</literal> revision.</para>
        <para>Again, you may be thinking: well, that really didn't undo
        the commit, did it?  The change still exists in revision 303.
        If somebody checks out a version of the
        <filename>calc</filename> project between revisions 303 and
        349, they'll still see the bad change, right?</para>
        <para>Yes, that's true.  When we talk about
        <quote>removing</quote> a change, we're really talking about
        removing it from <literal>HEAD</literal>.  The original change
        still exists in the repository's history.  For most
        situations, this is good enough.  Most people are only
        interested in tracking the <literal>HEAD</literal> of a
        project anyway.  There are special cases, however, where you
        really might want to destroy all evidence of the commit.
        (Perhaps somebody accidentally committed a confidential
        document.)  This isn't so easy, it turns out, because
        Subversion was deliberately designed to never lose
        information.  Revisions are immutable trees which build upon
        one another.  Removing a revision from history would cause a
        domino effect, creating chaos in all subsequent revisions and
        possibly invalidating all working copies.
        <footnote><para>The Subversion project has plans, however, to someday
            implement a command that would accomplish the task of
            permanently deleting information.  In the meantime, see
            <xref linkend="svn.reposadmin.maint.tk.svndumpfilter"/>
            for a possible workaround.</para></footnote>
      </para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.branchmerge.advanced.resurrect">
        <info>
          <title>Resurrecting Deleted Items</title>
        </info>
        <para>The great thing about version control systems is that
        information is never lost.  Even when you delete a file or
        directory, it may be gone from the <literal>HEAD</literal>
        revision, but the object still exists in earlier revisions.
        One of the most common questions new users ask is, <quote>How
        do I get my old file or directory back?</quote>.</para>
        <para>The first step is to define
        exactly <emphasis role="bold">which</emphasis> item you're
        trying to resurrect.  Here's a useful metaphor: you can think
        of every object in the repository as existing in a sort of
        two-dimensional coordinate system.  The first coordinate is a
        particular revision tree, and the second coordinate is a path
        within that tree.  So every version of your file or directory
        can be defined by a specific coordinate pair.  (Remember the
        <quote>peg revision</quote> syntax&#x2014;foo.c@224
        &#x2014;mentioned back in
        <xref linkend="svn.advanced.pegrevs"/>.) </para>
        <para>First, you might need to use <command>svn log</command> to
        discover the exact coordinate pair you wish to resurrect.  A
        good strategy is to run <command>svn log
        --verbose</command> in a directory which used to contain your
        deleted item.  The <option>--verbose (-v)</option> option shows a
        list of all changed items in each revision; all you need to do
        is find the revision in which you deleted the file or
        directory.  You can do this visually, or by using another tool
        to examine the log output (via <command>grep</command>, or
        perhaps via an incremental search in an editor).</para>
        <screen>
$ cd parent-dir
$ svn log -v
&#x2026;
------------------------------------------------------------------------
r808 | joe | 2003-12-26 14:29:40 -0600 (Fri, 26 Dec 2003) | 3 lines
Changed paths:
   D /calc/trunk/real.c
   M /calc/trunk/integer.c

Added fast fourier transform functions to integer.c.
Removed real.c because code now in double.c.
&#x2026;
</screen>
        <para>In the example, we're assuming that you're looking for a
        deleted file <filename>real.c</filename>.  By looking through
        the logs of a parent directory, you've spotted that this file
        was deleted in revision 808.  Therefore, the last version of
        the file to exist was in the revision right before that.
        Conclusion: you want to resurrect the path
        <filename>/calc/trunk/real.c</filename> from revision
        807.</para>
        <para>That was the hard part&#x2014;the research.  Now that you
        know what you want to restore, you have two different
        choices.</para>
        <para>One option is to use <command>svn merge</command> to apply
        revision 808 <quote>in reverse</quote>.  (We've already
        discussed how to undo changes, see
        <xref linkend="svn.branchmerge.advanced.undo"/>.)  This
        would have the effect of re-adding <filename>real.c</filename>
        as a local modification.  The file would be scheduled for
        addition, and after a commit, the file would again exist
        in <literal>HEAD</literal>.</para>
        <para>In this particular example, however, this is probably not
        the best strategy.  Reverse-applying revision 808 would not
        only schedule <filename>real.c</filename> for addition, but
        the log message indicates that it would also undo certain
        changes to <filename>integer.c</filename>, which you don't
        want.  Certainly, you could reverse-merge revision 808 and
        then <command>svn revert</command> the local modifications to
        <filename>integer.c</filename>, but this technique doesn't
        scale well.  What if there were 90 files changed in revision
        808?</para>
        <para>A second, more targeted strategy is not to use
        <command>svn merge</command> at all, but rather the
        <command>svn copy</command> command.  Simply copy the exact
        revision and path <quote>coordinate pair</quote> from the
        repository to your working copy:</para>
        <screen>
$ svn copy -r 807 \
           http://svn.example.com/repos/calc/trunk/real.c ./real.c

$ svn status
A  +   real.c

$ svn commit -m "Resurrected real.c from revision 807, /calc/trunk/real.c."
Adding         real.c
Transmitting file data .
Committed revision 1390.
</screen>
        <para>The plus sign in the status output indicates that the item
        isn't merely scheduled for addition, but scheduled for
        addition <quote>with history</quote>.  Subversion remembers
        where it was copied from.  In the future, running <command>svn
        log</command> on this file will traverse back through the
        file's resurrection and through all the history it had prior
        to revision 807.  In other words, this new
        <filename>real.c</filename> isn't really new; it's a direct
        descendant of the original, deleted file.</para>
        <para>Although our example shows us resurrecting a file, note
        that these same techniques work just as well for resurrecting
        deleted directories.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.branchmerge.advanced.manual">
        <info>
          <title>Manually Merging a Branch</title>
        </info>
        <para>###TODO: if basic merge tracking isn't available (client
        or server is older than 1.5), then here is the 'manual' method
        for keeping a private branch in sync with trunk, and how to
        merge it back into trunk:</para>
        <para>To complete our running example, we'll move forward in
        time.  Suppose several days have passed, and many changes have
        happened on both the trunk and your private branch.  Suppose
        that you've finished working on your private branch; the
        feature or bug fix is finally complete, and now you want to
        merge all of your branch changes back into the trunk for
        others to enjoy.</para>
        <para>So how do we use <command>svn merge</command> in this
        scenario?  Remember that this command compares two trees, and
        applies the differences to a working copy.  So to receive the
        changes, you need to have a working copy of the trunk.  We'll
        assume that either you still have your original one lying
        around (fully updated), or that you recently checked out a
        fresh working copy of <filename>/calc/trunk</filename>.</para>
        <para>But which two trees should be compared?  At first glance,
        the answer may seem obvious: just compare the latest trunk
        tree with your latest branch tree.  But beware&#x2014;this
        assumption is <emphasis>wrong</emphasis>, and has burned many
        a new user!  Since <command>svn merge</command> operates like
        <command>svn diff</command>, comparing the latest trunk and 
        branch trees will <emphasis>not</emphasis> merely describe
        the set of changes you made to your branch.  Such a comparison
        shows too many changes: it would not only show the addition of
        your branch changes, but also the <emphasis>removal</emphasis>
        of trunk changes that never happened on your branch.</para>
        <para>To express only the changes that happened on your branch,
        you need to compare the initial state of your branch to its
        final state.  Using <command>svn log</command> on your branch,
        you can see that your branch was created in revision 341.  And
        the final state of your branch is simply a matter of using the
        <literal>HEAD</literal> revision.  That means you want to
        compare revisions 341 and <literal>HEAD</literal> of your
        branch directory, and apply those differences to a working
        copy of the trunk.</para>
        <tip>
          <para>A nice way of finding the revision in which a branch was
          created (the <quote>base</quote> of the branch) is to use the
          <option>--stop-on-copy</option> option to <command>svn
          log</command>.  The log subcommand will normally show every
          change ever made to the branch, including tracing back
          through the copy which created the branch.  So normally,
          you'll see history from the trunk as well.  The
          <option>--stop-on-copy</option> will halt log output as soon
          as <command>svn log</command> detects that its target was
          copied or renamed.</para>
          <para>So in our continuing example,</para>
          <screen>
$ svn log -v --stop-on-copy \
          http://svn.example.com/repos/calc/branches/my-calc-branch
&#x2026;
------------------------------------------------------------------------
r341 | user | 2002-11-03 15:27:56 -0600 (Thu, 07 Nov 2002) | 2 lines
Changed paths:
   A /calc/branches/my-calc-branch (from /calc/trunk:340)

$
</screen>
          <para>As expected, the final revision printed by this command
          is the revision in which <filename>my-calc-branch</filename>
          was created by copying.</para>
        </tip>
        <para>Here's the final merging procedure, then:</para>
        <screen>
$ cd calc/trunk
$ svn update
At revision 405.

$ svn merge -r 341:405 http://svn.example.com/repos/calc/branches/my-calc-branch
U   integer.c
U   button.c
U   Makefile

$ svn status
M   integer.c
M   button.c
M   Makefile

# ...examine the diffs, compile, test, etc...

$ svn commit -m "Merged my-calc-branch changes r341:405 into the trunk."
Sending        integer.c
Sending        button.c
Sending        Makefile
Transmitting file data ...
Committed revision 406.
</screen>
        <para>Again, notice that the commit log message very
        specifically mentions the range of changes that was merged
        into the trunk.  Always remember to do this, because it's
        critical information you'll need later on.</para>
        <para>For example, suppose you decide to keep working on your
        branch for another week, in order to complete an enhancement
        to your original feature or bug fix.  The repository's
        <literal>HEAD</literal> revision is now 480, and you're ready
        to do another merge from your private branch to the trunk.
        But don't want to merge the changes you've already merged
        before; you only want to merge everything <quote>new</quote>
        on your branch since the last time you merged.  The trick is
        to figure out what's new.</para>
        <para>The first step is to run <command>svn log</command> on the
        trunk, and look for a log message about the last time you
        merged from the branch:</para>
        <screen>
$ cd calc/trunk
$ svn log
&#x2026;
------------------------------------------------------------------------
r406 | user | 2004-02-08 11:17:26 -0600 (Sun, 08 Feb 2004) | 1 line

Merged my-calc-branch changes r341:405 into the trunk.
------------------------------------------------------------------------
&#x2026;
</screen>
        <para>Aha!  Since all branch-changes that happened between
        revisions 341 and 405 were previously merged to the trunk as
        revision 406, you now know that you want to merge only the
        branch changes after that&#x2014;by comparing revisions 406 and
        <literal>HEAD</literal>.</para>
        <screen>
$ cd calc/trunk
$ svn update
At revision 480.

# We notice that HEAD is currently 480, so we use it to do the merge:

$ svn merge -r 406:480 http://svn.example.com/repos/calc/branches/my-calc-branch
U   integer.c
U   button.c
U   Makefile

$ svn commit -m "Merged my-calc-branch changes r406:480 into the trunk."
Sending        integer.c
Sending        button.c
Sending        Makefile
Transmitting file data ...
Committed revision 481.
</screen>
        <para>Now the trunk contains the complete second wave of changes
        made to the branch.  At this point, you can either delete your
        branch (we'll discuss this later on), or continue working on
        your branch and repeat this procedure for subsequent
        merges.</para>
      </section>
      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <section xml:id="svn.branchmerge.advanced.mergeconflicts">
        <info>
          <title>Merge Conflicts</title>
        </info>
        <para>Just like the <command>svn update</command> command,
        <command>svn merge</command> applies changes to your working
        copy.  And therefore it's also capable of creating
        conflicts.  The conflicts produced by <command>svn
          merge</command>, however, are sometimes different, and this
        section explains those differences.</para>
        <para>To begin with, assume that your working copy has no
        local edits.  When you <command>svn update</command> to a
        particular revision, the changes sent by the server will
        always apply <quote>cleanly</quote> to your working copy.
        The server produces the delta by comparing two trees: a
        virtual snapshot of your working copy, and the revision tree
        you're interested in.  Because the left-hand side of the
        comparison is exactly equal to what you already have, the
        delta is guaranteed to correctly convert your working copy
        into the right-hand tree.</para>
        <para>But <command>svn merge</command> has no such guarantees
        and can be much more chaotic: the advanced user can ask the
        server to compare <emphasis>any</emphasis> two trees at all,
        even ones that are unrelated to the working copy!  This means
        there's large potential for human error.  Users will sometimes
        compare the wrong two trees, creating a delta that doesn't
        apply cleanly.  <command>svn merge</command> will do its best
        to apply as much of the delta as possible, but some parts may
        be impossible.  Just as the Unix
        <command>patch</command> command sometimes complains about
        <quote>failed hunks</quote>, <command>svn merge</command>
        will complain about <quote>skipped targets</quote>:</para>
        <screen>
        $ svn merge -r 1288:1351 http://svn.example.com/repos/branch
        U  foo.c
        U  bar.c
        Skipped missing target: 'baz.c'
        U  glub.c
        C  glorb.h

        $
      </screen>
        <para>In the previous example it might be the case that
        <filename>baz.c</filename> exists in both snapshots of the
        branch being compared, and the resulting delta wants to
        change the file's contents, but the file doesn't exist in
        the working copy.  Whatever the case, the
        <quote>skipped</quote> message means that the user is most
        likely comparing the wrong two trees; they're the classic
        sign of user error.  When this happens, it's easy to
        recursively revert all the changes created by the merge
        (<command>svn revert --recursive</command>), delete any
        unversioned files or directories left behind after the
        revert, and re-run <command>svn merge</command> with
        different arguments.</para>
        <para>Also notice that the previous example shows a conflict
        happening on <filename>glorb.h</filename>.  We already
        stated that the working copy has no local edits: how can a
        conflict possibly happen?  Again, because the user can use
        <command>svn merge</command> to define and apply any old
        delta to the working copy, that delta may contain textual
        changes that don't cleanly apply to a working file, even if
        the file has no local modifications.</para>
        <para>Another small difference between <command>svn
          update</command> and <command>svn merge</command> are the
        names of the full-text files created when a conflict
        happens.  In <xref linkend="svn.tour.cycle.resolve"/>, we saw
        that an update produces files named
        <filename>filename.mine</filename>,
        <filename>filename.rOLDREV</filename>, and
        <filename>filename.rNEWREV</filename>.  When <command>svn
          merge</command> produces a conflict, though, it creates
        three files named <filename>filename.working</filename>,
        <filename>filename.left</filename>, and
        <filename>filename.right</filename>.  In this case, the
        terms <quote>left</quote> and <quote>right</quote> are
        describing which side of the double-tree comparison the file
        came from.  In any case, these differing names will help you
        distinguish between conflicts that happened as a result of an
        update versus ones that happened as a result of a
        merge.</para>
      </section>
      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <section xml:id="svn.branchmerge.advanced.blockchanges">
        <info>
          <title>Blocking Changes</title>
        </info>
        <para>###TODO:  discuss use of 'svn merge --record-only', give
      example.  Explain the need to differentiate between 'not merged'
      and 'don't want to merge'.  Explain that in 1.5, users need to
      manualy track blocked revisions in a text file or in property.
      A future version of svn will learn to differentiate between the
      two concepts.</para>
      </section>
      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <section xml:id="svn.branchmerge.advanced.logblame">
        <info>
          <title>Logging and Blaming</title>
        </info>
        <para>###TODO:  demonstrate 'svn log -g' and 'svn blame -g', and
        explain why they're useful.</para>
      </section>
      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <section xml:id="svn.branchmerge.advanced.ancestry">
        <info>
          <title>Noticing or Ignoring Ancestry</title>
        </info>
        <para>When conversing with a Subversion developer, you might
        very likely hear reference to the term
        <firstterm>ancestry</firstterm>.  This word is used to
        describe the relationship between two objects in a
        repository: if they're related to each other, then one
        object is said to be an ancestor of the other.</para>
        <para>For example, suppose you commit revision 100, which
        includes a change to a file <filename>foo.c</filename>.
        Then <filename>foo.c@99</filename> is an
        <quote>ancestor</quote> of <filename>foo.c@100</filename>.
        On the other hand, suppose you commit the deletion of
        <filename>foo.c</filename> in revision 101, and then add a
        new file by the same name in revision 102.  In this case,
        <filename>foo.c@99</filename> and
        <filename>foo.c@102</filename> may appear to be related
        (they have the same path), but in fact are completely
        different objects in the repository.  They share no history
        or <quote>ancestry</quote>.</para>
        <para>The reason for bringing this up is to point out an
        important difference between <command>svn diff</command> and
        <command>svn merge</command>.  The former command ignores
        ancestry, while the latter command is quite sensitive to it.
        For example, if you asked <command>svn diff</command> to
        compare revisions 99 and 102 of <filename>foo.c</filename>,
        you would see line-based diffs; the <literal>diff</literal>
        command is blindly comparing two paths.  But if you asked
        <command>svn merge</command> to compare the same two objects,
        it would notice that they're unrelated and first attempt to
        delete the old file, then add the new file;  the output would
        indicate a deletion followed by an add:</para>
        <screen>
        D  foo.c
        A  foo.c
      </screen>
        <para>Most merges involve comparing trees that are ancestrally
        related to one another, and therefore <command>svn
          merge</command> defaults to this behavior.  Occasionally,
        however, you may want the <literal>merge</literal> command
        to compare two unrelated trees.  For example, you may have
        imported two source-code trees representing different vendor
        releases of a software project (see <xref linkend="svn.advanced.vendorbr"/>).  If you asked
        <command>svn merge</command> to compare the two trees, you'd
        see the entire first tree being deleted, followed by an add
        of the entire second tree!  In these situations, you'll want
        <command>svn merge</command> to do a path-based comparison
        only, ignoring any relations between files and directories.
        Add the <option>--ignore-ancestry</option> option to your
        merge command, and it will behave just like <command>svn
          diff</command>.  (And conversely, the
        <option>--notice-ancestry</option> option will cause
        <command>svn diff</command> to behave like the
        <literal>merge</literal> command.)</para>
      </section>
      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <section xml:id="svn.branchmerge.advanced.moves">
        <info>
          <title>Merges and Moves</title>
        </info>
        <para>A common desire is to refactor source code, especially
        in Java-based software projects.  Files and directories are
        shuffled around and renamed, often causing great disruption
        to everyone working on the project.  Sounds like a perfect
        case to use a branch, doesn't it?  Just create a branch,
        shuffle things around, then merge the branch back to the
        trunk, right?</para>
        <para>Alas, this scenario doesn't work so well right now, and
        is considered one of Subversion's current weak spots.  The
        problem is that Subversion's <command>update</command>
        command isn't as robust as it should be, particularly when
        dealing with copy and move operations.</para>
        <para>When you use <command>svn copy</command> to duplicate a
        file, the repository remembers where the new file came from,
        but it fails to transmit that information to the client
        which is running <command>svn update</command>
        or <command>svn merge</command>.  Instead of telling the
        client, <quote>Copy that file you already have to this new
          location</quote>, it instead sends down an entirely new
        file.  This can lead to problems, especially because the
        same thing happens with renamed files.  A lesser-known fact
        about Subversion is that it lacks <quote>true
          renames</quote>&#x2014;the <command>svn move</command>
        command is nothing more than an aggregation of <command>svn
          copy</command> and <command>svn delete</command>.</para>
        <para>For example, suppose that while working on your private
        branch, you rename <filename>integer.c</filename>
        to <filename>whole.c</filename>.  Effectively you've created
        a new file in your branch that is a copy of the original
        file, and deleted the original file.  Meanwhile, back
        on <filename>trunk</filename>, Sally has committed some
        improvements to <filename>integer.c</filename>.  Now you
        decide to merge your branch to the trunk:</para>
        <screen>
        $ cd calc/trunk

        $ svn merge -r 341:405 http://svn.example.com/repos/calc/branches/my-calc-branch
        D   integer.c
        A   whole.c
      </screen>
        <para>This doesn't look so bad at first glance, but it's also
        probably not what you or Sally expected.  The merge
        operation has deleted the latest version
        of <filename>integer.c</filename> file (the one containing
        Sally's latest changes), and blindly added your
        new <filename>whole.c</filename> file&#x2014;which is a
        duplicate of the <emphasis>older</emphasis> version
        of <filename>integer.c</filename>.  The net effect is that
        merging your <quote>rename</quote> to the branch has removed
        Sally's recent changes from the latest revision!</para>
        <para>This isn't true data-loss; Sally's changes are still in
        the repository's history, but it may not be immediately
        obvious that this has happened.  The moral of this story is
        that until Subversion improves, be very careful about
        merging copies and renames from one branch to
        another.</para>
      </section>
      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <section xml:id="svn.branchmerge.advanced.pre1.5clients">
        <info>
          <title>Blocking Pre-1.5 Clients</title>
        </info>
        <para>###TODO:  Why you might want to do this.  (How did we
        decide to do this??)</para>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.branchmerge.commonpatterns">
      <info>
        <title>Common Branching Patterns</title>
      </info>
      <para>There are many different uses for branching and <command>svn
        merge</command>, and this section describes the most common ones
      you're likely to run into.</para>
      <para>Version control is most often used for software
      development, so here's a quick peek at two of the most common
      branching/merging patterns used by teams of programmers.  If
      you're not using Subversion for software development, feel
      free to skip this section.  If you're a software developer
      using version control for the first time, pay close attention,
      as these patterns are often considered best practices by
      experienced folk.  These processes aren't specific to
      Subversion; they're applicable to any version control system.
      Still, it may help to see them described in Subversion
      terms.</para>
      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <section xml:id="svn.branchmerge.commonpatterns.release">
        <info>
          <title>Release Branches</title>
        </info>
        <para>Most software has a typical lifecycle: code, test,
        release, repeat.  There are two problems with this process.
        First, developers need to keep writing new features while
        quality-assurance teams take time to test supposedly-stable
        versions of the software.  New work cannot halt while the
        software is tested.  Second, the team almost always needs to
        support older, released versions of software; if a bug is
        discovered in the latest code, it most likely exists in
        released versions as well, and customers will want to get
        that bugfix without having to wait for a major new
        release.</para>
        <para>Here's where version control can help.  The typical
        procedure looks like this:</para>
        <itemizedlist>
          <listitem>
            <para><emphasis>Developers commit all new work to the
              trunk.</emphasis>

            Day-to-day changes are committed to
            <filename>/trunk</filename>: new features, bugfixes, and
            so on.</para>
          </listitem>
          <listitem>
            <para><emphasis>The trunk is copied to a
              <quote>release</quote> branch.</emphasis>

            When the team thinks the software is ready for release
            (say, a 1.0 release), then <filename>/trunk</filename>
            might be copied to
            <filename>/branches/1.0</filename>.</para>
          </listitem>
          <listitem>
            <para><emphasis>Teams continue to work in parallel.</emphasis>

            One team begins rigorous testing of the release branch,
            while another team continues new work (say, for version
            2.0) on <filename>/trunk</filename>.  If bugs are
            discovered in either location, fixes are ported back and
            forth as necessary.  At some point, however, even that
            process stops.  The branch is <quote>frozen</quote> for
            final testing right before a release.</para>
          </listitem>
          <listitem>
            <para><emphasis>The branch is tagged and released.</emphasis>

            When testing is complete,
            <filename>/branches/1.0</filename> is copied to
            <filename>/tags/1.0.0</filename> as a reference
            snapshot.  The tag is packaged and released to
            customers.</para>
          </listitem>
          <listitem>
            <para><emphasis>The branch is maintained over time.</emphasis>

            While work continues on <filename>/trunk</filename> for
            version 2.0, bugfixes continue to be ported from
            <filename>/trunk</filename> to
            <filename>/branches/1.0</filename>.  When enough
            bugfixes have accumulated, management may decide to do a
            1.0.1 release: <filename>/branches/1.0</filename> is
            copied to <filename>/tags/1.0.1</filename>, and the tag
            is packaged and released.</para>
          </listitem>
        </itemizedlist>
        <para>This entire process repeats as the software matures:
        when the 2.0 work is complete, a new 2.0 release branch is
        created, tested, tagged, and eventually released.  After
        some years, the repository ends up with a number of release
        branches in <quote>maintenance</quote> mode, and a number
        of tags representing final shipped versions.</para>
      </section>
      <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
      <section xml:id="svn.branchmerge.commonpatterns.feature">
        <info>
          <title>Feature Branches</title>
        </info>
        <para>A <firstterm>feature branch</firstterm> is the sort of
        branch that's been the dominant example in this chapter, the
        one you've been working on while Sally continues to work on
        <filename>/trunk</filename>.  It's a temporary branch
        created to work on a complex change without interfering with
        the stability of <filename>/trunk</filename>.  Unlike
        release branches (which may need to be supported forever),
        feature branches are born, used for a while, merged back to
        the trunk, then ultimately deleted.  They have a finite span
        of usefulness.</para>
        <para>Again, project policies vary widely concerning exactly
        when it's appropriate to create a feature branch.  Some
        projects never use feature branches at all: commits to
        <filename>/trunk</filename> are a free-for-all.  The
        advantage to this system is that it's simple&#x2014;nobody
        needs to learn about branching or merging.  The disadvantage
        is that the trunk code is often unstable or unusable.  Other
        projects use branches to an extreme: no change is
        <emphasis>ever</emphasis> committed to the trunk directly.
        Even the most trivial changes are created on a short-lived
        branch, carefully reviewed and merged to the trunk.  Then
        the branch is deleted.  This system guarantees an
        exceptionally stable and usable trunk at all times, but at
        the cost of tremendous process overhead.</para>
        <para>Most projects take a middle-of-the-road approach.  They
        commonly insist that <filename>/trunk</filename> compile and
        pass regression tests at all times.  A feature branch is
        only required when a change requires a large number of
        destabilizing commits.  A good rule of thumb is to ask this
        question: if the developer worked for days in isolation and
        then committed the large change all at once (so that
        <filename>/trunk</filename> were never destabilized), would it
        be too large a change to review?  If the answer to that
        question is <quote>yes</quote>, then the change should be
        developed on a feature branch.  As the developer commits
        incremental changes to the branch, they can be easily reviewed
        by peers.</para>
        <para>Finally, there's the issue of how to best keep a feature
        branch in <quote>sync</quote> with the trunk as work
        progresses.  As we mentioned earlier, there's a great risk to
        working on a branch for weeks or months; trunk changes may
        continue to pour in, to the point where the two lines of
        development differ so greatly that it may become a nightmare
        trying to merge the branch back to the trunk.</para>
        <para>This situation is best avoided by regularly merging trunk
        changes to the branch.  Make up a policy: once a week, merge
        the last week's worth of trunk changes to the branch.  Take
        care when doing this; the merging needs to be hand-tracked to
        avoid the problem of repeated merges.  You'll need to write
        careful log messages detailing exactly which revision ranges
        have been merged already.  It may sound intimidating, but it's
        actually pretty easy to do.</para>
        <para>At some point, you'll be ready to merge the
        <quote>synchronized</quote> feature branch back to the trunk.
        To do this, begin by doing a final merge of the latest trunk
        changes to the branch.  When that's done, the latest versions
        of branch and trunk will be absolutely identical except for
        your branch changes.  So in this special case, you would merge
        by comparing the branch with the trunk:</para>
        <para>###TODO:  SIMPLIFY THIS EXAMPLE TO SHOW MERGE-TRACKING</para>
        <screen>
        $ cd trunk-working-copy

        $ svn update
        At revision 1910.

        $ svn merge http://svn.example.com/repos/calc/trunk@1910 \
        http://svn.example.com/repos/calc/branches/mybranch@1910
        U  real.c
        U  integer.c
        A  newdirectory
        A  newdirectory/newfile
        &#x2026;
      </screen>
        <para>By comparing the <literal>HEAD</literal> revision of the
        trunk with the <literal>HEAD</literal> revision of the
        branch, you're defining a delta that describes only the
        changes you made to the branch; both lines of development
        already have all of the trunk changes.</para>
        <para>Another way of thinking about this pattern is that your
        weekly sync of trunk to branch is analogous to running
        <command>svn update</command> in a working copy, while the
        final merge step is analogous to running <command>svn
          commit</command> from a working copy.  After all, what else
        <emphasis>is</emphasis> a working copy but a very shallow
        private branch?  It's a branch that's only capable of
        storing one change at a time.</para>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.branchmerge.switchwc">
      <info>
        <title>Traversing Branches</title>
      </info>
      <para>The <command>svn switch</command> command transforms an
      existing working copy to reflect a different branch.  While this
      command isn't strictly necessary for working with branches, it
      provides a nice shortcut.  In our earlier example,
      after creating your private branch, you checked out a fresh
      working copy of the new repository directory.  Instead, you can
      simply ask Subversion to change your working copy of
      <filename>/calc/trunk</filename> to mirror the new branch
      location:</para>
      <screen>
$ cd calc

$ svn info | grep URL
URL: http://svn.example.com/repos/calc/trunk

$ svn switch http://svn.example.com/repos/calc/branches/my-calc-branch
U   integer.c
U   button.c
U   Makefile
Updated to revision 341.

$ svn info | grep URL
URL: http://svn.example.com/repos/calc/branches/my-calc-branch
</screen>
      <para>After <quote>switching</quote> to the branch, your working
      copy is no different than what you would get from doing a fresh
      checkout of the directory.  And it's usually more efficient to
      use this command, because often branches only differ by a small
      degree.  The server sends only the minimal set of changes
      necessary to make your working copy reflect the branch
      directory.</para>
      <para>The <command>svn switch</command> command also takes a
      <option>--revision</option> (<option>-r</option>) option, so you
      need not always move your working copy to the
      <literal>HEAD</literal> of the branch.</para>
      <para>Of course, most projects are more complicated than our
      <filename>calc</filename> example, containing multiple
      subdirectories.  Subversion users often follow a specific
      algorithm when using branches:</para>
      <orderedlist inheritnum="ignore" continuation="restarts">
        <listitem>
          <para>Copy the project's entire <quote>trunk</quote> to a
            new branch directory.</para>
        </listitem>
        <listitem>
          <para>Switch only <emphasis>part</emphasis> of the trunk
            working copy to mirror the branch.</para>
        </listitem>
      </orderedlist>
      <para>In other words, if a user knows that the branch-work only
      needs to happen on a specific subdirectory, they use
      <command>svn switch</command> to move only that subdirectory to
      the branch.  (Or sometimes users will switch just a single
      working file to the branch!)  That way, they can continue to
      receive normal <quote>trunk</quote> updates to most of their
      working copy, but the switched portions will remain immune
      (unless someone commits a change to their branch).  This feature
      adds a whole new dimension to the concept of a <quote>mixed
      working copy</quote>&#x2014;not only can working copies contain a
      mixture of working revisions, but a mixture of repository
      locations as well.</para>
      <para>If your working copy contains a number of switched subtrees
      from different repository locations, it continues to function as
      normal.  When you update, you'll receive patches to each subtree
      as appropriate.  When you commit, your local changes will still
      be applied as a single, atomic change to the repository.</para>
      <para>Note that while it's okay for your working copy to reflect a
      mixture of repository locations, these locations must all be
      within the <emphasis>same</emphasis> repository.  Subversion
      repositories aren't yet able to communicate with one another;
      that's a feature planned for the
      future.
      <footnote><para>You <emphasis>can</emphasis>, however, use <command>svn
          switch</command> with the <option>--relocate</option> option
          if the URL of your server changes and you don't want to
          abandon an existing working copy.  See <xref linkend="svn.ref.svn.c.switch"/> for more information and an
          example.</para></footnote></para>
      <sidebar>
        <info>
          <title>Switches and Updates</title>
        </info>
        <para>Have you noticed that the output of <command>svn
        switch</command> and <command>svn update</command> look the
        same?  The <literal>switch</literal> command is actually a
        superset of the update command.</para>
        <para>When you run <command>svn update</command>, you're asking
        the repository to compare two trees.  The repository does so,
        and then sends a description of the differences back to the
        client.  The only difference between <command>svn
        switch</command> and <command>svn update</command> is that the
        <literal>update</literal> command always compares two identical
        paths.</para>
        <para>That is, if your working copy is a mirror of
        <filename>/calc/trunk</filename>, then <command>svn
        update</command> will automatically compare your working copy
        of <filename>/calc/trunk</filename> to
        <filename>/calc/trunk</filename> in the
        <literal>HEAD</literal> revision.  If you're switching your
        working copy to a branch, then <command>svn switch</command>
        will compare your working copy of
        <filename>/calc/trunk</filename> to some
        <emphasis>other</emphasis> branch-directory in the
        <literal>HEAD</literal> revision.</para>
        <para>In other words, an update moves your working copy through
        time.  A switch moves your working copy through time
        <emphasis>and</emphasis> space.</para>
      </sidebar>
      <para>Because <command>svn switch</command> is essentially a
      variant of <command>svn update</command>, it shares the same
      behaviors; any local modifications in your working copy are
      preserved when new data arrives from the repository.  This
      allows you to perform all sorts of clever tricks.</para>
      <para>For example, suppose you have a working copy of
      <filename>/calc/trunk</filename> and make a number of changes to
      it.  Then you suddenly realize that you meant to make the
      changes to a branch instead.  No problem!  When you <command>svn
      switch</command> your working copy to the branch, the local
      changes will remain.  You can then test and commit them to the
      branch.</para>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.branchmerge.tags">
      <info>
        <title>Tags</title>
      </info>
      <para>Another common version control concept is a
      <firstterm>tag</firstterm>.  A tag is just a
      <quote>snapshot</quote> of a project in time.  In Subversion,
      this idea already seems to be everywhere.  Each repository
      revision is exactly that&#x2014;a snapshot of the filesystem
      after each commit.</para>
      <para>However, people often want to give more human-friendly names
      to tags, like <literal>release-1.0</literal>.  And they want to
      make snapshots of smaller subdirectories of the filesystem.
      After all, it's not so easy to remember that release-1.0 of a
      piece of software is a particular subdirectory of revision
      4822.</para>
      <!-- =============================================================== -->
      <section xml:id="svn.branchmerge.tags.mksimple">
        <info>
          <title>Creating a Simple Tag</title>
        </info>
        <para>Once again, <command>svn copy</command> comes to the
        rescue.  If you want to create a snapshot of
        <filename>/calc/trunk</filename> exactly as it looks in the
        <literal>HEAD</literal> revision, then make a copy of it:</para>
        <screen>
$ svn copy http://svn.example.com/repos/calc/trunk \
           http://svn.example.com/repos/calc/tags/release-1.0 \
      -m "Tagging the 1.0 release of the 'calc' project."

Committed revision 351.
</screen>
        <para>This example assumes that a
        <filename>/calc/tags</filename> directory already exists.  (If
        it doesn't, you can create it using <command>svn
        mkdir</command>.)  After the copy completes, the new
        <filename>release-1.0</filename> directory is forever a
        snapshot of how the project looked in the
        <literal>HEAD</literal> revision at the time you made the
        copy.  Of course you might want to be more precise about
        exactly which revision you copy, in case somebody else may
        have committed changes to the project when you weren't
        looking.  So if you know that revision 350 of
        <filename>/calc/trunk</filename> is exactly the snapshot you
        want, you can specify it by passing <option>-r 350</option> to
        the <command>svn copy</command> command.</para>
        <para>But wait a moment: isn't this tag-creation procedure the
        same procedure we used to create a branch?  Yes, in fact, it
        is.  In Subversion, there's no difference between a tag and a
        branch.  Both are just ordinary directories that are created
        by copying.  Just as with branches, the only reason a copied
        directory is a <quote>tag</quote> is because
        <emphasis>humans</emphasis> have decided to treat it that way:
        as long as nobody ever commits to the directory, it forever
        remains a snapshot.  If people start committing to it, it
        becomes a branch.</para>
        <para>If you are administering a repository, there are two
        approaches you can take to managing tags.  The first approach
        is <quote>hands off</quote>: as a matter of project policy,
        decide where your tags will live, and make sure all users know
        how to treat the directories they copy in there.  (That is,
        make sure they know not to commit to them.)  The second
        approach is more paranoid: you can use one of the
        access-control scripts provided with Subversion to prevent
        anyone from doing anything but creating new copies in the
        tags-area (See <xref linkend="svn.serverconfig"/>.)  The paranoid
        approach, however, isn't usually necessary.  If a user
        accidentally commits a change to a tag-directory, you can
        simply undo the change as discussed in the previous section.
        This is version control, after all.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.branchmerge.tags.mkcomplex">
        <info>
          <title>Creating a Complex Tag</title>
        </info>
        <para>Sometimes you may want your <quote>snapshot</quote> to be
        more complicated than a single directory at a single
        revision.</para>
        <para>For example, pretend your project is much larger than our
        <filename>calc</filename> example: suppose it contains a
        number of subdirectories and many more files.  In the course
        of your work, you may decide that you need to create a working
        copy that is designed to have specific features and bug fixes.
        You can accomplish this by selectively backdating files or
        directories to particular revisions (using <command>svn update
        -r</command> liberally), or by switching files and directories
        to particular branches (making use of <command>svn
        switch</command>).  When you're done, your working copy is a
        hodgepodge of repository locations from different revisions.
        But after testing, you know it's the precise combination of
        data you need.</para>
        <para>Time to make a snapshot.  Copying one URL to another won't
        work here.  In this case, you want to make a snapshot of your
        exact working copy arrangement and store it in the repository.
        Luckily, <command>svn copy</command> actually has four
        different uses (which you can read about in <xref linkend="svn.ref"/>), including the ability to copy a
        working-copy tree to the repository:</para>
        <screen>
$ ls
my-working-copy/

$ svn copy my-working-copy http://svn.example.com/repos/calc/tags/mytag

Committed revision 352.
</screen>
        <para>Now there is a new directory in the repository,
        <filename>/calc/tags/mytag</filename>, which is an exact
        snapshot of your working copy&#x2014;mixed revisions, URLs,
        and all.</para>
        <para>Other users have found interesting uses for this feature.
        Sometimes there are situations where you have a bunch of local
        changes made to your working copy, and you'd like a
        collaborator to see them.  Instead of running <command>svn
        diff</command> and sending a patch file (which won't capture
        tree changes, symlink changes or changes in properties), you can
        instead use <command>svn copy</command> to <quote>upload</quote>
        your working copy to a private area of the repository.  Your
        collaborator can then either check out a verbatim copy of your
        working copy, or use <command>svn merge</command> to receive
        your exact changes.</para>
        <para>While this is a nice method for uploading a quick snapshot
        of your working copy, note that this is <emphasis>not</emphasis>
        a good way to initially create a branch.  Branch creation should
        be an event onto itself, and this method conflates the creation
        of a branch with extra changes to files, all within a single revision.
        This makes it very difficult (later on) to identify a single
        revision number as a branch point.</para>
        <tip>
          <para>Have you ever found yourself making some complex edits
          (in your <filename>/trunk</filename> working copy) and
          suddenly realized, <quote>hey, these changes ought to be in
          their own branch?</quote>  A great technique to do this can
          be summarized in two steps:</para>
          <screen>
$ svn copy http://svn.example.com/repos/calc/trunk \
           http://svn.example.com/repos/calc/branches/newbranch
Committed revision 353.

$ svn switch http://svn.example.com/repos/calc/branches/newbranch
At revision 353.
</screen>
          <para>The <command>svn switch</command> command, like
          <command>svn update</command>, preserves your local edits.
          At this point, your working copy is now a reflection of the
          newly created branch, and your next <command>svn
          commit</command> invocation will send your changes
          there.</para>
        </tip>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.branchmerge.maint">
      <info>
        <title>Branch Maintenance</title>
      </info>
      <para>You may have noticed by now that Subversion is extremely
      flexible.  Because it implements branches and tags with the same
      underlying mechanism (directory copies), and because branches
      and tags appear in normal filesystem space, many people find
      Subversion intimidating.  It's almost <emphasis>too</emphasis>
      flexible.  In this section, we'll offer some suggestions for
      arranging and managing your data over time.</para>
      <!-- =============================================================== -->
      <section xml:id="svn.branchmerge.maint.layout">
        <info>
          <title>Repository Layout</title>
        </info>
        <para>There are some standard, recommended ways to organize a
        repository.  Most people create a <filename>trunk</filename>
        directory to hold the <quote>main line</quote> of development,
        a <filename>branches</filename> directory to contain branch
        copies, and a <filename>tags</filename> directory to contain
        tag copies.  If a repository holds only one project, then
        often people create these top-level directories:</para>
        <screen>
/trunk
/branches
/tags
</screen>
        <para>If a repository contains multiple projects, admins
        typically index their layout by project (see <xref linkend="svn.reposadmin.projects.chooselayout"/> to read more about
        <quote>project roots</quote>):</para>
        <screen>
/paint/trunk
/paint/branches
/paint/tags
/calc/trunk
/calc/branches
/calc/tags
</screen>
        <para>Of course, you're free to ignore these common layouts.
        You can create any sort of variation, whatever works best for
        you or your team.  Remember that whatever you choose, it's not
        a permanent commitment.  You can reorganize your repository at
        any time.  Because branches and tags are ordinary directories,
        the <command>svn move</command> command can move or rename
        them however you wish.  Switching from one layout to another
        is just a matter of issuing a series of server-side moves; if
        you don't like the way things are organized in the repository,
        just juggle the directories around.</para>
        <para>Remember, though, that while moving directories may be
        easy to do, you need to be considerate of your users as well.
        Your juggling can be disorienting to users with existing
        working copies.  If a user has a working copy of a particular
        repository directory, your <command>svn move</command>
        operation might remove the path from the latest revision.
        When the user next runs <command>svn update</command>, she will
        be told that her working copy represents a path that no
        longer exists, and the user will be forced to <command>svn
        switch</command> to the new location.
        </para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.branchmerge.maint.lifetime">
        <info>
          <title>Data Lifetimes</title>
        </info>
        <para>Another nice feature of Subversion's model is that
        branches and tags can have finite lifetimes, just like any
        other versioned item.  For example, suppose you eventually
        finish all your work on your personal branch of the
        <filename>calc</filename> project.  After merging all of your
        changes back into <filename>/calc/trunk</filename>, there's
        no need for your private branch directory to stick around
        anymore:</para>
        <screen>
$ svn delete http://svn.example.com/repos/calc/branches/my-calc-branch \
             -m "Removing obsolete branch of calc project."

Committed revision 375.
</screen>
        <para>And now your branch is gone.  Of course it's not really
        gone: the directory is simply missing from the
        <literal>HEAD</literal> revision, no longer distracting
        anyone.  If you use <command>svn checkout</command>,
        <command>svn switch</command>, or <command>svn list</command>
        to examine an earlier revision, you'll still be able to see
        your old branch.</para>
        <para>If browsing your deleted directory isn't enough, you can
        always bring it back.  Resurrecting data is very easy in
        Subversion.  If there's a deleted directory (or file) that
        you'd like to bring back into <literal>HEAD</literal>, simply
        use <command>svn copy -r</command> to copy it from the old
        revision:</para>
        <screen>
$ svn copy -r 374 http://svn.example.com/repos/calc/branches/my-calc-branch \
                  http://svn.example.com/repos/calc/branches/my-calc-branch

Committed revision 376.
</screen>
        <para>In our example, your personal branch had a relatively
        short lifetime: you may have created it to fix a bug or
        implement a new feature.  When your task is done, so is the
        branch.  In software development, though, it's also common to
        have two <quote>main</quote> branches running side-by-side for
        very long periods.  For example, suppose it's time to release
        a stable version of the <filename>calc</filename> project to the
        public, and you know it's going to take a couple of months to
        shake bugs out of the software.  You don't want people to add
        new features to the project, but you don't want to tell all
        developers to stop programming either.  So instead, you create
        a <quote>stable</quote> branch of the software that won't
        change much:</para>
        <screen>
$ svn copy http://svn.example.com/repos/calc/trunk \
         http://svn.example.com/repos/calc/branches/stable-1.0 \
         -m "Creating stable branch of calc project."

Committed revision 377.
</screen>
        <para>And now developers are free to continue adding
        cutting-edge (or experimental) features to
        <filename>/calc/trunk</filename>, and you can declare a
        project policy that only bug fixes are to be committed to
        <filename>/calc/branches/stable-1.0</filename>.  That is, as
        people continue to work on the trunk, a human selectively
        ports bug fixes over to the stable branch.  Even after the
        stable branch has shipped, you'll probably continue to
        maintain the branch for a long time&#x2014;that is, as long
        as you continue to support that release for customers.</para>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.advanced.vendorbr">
      <info>
        <title>Vendor branches</title>
      </info>
      <para>As is especially the case when developing software, the data
      that you maintain under version control is often closely related
      to, or perhaps dependent upon, someone else's data.  Generally,
      the needs of your project will dictate that you stay as
      up-to-date as possible with the data provided by that external
      entity without sacrificing the stability of your own project.
      This scenario plays itself out all the time&#x2014;anywhere that
      the information generated by one group of people has a direct
      effect on that which is generated by another group.</para>
      <para>For example, software developers might be working on an
      application which makes use of a third-party library.
      Subversion has just such a relationship with the Apache Portable
      Runtime library (see <xref linkend="svn.developer.usingapi.apr"/>).  The
      Subversion source code depends on the APR library for all its
      portability needs.  In earlier stages of Subversion's
      development, the project closely tracked APR's changing API,
      always sticking to the <quote>bleeding edge</quote> of the
      library's code churn.  Now that both APR and Subversion have
      matured, Subversion attempts to synchronize with APR's library
      API only at well-tested, stable release points.</para>
      <para>Now, if your project depends on someone else's information,
      there are several ways that you could attempt to synchronize that
      information with your own.  Most painfully, you could issue oral
      or written instructions to all the contributors of your project,
      telling them to make sure that they have the specific versions
      of that third-party information that your project needs.  If the
      third-party information is maintained in a Subversion
      repository, you could also use Subversion's externals
      definitions to effectively <quote>pin down</quote> specific
      versions of that information to some location in your own
      working copy directory (see <xref linkend="svn.advanced.externals"/>).</para>
      <para>But sometimes you want to maintain custom modifications to
      third-party data in your own version control system.  Returning
      to the software development example, programmers might need to
      make modifications to that third-party library for their own
      purposes.  These modifications might include new functionality
      or bug fixes, maintained internally only until they become part
      of an official release of the third-party library.  Or the
      changes might never be relayed back to the library maintainers,
      existing solely as custom tweaks to make the library further
      suit the needs of the software developers.</para>
      <para>Now you face an interesting situation.  Your project could
      house its custom modifications to the third-party data in some
      disjointed fashion, such as using patch files or full-fledged
      alternate versions of files and directories.  But these quickly
      become maintenance headaches, requiring some mechanism by which
      to apply your custom changes to the third-party data, and
      necessitating regeneration of those changes with each successive
      version of the third-party data that you track.</para>
      <para>The solution to this problem is to use <firstterm>vendor
      branches</firstterm>.  A vendor branch is a directory tree in
      your own version control system that contains information
      provided by a third-party entity, or vendor.  Each version of
      the vendor's data that you decide to absorb into your project is
      called a <firstterm>vendor drop</firstterm>.</para>
      <para>Vendor branches provide two benefits.  First, by storing
      the currently supported vendor drop in your own version control
      system, the members of your project never need to question
      whether they have the right version of the vendor's data.  They
      simply receive that correct version as part of their regular
      working copy updates.  Secondly, because the data lives in your
      own Subversion repository, you can store your custom changes to
      it in-place&#x2014;you have no more need of an automated (or
      worse, manual) method for swapping in your customizations.</para>
      <!-- =============================================================== -->
      <section xml:id="svn.advanced.vendorbr.general">
        <info>
          <title>General Vendor Branch Management Procedure</title>
        </info>
        <para>Managing vendor branches generally works like this.  You
        create a top-level directory (such as
        <filename>/vendor</filename>) to hold the vendor branches.
        Then you import the third party code into a subdirectory of
        that top-level directory.  You then copy that subdirectory
        into your main development branch (for example,
        <filename>/trunk</filename>) at the appropriate location.  You
        always make your local changes in the main development branch.
        With each new release of the code you are tracking you bring
        it into the vendor branch and merge the changes into
        <filename>/trunk</filename>, resolving whatever conflicts
        occur between your local changes and the upstream
        changes.</para>
        <para>Perhaps an example will help to clarify this algorithm.
        We'll use a scenario where your development team is creating a
        calculator program that links against a third-party complex
        number arithmetic library, libcomplex.  We'll begin with the
        initial creation of the vendor branch, and the import of the
        first vendor drop.  We'll call our vendor branch directory
        <filename>libcomplex</filename>, and our code drops will go
        into a subdirectory of our vendor branch called
        <filename>current</filename>.  And since <command>svn
        import</command> creates all the intermediate parent
        directories it needs, we can actually accomplish both of these
        steps with a single command.</para>
        <screen>
$ svn import /path/to/libcomplex-1.0 \
             http://svn.example.com/repos/vendor/libcomplex/current \
             -m 'importing initial 1.0 vendor drop'
&#x2026;
</screen>
        <para>We now have the current version of the libcomplex source
        code in <filename>/vendor/libcomplex/current</filename>.  Now,
        we tag that version (see <xref linkend="svn.branchmerge.tags"/>)
        and then copy it into the main development branch.  Our copy
        will create a new directory called
        <filename>libcomplex</filename> in our existing
        <filename>calc</filename> project directory.  It is in this
        copied version of the vendor data that we will make our
        customizations.</para>
        <screen>
$ svn copy http://svn.example.com/repos/vendor/libcomplex/current  \
           http://svn.example.com/repos/vendor/libcomplex/1.0      \
           -m 'tagging libcomplex-1.0'
&#x2026;
$ svn copy http://svn.example.com/repos/vendor/libcomplex/1.0  \
           http://svn.example.com/repos/calc/libcomplex        \
           -m 'bringing libcomplex-1.0 into the main branch'
&#x2026;
</screen>
        <para>We check out our project's main branch&#x2014;which now
        includes a copy of the first vendor drop&#x2014;and we get to
        work customizing the libcomplex code.  Before we know it, our
        modified version of libcomplex is now completely integrated
        into our calculator program.
        <footnote><para>And entirely bug-free, of course!</para></footnote>
      </para>
        <para>A few weeks later, the developers of libcomplex release a
        new version of their library&#x2014;version 1.1&#x2014;which
        contains some features and functionality that we really want.
        We'd like to upgrade to this new version, but without losing
        the customizations we made to the existing version.  What we
        essentially would like to do is to replace our current
        baseline version of libcomplex 1.0 with a copy of libcomplex
        1.1, and then re-apply the custom modifications we previously
        made to that library to the new version.  But we actually
        approach the problem from the other direction, applying the
        changes made to libcomplex between versions 1.0 and 1.1 to our
        modified copy of it.</para>
        <para>To perform this upgrade, we check out a copy of our vendor
        branch, and replace the code in the
        <filename>current</filename> directory with the new libcomplex
        1.1 source code.  We quite literally copy new files on top of
        existing files, perhaps exploding the libcomplex 1.1 release
        tarball atop our existing files and directories.  The goal
        here is to make our <filename>current</filename> directory
        contain only the libcomplex 1.1 code, and to ensure that all
        that code is under version control.  Oh, and we want to do
        this with as little version control history disturbance as
        possible.</para>
        <para>After replacing the 1.0 code with 1.1 code, <command>svn
        status</command> will show files with local modifications as
        well as, perhaps, some unversioned or missing files.  If we
        did what we were supposed to do, the unversioned files are
        only those new files introduced in the 1.1 release of
        libcomplex&#x2014;we run <command>svn add</command> on those to
        get them under version control.  The missing files are files
        that were in 1.0 but not in 1.1, and on those paths we run
        <command>svn delete</command>.  Finally, once our
        <filename>current</filename> working copy contains only the
        libcomplex 1.1 code, we commit the changes we made to get it
        looking that way.</para>
        <para>Our <filename>current</filename> branch now contains the
        new vendor drop.  We tag the new version (in the same way we
        previously tagged the version 1.0 vendor drop), and then merge
        the differences between the tag of the previous version and
        the new current version into our main development
        branch.</para>
        <screen>
$ cd working-copies/calc
$ svn merge http://svn.example.com/repos/vendor/libcomplex/1.0      \
            http://svn.example.com/repos/vendor/libcomplex/current  \
            libcomplex
&#x2026; # resolve all the conflicts between their changes and our changes
$ svn commit -m 'merging libcomplex-1.1 into the main branch'
&#x2026;
</screen>
        <para>In the trivial use case, the new version of our
        third-party tool would look, from a files-and-directories
        point of view, just like the previous version.  None of the
        libcomplex source files would have been deleted, renamed or
        moved to different locations&#x2014;the new version would
        contain only textual modifications against the previous one.
        In a perfect world, our modifications would apply cleanly to
        the new version of the library, with absolutely no
        complications or conflicts.</para>
        <para>But things aren't always that simple, and in fact it is
        quite common for source files to get moved around between
        releases of software.  This complicates the process of
        ensuring that our modifications are still valid for the new
        version of code, and can quickly degrade into a situation
        where we have to manually recreate our customizations in the
        new version.  Once Subversion knows about the history of a
        given source file&#x2014;including all its previous
        locations&#x2014;the process of merging in the new version of
        the library is pretty simple.  But we are responsible for
        telling Subversion how the source file layout changed from
        vendor drop to vendor drop.</para>
      </section>
      <!-- TODO: Try to clarify some of the steps for svn_load_dirs.pl
         (Garrett sez they've been "glossed over".  Also, consider
         another section on bypassing svn_load_dirs.pl altogether and
         running with just svn merge, now that it ignores ancestry. -->
      <!-- =============================================================== -->
      <section xml:id="svn.advanced.vendorbr.svn_load_dirs">
        <info>
          <title>
            <command>svn_load_dirs.pl</command>
          </title>
        </info>
        <para>Vendor drops that contain more than a few deletes,
        additions and moves complicate the process of upgrading to
        each successive version of the third-party data.  So
        Subversion supplies the <command>svn_load_dirs.pl</command>
        script to assist with this process.  This script automates the
        importing steps we mentioned in the general vendor branch
        management procedure to make sure that mistakes are minimized.
        You will still be responsible for using the merge commands to
        merge the new versions of the third-party data into your main
        development branch, but <command>svn_load_dirs.pl</command>
        can help you more quickly and easily arrive at that
        stage.</para>
        <para>In short, <command>svn_load_dirs.pl</command> is an
        enhancement to <command>svn import</command> that has several
        important characteristics:</para>
        <itemizedlist>
          <listitem>
            <para>It can be run at any point in time to bring an existing
            directory in the repository to exactly match an external
            directory, performing all the necessary adds and deletes,
            and optionally performing moves, too.</para>
          </listitem>
          <listitem>
            <para>It takes care of complicated series of operations between
            which Subversion requires an intermediate commit&#x2014;such
            as before renaming a file or directory twice.</para>
          </listitem>
          <listitem>
            <para>It will optionally tag the newly imported directory.</para>
          </listitem>
          <listitem>
            <para>It will optionally add arbitrary properties to files and
            directories that match a regular expression.</para>
          </listitem>
        </itemizedlist>
        <para><command>svn_load_dirs.pl</command> takes three mandatory
        arguments.  The first argument is the URL to the base
        Subversion directory to work in.  This argument is followed by
        the URL&#x2014;relative to the first argument&#x2014;into which the
        current vendor drop will be imported.  Finally, the third
        argument is the local directory to import.  Using our previous
        example, a typical run of <command>svn_load_dirs.pl</command>
        might look like:</para>
        <screen>
$ svn_load_dirs.pl http://svn.example.com/repos/vendor/libcomplex \
                   current                                        \
                   /path/to/libcomplex-1.1
&#x2026;
</screen>
        <para>You can indicate that you'd like
        <command>svn_load_dirs.pl</command> to tag the new vendor drop
        by passing the <option>-t</option> command-line option and
        specifying a tag name.  This tag is another URL relative to
        the first program argument.</para>
        <screen>
$ svn_load_dirs.pl -t libcomplex-1.1                              \
                   http://svn.example.com/repos/vendor/libcomplex \
                   current                                        \
                   /path/to/libcomplex-1.1
&#x2026;
</screen>
        <para>When you run <command>svn_load_dirs.pl</command>, it
        examines the contents of your existing <quote>current</quote>
        vendor drop, and compares them with the proposed new vendor
        drop.  In the trivial case, there will be no files that are in
        one version and not the other, and the script will perform the
        new import without incident.  If, however, there are
        discrepancies in the file layouts between versions,
        <command>svn_load_dirs.pl</command> will ask you how
        to resolve those differences.  For example, you
        will have the opportunity to tell the script that you know
        that the file <filename>math.c</filename> in version 1.0 of
        libcomplex was renamed to <filename>arithmetic.c</filename> in
        libcomplex 1.1.  Any discrepancies not explained by moves
        are treated as regular additions and deletions.</para>
        <para>The script also accepts a separate configuration file for
        setting properties on files and directories matching a regular
        expression that are <emphasis>added</emphasis> to the
        repository.  This configuration file is specified to
        <command>svn_load_dirs.pl</command> using the
        <option>-p</option> command-line option.  Each line of the
        configuration file is a whitespace-delimited set of two or
        four values: a Perl-style regular expression to match the
        added path against, a control keyword (either
        <literal>break</literal> or <literal>cont</literal>), and then
        optionally a property name and value.</para>
        <screen>
\.png$              break   svn:mime-type   image/png
\.jpe?g$            break   svn:mime-type   image/jpeg
\.m3u$              cont    svn:mime-type   audio/x-mpegurl
\.m3u$              break   svn:eol-style   LF
.*                  break   svn:eol-style   native
</screen>
        <para>For each added path, the configured property changes whose
        regular expression matches the path are applied in order,
        unless the control specification is <literal>break</literal>
        (which means that no more property changes should be applied
        to that path).  If the control specification is
        <literal>cont</literal>&#x2014;an abbreviation for
        <literal>continue</literal>&#x2014;then matching will continue
        with the next line of the configuration file.</para>
        <para>Any whitespace in the regular expression, property name,
        or property value must be surrounded by either single or
        double quote characters.  You can escape quote characters that
        are not used for wrapping whitespace by preceding them with a
        backslash (<literal>\</literal>) character.  The backslash
        escapes only quotes when parsing the configuration file, so do
        not protect any other characters beyond what is necessary for
        the regular expression.</para>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.branchmerge.summary">
      <info>
        <title>Summary</title>
      </info>
      <para>We've covered a lot of ground in this chapter.  We've
      discussed the concepts of tags and branches, and demonstrated
      how Subversion implements these concepts by copying directories
      with the <command>svn copy</command> command.  We've shown how
      to use <command>svn merge</command> to copy changes from one
      branch to another, or roll back bad changes.  We've gone over
      the use of <command>svn switch</command> to create
      mixed-location working copies.  And we've talked about how one
      might manage the organization and lifetimes of branches in a
      repository.</para>
      <para>Remember the Subversion mantra: branches and tags are cheap.
      So use them liberally!  At the same time, don't forget to use
      good merging habits.  Cheap copies are only useful when you're
      careful about tracking your merging actions.</para>
    </section>
  </chapter>
  <!--
local variables:
sgml-parent-document: ("book.xml" "chapter")
end:
-->
  <chapter xml:id="svn.reposadmin">
    <info>
      <title>Repository Administration</title>
    </info>
    <para>The Subversion repository is the central storehouse of all
    your versioned data.  As such, it becomes an obvious candidate for
    all the love and attention an administrator can offer.  While the
    repository is generally a low-maintenance item, it is important to
    understand how to properly configure and care for it so that
    potential problems are avoided, and actual problems are safely
    resolved.</para>
    <para>In this chapter, we'll discuss how to create and configure a
    Subversion repository.  We'll also talk about repository
    maintenance, providing examples of how and when to use the
    <command>svnlook</command> and <command>svnadmin</command> tools
    provided with Subversion.  We'll address some common questions and
    mistakes, and give some suggestions on how to arrange the data in
    the repository.</para>
    <para>If you plan to access a Subversion repository only in the
    role of a user whose data is under version control (that is, via
    a Subversion client), you can skip this chapter altogether.
    However, if you are, or wish to become, a Subversion repository
    administrator,
    <footnote><para>This may sound really prestigious and lofty, but we're
        just talking about anyone who is interested in that
        mysterious realm beyond the working copy where everyone's
        data hangs out.</para></footnote>
    this chapter is for you.</para>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.reposadmin.basics">
      <info>
        <title>The Subversion Repository, Defined</title>
      </info>
      <para>Before jumping into the broader topic of repository
      administration, let's further define what a repository is.  How
      does it look?  How does it feel?  Does it take its tea hot or
      iced, sweetened, and with lemon?  As an administrator, you'll be
      expected to understand the composition of a repository both from
      a literal, OS-level perspective&#x2014;how a repository looks and
      acts with respect to non-Subversion tools&#x2014;and from a
      logical perspective&#x2014;dealing with how data is represented
      <emphasis>inside</emphasis> the repository.</para>
      <para>Seen through the eyes of a typical file browser application
      (such as the Windows Explorer) or command-line based filesystem
      navigation tools, the Subversion repository is just another
      directory full of stuff.  There are some subdirectories with
      human-readable configuration files in them, some subdirectories
      with some not-so-human-readable data files, and so on.  As in
      other areas of the Subversion design, modularity is given high
      regard, and hierarchical organization is preferred to cluttered
      chaos.  So a shallow glance into a typical repository from a
      nuts-and-bolts perspective is sufficient to reveal the basic
      components of the repository:</para>
      <screen>
$ ls repos
conf/  dav/  db/  format  hooks/  locks/  README.txt
</screen>
      <para>Here's a quick fly-by overview of what exactly you're seeing
      in this directory listing.  (Don't get bogged down in the
      terminology&#x2014;detailed coverage of these components exists
      elsewhere in this and other chapters.)</para>
      <variablelist>
        <varlistentry>
          <term>conf</term>
          <listitem>
            <para>A directory containing repository configuration files.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>dav</term>
          <listitem>
            <para>A directory provided to mod_dav_svn for its private
            housekeeping data.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>db</term>
          <listitem>
            <para>The data store for all of your versioned data.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>format</term>
          <listitem>
            <para>A file that contains a single integer that
            indicates the version number of the repository layout.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>hooks</term>
          <listitem>
            <para>A directory full of hook script templates (and hook
            scripts themselves, once you've installed some).</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>locks</term>
          <listitem>
            <para>A directory for Subversion's repository lock
            files, used for tracking accessors to the repository.</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>README.txt</term>
          <listitem>
            <para>A file whose contents merely inform its readers that
            they are looking at a Subversion repository.</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>Of course, when accessed via the Subversion libraries, this
      otherwise unremarkable collection of files and directories
      suddenly becomes an implementation of a virtual, versioned
      filesystem, complete with customizable event triggers.  This
      filesystem has its own notions of directories and files, very
      similar to the notions of such things held by real filesystems
      (such as NTFS, FAT32, ext3, and so on).  But this is a special
      filesystem&#x2014;it hangs these directories and files from
      revisions, keeping all the changes you've ever made to them
      safely stored and forever accessible.  This is where the
      entirety of your versioned data lives.</para>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.reposadmin.planning">
      <info>
        <title>Strategies for Repository Deployment</title>
      </info>
      <para>Due largely to the simplicity of the overall design of the
      Subversion repository and the technologies on which it relies,
      creating and configuring a repository are fairly straightforward
      tasks.  There are a few preliminary decisions you'll want to
      make, but the actual work involved in any given setup of a
      Subversion repository is pretty straightforward, tending towards
      mindless repetition if you find yourself setting up multiples of
      these things.</para>
      <para>Some things you'll want to consider up front, though, are:</para>
      <itemizedlist>
        <listitem>
          <para>What data do you expect to live in your repository (or
          repositories), and how will that data be organized?</para>
        </listitem>
        <listitem>
          <para>Where will your repository live, and how will it be
          accessed?</para>
        </listitem>
        <listitem>
          <para>What types of access control and repository event
          reporting do you need?</para>
        </listitem>
        <listitem>
          <para>Which of the available types of data store do you want
          to use?</para>
        </listitem>
      </itemizedlist>
      <para>In this section, we'll try to help you answer those
      questions.</para>
      <!-- =============================================================== -->
      <section xml:id="svn.reposadmin.projects.chooselayout">
        <info>
          <title>Planning Your Repository Organization</title>
        </info>
        <para>While Subversion allows you to move around versioned files
        and directories without any loss of information, and even
        provides ways of moving whole sets of versioned history from
        one repository to another, doing so can greatly disrupt the
        workflow of those who access the repository often and come to
        expect things to be at certain locations.  So before creating
        a new repository, try to peer into the future a bit; plan
        ahead before placing your data under version control.  By
        conscientiously <quote>laying out</quote> your repository or
        repositories and their versioned contents ahead of time, you
        can prevent many future headaches.</para>
        <para>Let's assume that as repository administrator, you will be
        responsible for supporting the version control system for
        several projects.  Your first decision is whether to use a
        single repository for multiple projects, or to give each
        project its own repository, or some compromise of these
        two.</para>
        <para>There are benefits to using a single repository for
        multiple projects, most obviously the lack of duplicated
        maintenance.  A single repository means that there is one set
        of hook programs, one thing to routinely backup, one thing to
        dump and load if Subversion releases an incompatible new
        version, and so on.  Also, you can move data between projects
        easily, and without losing any historical versioning
        information.</para>
        <para>The downside of using a single repository is that
        different projects may have different requirements in terms of
        the repository event triggers, such as needing to send commit
        notification emails to different mailing lists, or having
        different definitions about what does and does not constitute
        a legitimate commit.  These aren't insurmountable problems, of
        course&#x2014;it just means that all of your hook scripts have
        to be sensitive to the layout of your repository rather than
        assuming that the whole repository is associated with a single
        group of people.  Also, remember that Subversion uses
        repository-global revision numbers.  While those numbers don't
        have any particular magical powers, some folks still don't
        like the fact that even though no changes have been made to
        their project lately, the youngest revision number for the
        repository keeps climbing because other projects are actively
        adding new revisions.
        <footnote><para>Whether founded in ignorance or in poorly considered
            concepts about how to derive legitimate software
            development metrics, global revision numbers are a silly
            thing to fear, and <emphasis>not</emphasis> the kind of
            thing you should weigh when deciding how to arrange your
            projects and repositories.</para></footnote>
      </para>
        <para>A middle-ground approach can be taken, too.  For example,
        projects can be grouped by how well they relate to each other.
        You might have a few repositories with a handful of projects
        in each repository.  That way, projects that are likely to
        want to share data can do so easily, and as new revisions are
        added to the repository, at least the developers know that
        those new revisions are at least remotely related to everyone
        who uses that repository.</para>
        <para>After deciding how to organize your projects with respect
        to repositories, you'll probably want to think about directory
        hierarchies within the repositories themselves.  Because
        Subversion uses regular directory copies for branching and
        tagging (see <xref linkend="svn.branchmerge"/>), the
        Subversion community recommends that you choose a repository
        location for each <firstterm>project
        root</firstterm>&#x2014;the <quote>top-most</quote> directory
        which contains data related to that project&#x2014;and then
        create three subdirectories beneath that root:
        <filename>trunk</filename>, meaning the directory under which
        the main project development occurs;
        <filename>branches</filename>, which is a directory in which
        to create various named branches of the main development line;
        <filename>tags</filename>, which is a collection of tree
        snapshots that are created, and perhaps destroyed, but never
        changed.
        <footnote><para>The <filename>trunk</filename>, <filename>tags</filename>, 
            and <filename>branches</filename> trio are sometimes referred
            to as <quote>the TTB directories</quote>.</para></footnote>
        </para>
        <para>For example, your repository might look like:</para>
        <screen>
/
   calc/
      trunk/
      tags/
      branches/
   calendar/
      trunk/
      tags/
      branches/
   spreadsheet/
      trunk/
      tags/
      branches/
   &#x2026;
</screen>
        <para>Note that it doesn't matter where in your repository each
        project root is.  If you have only one project per repository,
        the logical place to put each project root is at the root of
        that project's respective repository.  If you have multiple
        projects, you might want to arrange them in groups inside the
        repository, perhaps putting projects with similar goals or
        shared code in the same subdirectory, or maybe just grouping
        them alphabetically.  Such an arrangement might look
        like:</para>
        <screen>
/
   utils/
      calc/
         trunk/
         tags/
         branches/
      calendar/
         trunk/
         tags/
         branches/
      &#x2026;
   office/
      spreadsheet/
         trunk/
         tags/
         branches/
      &#x2026;
</screen>
        <para>Lay out your repository in whatever way you see fit.
        Subversion does not expect or enforce a particular layout&#x2014;in
        its eyes, a directory is a directory is a directory.
        Ultimately, you should choose the repository arrangement that
        meets the needs of the people who work on the projects that
        live there.</para>
        <para>In the name of full disclosure, though, we'll mention
        another very common layout.  In this layout, the
        <filename>trunk</filename>, <filename>tags</filename>, and
        <filename>branches</filename> directories live in the root
        directory of your repository, and your projects are in
        subdirectories beneath those, like:</para>
        <screen>
/
   trunk/
      calc/
      calendar/
      spreadsheet/
      &#x2026;
   tags/
      calc/
      calendar/
      spreadsheet/
      &#x2026;
   branches/
      calc/
      calendar/
      spreadsheet/
      &#x2026;
</screen>
        <para>There's nothing particularly incorrect about such a
        layout, but it may or may not seem as intuitive for your
        users.  Especially in large, multi-project situations with
        many users, those users may tend to be familiar with only one
        or two of the projects in the repository.  But the
        projects-as-branch-siblings tends to de-emphasize project
        individuality and focus on the entire set of projects as a
        single entity.  That's a social issue though.  We like our
        originally suggested arrangement for purely practical
        reasons&#x2014;it's easier to ask about (or modify, or migrate
        elsewhere) the entire history of a single project when there's
        a single repository path that holds the entire
        history&#x2014;past, present, tagged, and branched&#x2014;for
        that project and that project alone.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.reposadmin.basics.hosting">
        <info>
          <title>Deciding Where and How to Host Your Repository</title>
        </info>
        <para>Before creating your Subversion repository, an obvious
        question you'll need to answer is where the thing is going to
        live.  This is strongly connected to a myriad of other
        questions involving how the repository will be accessed (via a
        Subversion server or directly), by whom (users behind your
        corporate firewall or the whole world out on the open
        Internet), what other services you'll be providing around
        Subversion (repository browsing interfaces, e-mail based
        commit notification, etc.), your data backup strategy, and so
        on.</para>
        <para>We cover server choice and configuration in <xref linkend="svn.serverconfig"/>, but the point we'd like to
        briefly make here is simply that the answers to some of these
        other questions might have implications that force your hand
        when deciding where your repository will live.  For example,
        certain deployment scenarios might require accessing the
        repository via a remote filesystem from multiple computers, in
        which case (as you'll read in the next section) your choice of
        a repository back-end data store turns out not to be a choice
        at all because only one of the available back-ends will work
        in this scenario.</para>
        <para>Addressing each possible way to deploy
        Subversion is both impossible, and outside the scope of this
        book.  We simply encourage you to evaluate your options using
        these pages and other sources as your reference material, and
        plan ahead.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.reposadmin.basics.backends">
        <info>
          <title>Choosing a Data Store</title>
        </info>
        <para>As of version 1.1, Subversion provides two options for the
        type of underlying data store&#x2014;often referred to as
        <quote>the back-end</quote> or, somewhat confusingly,
        <quote>the (versioned) filesystem</quote>&#x2014;that each
        repository uses.  One type of data store keeps everything in a
        Berkeley DB (or BDB) database environment; repositories that
        use this type are often referred to as being
        <quote>BDB-backed</quote>.  The other type stores data in
        ordinary flat files, using a custom format.  Subversion
        developers have adopted the habit of referring to this latter
        data storage mechanism as <firstterm>FSFS</firstterm>
        <footnote><para>Often pronounced <quote>fuzz-fuzz</quote>, if Jack
            Repenning has anything to say about it.  (This book,
            however, assumes that the reader is thinking
            <quote>eff-ess-eff-ess</quote>.)</para></footnote> 
        &#x2014;a versioned filesystem implementation that uses the
        native OS filesystem directly&#x2014;rather than via a database
        library or some other abstraction layer&#x2014;to store data.</para>
        <para><xref linkend="svn.reposadmin.basics.backends.tbl-1"/>
        gives a comparative overview of Berkeley DB and FSFS
        repositories.</para>
        <table xml:id="svn.reposadmin.basics.backends.tbl-1">
          <info>
            <title>Repository Data Store Comparison</title>
          </info>
          <tgroup cols="4">
            <thead>
              <row>
                <entry>Category</entry>
                <entry>Feature</entry>
                <entry>Berkeley DB</entry>
                <entry>FSFS</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry morerows="1">Reliability</entry>
                <entry>Data integrity</entry>
                <entry>when properly deployed, extremely reliable;
                Berkeley DB 4.4 brings auto-recovery</entry>
                <entry>older versions had some rarely demonstrated, but
                data-destroying bugs</entry>
              </row>
              <row>
                <entry>Sensitivity to interruptions</entry>
                <entry>very; crashes and permission problems can leave the
                database <quote>wedged</quote>, requiring journaled
                recovery procedures</entry>
                <entry>quite insensitive</entry>
              </row>
              <row>
                <entry morerows="3">Accessibility</entry>
                <entry>Usable from a read-only mount</entry>
                <entry>no</entry>
                <entry>yes</entry>
              </row>
              <row>
                <entry>Platform-independent storage</entry>
                <entry>no</entry>
                <entry>yes</entry>
              </row>
              <row>
                <entry>Usable over network filesystems</entry>
                <entry>generally, no</entry>
                <entry>yes</entry>
              </row>
              <row>
                <entry>Group permissions handling</entry>
                <entry>sensitive to user umask problems;  best if accessed
                by only one user</entry>
                <entry>works around umask problems</entry>
              </row>
              <row>
                <entry morerows="2">Scalability</entry>
                <entry>Repository disk usage</entry>
                <entry>larger (especially if logfiles aren't purged)</entry>
                <entry>smaller</entry>
              </row>
              <row>
                <entry>Number of revision trees</entry>
                <entry>database;  no problems</entry>
                <entry>some older native filesystems don't scale well with
                thousands of entries in a single directory</entry>
              </row>
              <row>
                <entry>Directories with many files</entry>
                <entry>slower</entry>
                <entry>faster</entry>
              </row>
              <row>
                <entry morerows="1">Performance</entry>
                <entry>Checking out latest revision</entry>
                <entry>no meaningful difference</entry>
                <entry>no meaningful difference</entry>
              </row>
              <row>
                <entry>Large commits</entry>
                <entry>slower overall, but cost is amortized across the
                lifetime of the commit</entry>
                <entry>faster overall, but finalization delay may cause 
                client timeouts</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>There are advantages and disadvantages to each of these
        two back-end types.  Neither of them is more
        <quote>official</quote> than the other, though the newer FSFS
        is the default data store as of Subversion 1.2.  Both are
        reliable enough to trust with your versioned data.  But as you
        can see in <xref linkend="svn.reposadmin.basics.backends.tbl-1"/>, the FSFS
        backend provides quite a bit more flexibility in terms of its
        supported deployment scenarios.  More flexibility means you
        have to work a little harder to find ways to deploy it
        incorrectly.  Those reasons&#x2014;plus the fact that not using
        Berkeley DB means there's one fewer component in the
        system&#x2014;largely explain why today almost everyone uses
        the FSFS backend when creating new repositories.</para>
        <para>Fortunately, most programs which access Subversion
        repositories are blissfully ignorant of which back-end data
        store is in use.  And you aren't even necessarily stuck with
        your first choice of a data store&#x2014;in the event that you
        change your mind later, Subversion provides ways of migrating
        your repository's data into another repository that uses a
        different back-end data store.  We talk more about that later
        in this chapter.</para>
        <para>The following subsections provide a more detailed look at
        the available data store types.</para>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.reposadmin.basics.backends.bdb">
          <info>
            <title>Berkeley DB</title>
          </info>
          <para>When the initial design phase of Subversion was in
          progress, the developers decided to use Berkeley DB for a
          variety of reasons, including its open-source license,
          transaction support, reliability, performance, API
          simplicity, thread-safety, support for cursors, and so
          on.</para>
          <para>Berkeley DB provides real transaction
          support&#x2014;perhaps its most powerful feature.  Multiple
          processes accessing your Subversion repositories don't have
          to worry about accidentally clobbering each other's data.
          The isolation provided by the transaction system is such
          that for any given operation, the Subversion repository code
          sees a static view of the database&#x2014;not a database that
          is constantly changing at the hand of some other
          process&#x2014;and can make decisions based on that view.  If
          the decision made happens to conflict with what another
          process is doing, the entire operation is rolled back as if
          it never happened, and Subversion gracefully retries the
          operation against a new, updated (and yet still static) view
          of the database.</para>
          <para>Another great feature of Berkeley DB is <firstterm>hot
          backups</firstterm>&#x2014;the ability to backup the database
          environment without taking it <quote>offline</quote>.  We'll
          discuss how to backup your repository in <xref linkend="svn.reposadmin.maint.backup"/>, but the benefits of being
          able to make fully functional copies of your repositories
          without any downtime should be obvious.</para>
          <para>Berkeley DB is also a very reliable database system when
          properly used.  Subversion uses Berkeley DB's logging
          facilities, which means that the database first writes to
          on-disk log files a description of any modifications it is
          about to make, and then makes the modification itself.  This
          is to ensure that if anything goes wrong, the database
          system can back up to a previous
          <firstterm>checkpoint</firstterm>&#x2014;a location in the
          log files known not to be corrupt&#x2014;and replay
          transactions until the data is restored to a usable state.
          See <xref linkend="svn.reposadmin.maint.diskspace"/> for
          more about Berkeley DB log files.</para>
          <para>But every rose has its thorn, and so we must note some
          known limitations of Berkeley DB.  First, Berkeley DB
          environments are not portable.  You cannot simply copy a
          Subversion repository that was created on a Unix system onto
          a Windows system and expect it to work.  While much of the
          Berkeley DB database format is architecture independent,
          there are other aspects of the environment that are not.
          Secondly, Subversion uses Berkeley DB in a way that will not
          operate on Windows 95/98 systems&#x2014;if you need to house
          a BDB-backed repository on a Windows machine, stick with
          Windows 2000 or newer.</para>
          <para>While Berkeley DB promises to behave correctly on
          network shares that meet a particular set of specifications,
          <footnote><para>Berkeley DB requires that the underlying filesystem
              implement strict POSIX locking semantics, and more
              importantly, the ability to map files directly into
              process memory.</para></footnote>
          most networked filesystem types and appliances do
          <emphasis>not</emphasis> actually meet those requirements.
          And in no case can you allow a BDB-backed repository that
          resides on a network share to be accessed by multiple
          clients of that share at once (which quite often is the
          whole point of having the repository live on a network share
          in the first place).</para>
          <warning>
            <para>If you attempt to use Berkeley DB on a non-compliant
            remote filesystem, the results are unpredictable&#x2014;you
            may see mysterious errors right away, or it may be months
            before you discover that your repository database is
            subtly corrupted.  You should strongly consider using the
            FSFS data store for repositories that need to live on a
            network share.</para>
          </warning>
          <para>Finally, because Berkeley DB is a library linked
          directly into Subversion, it's more sensitive to
          interruptions than a typical relational database system.
          Most SQL systems, for example, have a dedicated server
          process that mediates all access to tables.  If a program
          accessing the database crashes for some reason, the database
          daemon notices the lost connection and cleans up any mess
          left behind.  And because the database daemon is the only
          process accessing the tables, applications don't need to
          worry about permission conflicts.  These things are not the
          case with Berkeley DB, however.  Subversion (and programs
          using Subversion libraries) access the database tables
          directly, which means that a program crash can leave the
          database in a temporarily inconsistent, inaccessible state.
          When this happens, an administrator needs to ask Berkeley DB
          to restore to a checkpoint, which is a bit of an annoyance.
          Other things can cause a repository to <quote>wedge</quote>
          besides crashed processes, such as programs conflicting over
          ownership and permissions on the database files.</para>
          <note>
            <para>Berkeley DB 4.4 brings (to Subversion 1.4 and better)
            the ability for Subversion to automatically and
            transparently recover Berkeley DB environments in need of
            such recovery.  When a Subversion process attaches to a
            repository's Berkeley DB environment, it uses some process
            accounting mechanisms to detect any unclean disconnections
            by previous processes, performs any necessary recovery,
            and then continues on as if nothing happened.  This
            doesn't completely eliminate instances of repository
            wedging, but it does drastically reduce the amount of
            human interaction required to recover from them.</para>
          </note>
          <para>So while a Berkeley DB repository is quite fast and
          scalable, it's best used by a single server process running
          as one user&#x2014;such as Apache's <command>httpd</command>
          or <command>svnserve</command> (see <xref linkend="svn.serverconfig"/>)&#x2014;rather than accessing it
          as many different users via <literal>file://</literal> or
          <literal>svn+ssh://</literal> URLs.  If using a Berkeley DB
          repository directly as multiple users, be sure to read <xref linkend="svn.serverconfig.multimethod"/>.</para>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.reposadmin.basics.backends.fsfs">
          <info>
            <title>FSFS</title>
          </info>
          <para>In mid-2004, a second type of repository storage
          system&#x2014;one which doesn't use a database at
          all&#x2014;came into being.  An FSFS repository stores the
          changes associated with a revision in a single file, and so
          all of a repository's revisions can be found in a single
          subdirectory full of numbered files.  Transactions are
          created in separate subdirectories as individual files.
          When complete, the transaction file is renamed and moved
          into the revisions directory, thus guaranteeing that commits
          are atomic.  And because a revision file is permanent and
          unchanging, the repository also can be backed up while
          <quote>hot</quote>, just like a BDB-backed
          repository.</para>
          <para>The FSFS revision files describe a revision's
          directory structure, file contents, and deltas against files
          in other revision trees.  Unlike a Berkeley DB database,
          this storage format is portable across different operating
          systems and isn't sensitive to CPU architecture.  Because
          there's no journaling or shared-memory files being used, the
          repository can be safely accessed over a network filesystem
          and examined in a read-only environment.  The lack of
          database overhead also means that the overall repository
          size is a bit smaller.</para>
          <para>FSFS has different performance characteristics too.
          When committing a directory with a huge number of files,
          FSFS is able to more quickly append directory entries.  On
          the other hand, FSFS writes the latest version of a file as
          a delta against an earlier version, which means that
          checking out the latest tree is a bit slower than fetching
          the fulltexts stored in a Berkeley DB HEAD revision.  FSFS
          also has a longer delay when finalizing a commit, which
          could in extreme cases cause clients to time out while
          waiting for a response.</para>
          <para>The most important distinction, however, is FSFS's
          imperviousness to <quote>wedging</quote> when something goes
          wrong.  If a process using a Berkeley DB database runs into
          a permissions problem or suddenly crashes, the database can
          be left in an unusable state until an administrator recovers
          it.  If the same scenarios happen to a process using an FSFS
          repository, the repository isn't affected at all.  At worst,
          some transaction data is left behind.</para>
          <para>The only real argument against FSFS is its relative
          immaturity compared to Berkeley DB.  Unlike Berkeley DB,
          which has years of history, its own dedicated development
          team and, now, Oracle's mighty name attached to it,
          <footnote><para>Oracle bought Sleepycat and its flagship software,
              Berkeley DB, on Valentine's Day in 2006.</para></footnote>
          FSFS is a much newer bit of engineering.  Prior to
          Subversion 1.4, it was still shaking out some pretty serious
          data integrity bugs which, while only triggered in very rare
          cases, nonetheless did occur.  That said, FSFS has quickly
          become the back-end of choice for some of the largest public
          and private Subversion repositories, and promises a lower
          barrier to entry for Subversion across the board.</para>
        </section>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.reposadmin.create">
      <info>
        <title>Creating and Configuring Your Repository</title>
      </info>
      <para>In <xref linkend="svn.reposadmin.planning"/>, we looked at
      some of the important decisions that should be made before
      creating and configuring your Subversion repository.  Now, we
      finally get to get our hands dirty!  In this section, we'll see
      how to actually create a Subversion repository and configure it
      to perform custom actions when special repository events
      occur.</para>
      <!-- =============================================================== -->
      <section xml:id="svn.reposadmin.basics.creating">
        <info>
          <title>Creating the Repository</title>
        </info>
        <para>Subversion repository creation is an incredibly simple
        task.  The <command>svnadmin</command> utility that comes with
        Subversion provides a subcommand (<literal>create</literal>)
        for doing just that.</para>
        <screen>
$ svnadmin create /var/svn/repos
</screen>
        <para>This creates a new repository in the directory
        <filename>/var/svn/repos</filename>, and with the default
        filesystem data store.  Prior to Subversion 1.2, the default
        was to use Berkeley DB; the default is now FSFS.  You can
        explicitly choose the filesystem type using the
        <option>--fs-type</option> argument, which accepts as a
        parameter either <literal>fsfs</literal> or
        <literal>bdb</literal>.</para>
        <screen>
$ # Create an FSFS-backed repository
$ svnadmin create --fs-type fsfs /var/svn/repos
$
</screen>
        <screen>
# Create a Berkeley-DB-backed repository
$ svnadmin create --fs-type bdb /var/svn/repos
$
</screen>
        <para>After running this simple command, you have a Subversion
        repository.</para>
        <tip>
          <para>The path argument to <command>svnadmin</command> is just
          a regular filesystem path and not a URL like the
          <command>svn</command> client program uses when referring to
          repositories.  Both <command>svnadmin</command> and
          <command>svnlook</command> are considered server-side
          utilities&#x2014;they are used on the machine where the
          repository resides to examine or modify aspects of the
          repository, and are in fact unable to perform tasks across a
          network.  A common mistake made by Subversion newcomers is
          trying to pass URLs (even <quote>local</quote>
          <literal>file://</literal> ones) to these two programs.</para>
        </tip>
        <para>Present in the <filename>db/</filename> subdirectory of
        your repository is the implementation of the versioned
        filesystem. Your new repository's versioned filesystem begins
        life at revision 0, which is defined to consist of nothing but
        the top-level root (<filename>/</filename>) directory.
        Initially, revision 0 also has a single revision property,
        <literal>svn:date</literal>, set to the time at which the
        repository was created.</para>
        <para>Now that you have a repository, it's time to customize
        it.</para>
        <warning>
          <para>While some parts of a Subversion repository&#x2014;such
          as the configuration files and hook scripts&#x2014;are meant
          to be examined and modified manually, you shouldn't (and
          shouldn't need to) tamper with the other parts of the
          repository <quote>by hand</quote>.  The
          <command>svnadmin</command> tool should be sufficient for
          any changes necessary to your repository, or you can look to
          third-party tools (such as Berkeley DB's tool suite) for
          tweaking relevant subsections of the repository.  Do
          <emphasis>not</emphasis> attempt manual manipulation of your
          version control history by poking and prodding around in
          your repository's data store files!</para>
        </warning>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.reposadmin.create.hooks">
        <info>
          <title>Implementing Repository Hooks</title>
        </info>
        <para>A <firstterm>hook</firstterm> is a program triggered by
        some repository event, such as the creation of a new revision
        or the modification of an unversioned property.  Some hooks
        (the so-called <quote>pre hooks</quote>) run in advance of a
        repository operation and provide a means by which to both
        report what is about to happen and to prevent it from
        happening at all.  Other hooks (the <quote>post hooks</quote>)
        run after the completion of a repository event, and are useful
        for performing tasks that examine&#x2014;but don't
        modify&#x2014;the repository.  Each hook is handed enough
        information to tell what that event is (or was), the specific
        repository changes proposed (or completed), and the username
        of the person who triggered the event.</para>
        <para>The <filename>hooks</filename> subdirectory is, by
        default, filled with templates for various repository
        hooks.</para>
        <screen>
$ ls repos/hooks/
post-commit.tmpl	  post-unlock.tmpl  pre-revprop-change.tmpl
post-lock.tmpl		  pre-commit.tmpl   pre-unlock.tmpl
post-revprop-change.tmpl  pre-lock.tmpl     start-commit.tmpl
</screen>
        <para>There is one template for each hook that the Subversion
        repository supports, and by examining the contents of those
        template scripts, you can see what triggers each script
        to run and what data is passed to that script.  Also present
        in many of these templates are examples of how one might use
        that script, in conjunction with other Subversion-supplied
        programs, to perform common useful tasks.  To actually install
        a working hook, you need only place some executable program or
        script into the <filename>repos/hooks</filename> directory
        which can be executed as the name (like
        <command>start-commit</command> or
        <command>post-commit</command>) of the hook.</para>
        <para>On Unix platforms, this means supplying a script or
        program (which could be a shell script, a Python program, a
        compiled C binary, or any number of other things) named
        exactly like the name of the hook.  Of course, the template
        files are present for more than just informational
        purposes&#x2014;the easiest way to install a hook on Unix
        platforms is to simply copy the appropriate template file to a
        new file that lacks the <literal>.tmpl</literal> extension,
        customize the hook's contents, and ensure that the script is
        executable.  Windows, however, uses file extensions to
        determine whether or not a program is executable, so you would
        need to supply a program whose basename is the name of the
        hook, and whose extension is one of the special extensions
        recognized by Windows for executable programs, such as
        <filename>.exe</filename> for programs, and
        <filename>.bat</filename> for batch files.</para>
        <tip>
          <para>For security reasons, the Subversion repository executes
          hook programs with an empty environment&#x2014;that is, no
          environment variables are set at all, not even
          <literal>$PATH</literal> (or <literal>%PATH%</literal>,
          under Windows).  Because of this, many administrators
          are baffled when their hook program runs fine by hand, but
          doesn't work when run by Subversion.  Be sure to explicitly
          set any necessary environment variables in your hook program
          and/or use absolute paths to programs.</para>
        </tip>
        <para>Subversion executes hooks as the same user who owns the
        process which is accessing the Subversion repository.  In most
        cases, the repository is being accessed via a Subversion
        server, so this user is the same user as which that server
        runs on the system.  The hooks themselves will need to be
        configured with OS-level permissions that allow that user to
        execute them.  Also, this means that any file or programs
        (including the Subversion repository itself) accessed directly
        or indirectly by the hook will be accessed as the same user.
        In other words, be alert to potential permission-related
        problems that could prevent the hook from performing the tasks
        it is designed to perform.</para>
        <para>There are nine hooks implemented by the Subversion
        repository, and you can get details about each of them in
        <xref linkend="svn.ref.reposhooks"/>.  As a repository
        administrator, you'll need to decide which of hooks you wish
        to implement (by way of providing an appropriately named and
        permissioned hook program), and how.  When you make this
        decision, keep in mind
        the big picture of how your repository is deployed.
        For example, if you are using server configuration
        to determine which users are permitted to commit
        changes to your repository, then you don't need to do this
        sort of access control via the hook system.</para>
        <para>There is no shortage of Subversion hook programs and
        scripts freely available either from the Subversion community
        itself or elsewhere.  These scripts cover a wide range of
        utility&#x2014;basic access control, policy adherence checking,
        issue tracker integration, email- or syndication-based commit
        notification, and beyond.  See <xref linkend="svn.3rdparty"/>
        for discussion of some of the most commonly used hook
        programs.  Or, if you wish to write your own, see <xref linkend="svn.developer"/>.</para>
        <warning>
          <para>While hook scripts can do almost
          anything, there is one dimension in which hook script
          authors should show restraint:  do <emphasis>not</emphasis>
          modify a commit transaction using hook scripts.  While it
          might be tempting to use hook scripts to automatically
          correct errors or shortcomings or policy violations present
          in the files being committed, doing so can cause problems.
          Subversion keeps client-side caches of certain bits of
          repository data, and if you change a commit transaction in
          this way, those caches become indetectably stale.  This
          inconsistency can lead to surprising and unexpected
          behavior.  Instead of modifying the transaction, you should
          simply <emphasis>validate</emphasis> the transaction in the
          <filename>pre-commit</filename> hook and reject the commit
          if it does not meet the desired requirements.  As a
          bonus, your users will learn the value of careful,
          compliance-minded work habits.</para>
        </warning>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.reposadmin.create.bdb">
        <info>
          <title>Berkeley DB Configuration</title>
        </info>
        <para>A Berkeley DB environment is an encapsulation of one or
        more databases, log files, region files and configuration
        files.  The Berkeley DB environment has its own set of default
        configuration values for things like the number of database locks
        allowed to be taken out at any given time, or the maximum size
        of the journaling log files, etc.  Subversion's filesystem
        logic additionally chooses default values for some of the
        Berkeley DB configuration options.  However, sometimes your
        particular repository, with its unique collection of data and
        access patterns, might require a different set of
        configuration option values.</para>
        <para>The producers of Berkeley DB understand that different
        applications and database environments have different
        requirements, and so they have provided a mechanism for
        overriding at runtime many of the configuration values for the
        Berkeley DB environment:  BDB checks for the presence of
        a file named <filename>DB_CONFIG</filename> in the environment
        directory (namely, the repository's
        <filename>db</filename> subdirectory), and parses the options found in that file .  Subversion itself creates
        this file when it creates the rest of the repository.  The
        file initially contains some default options, as well as
        pointers to the Berkeley DB online documentation so you can
        read about what those options do.  Of course, you are free to
        add any of the supported Berkeley DB options to your
        <filename>DB_CONFIG</filename> file.  Just be aware that while
        Subversion never attempts to read or interpret the contents of
        the file, and makes no direct use of the option settings in
        it, you'll want to avoid any configuration changes that may
        cause Berkeley DB to behave in a fashion that is at odds with
        what Subversion might expect.  Also, changes made to
        <filename>DB_CONFIG</filename> won't take effect until you
        recover the database environment (using <command>svnadmin
        recover</command>).</para>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.reposadmin.maint">
      <info>
        <title>Repository Maintenance</title>
      </info>
      <para>Maintaining a Subversion repository can be daunting,
      mostly due to the complexities inherent in systems which have a
      database backend.  Doing the task well is all about knowing the
      tools&#x2014;what they are, when to use them, and how to use
      them.  This section will introduce you to the repository
      administration tools provided by Subversion, and how to wield
      them to accomplish tasks such as repository data migration,
      upgrades, backups and cleanups.</para>
      <!-- =============================================================== -->
      <section xml:id="svn.reposadmin.maint.tk">
        <info>
          <title>An Administrator's Toolkit</title>
        </info>
        <para>Subversion provides a handful of utilities useful for
        creating, inspecting, modifying and repairing your repository.
        Let's look more closely at each of those tools.  Afterward,
        we'll briefly examine some of the utilities included in the
        Berkeley DB distribution that provide functionality specific
        to your repository's database backend not otherwise provided
        by Subversion's own tools.</para>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.reposadmin.maint.tk.svnadmin">
          <info>
            <title>svnadmin</title>
          </info>
          <para>The <command>svnadmin</command> program is the
          repository administrator's best friend.  Besides providing
          the ability to create Subversion repositories, this program
          allows you to perform several maintenance operations on
          those repositories.  The syntax of
          <command>svnadmin</command> is similar to that of other
          Subversion command-line programs:</para>
          <screen>
$ svnadmin help
general usage: svnadmin SUBCOMMAND REPOS_PATH  [ARGS &amp; OPTIONS ...]
Type 'svnadmin help &lt;subcommand&gt;' for help on a specific subcommand.
Type 'svnadmin --version' to see the program version and FS modules.

Available subcommands:
   crashtest
   create
   deltify
&#x2026;
</screen>
          <para>We've already mentioned <command>svnadmin</command>'s
          <literal>create</literal> subcommand (see <xref linkend="svn.reposadmin.basics.creating"/>).  Most of the
          others we will cover later
          in this chapter.  And you can consult <xref linkend="svn.ref.svnadmin"/> for a full rundown of
          subcommands and what each of them offers.</para>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.reposadmin.maint.tk.svnlook">
          <info>
            <title>svnlook</title>
          </info>
          <para><command>svnlook</command> is a tool provided by
          Subversion for examining the various revisions and
          <firstterm>transactions</firstterm> (which are revisions
          in-the-making) in a repository.  No part of this program
          attempts to change the repository.  <command>svnlook</command>
          is typically used by the repository hooks for reporting the
          changes that are about to be committed (in the case of the
          <command>pre-commit</command> hook) or that were just
          committed (in the case of the <command>post-commit</command>
          hook) to the repository.  A repository administrator may use
          this tool for diagnostic purposes.</para>
          <para><command>svnlook</command> has a straightforward
          syntax:</para>
          <screen>
$ svnlook help
general usage: svnlook SUBCOMMAND REPOS_PATH [ARGS &amp; OPTIONS ...]
Note: any subcommand which takes the '--revision' and '--transaction'
      options will, if invoked without one of those options, act on
      the repository's youngest revision.
Type 'svnlook help &lt;subcommand&gt;' for help on a specific subcommand.
Type 'svnlook --version' to see the program version and FS modules.
&#x2026;
</screen>
          <para>Nearly every one of <command>svnlook</command>'s
          subcommands can operate on either a revision or a
          transaction tree, printing information about the tree
          itself, or how it differs from the previous revision of the
          repository.  You use the <option>--revision (-r)</option> and
          <option>--transaction (-t)</option> options to specify which
          revision or transaction, respectively, to examine.  In the
          absence of both the <option>--revision (-r)</option> and
          <option>--transaction (-t)</option> options,
          <command>svnlook</command> will examine the youngest (or
          <quote>HEAD</quote>) revision in the repository.  So the
          following two commands do exactly the same thing when 19 is
          the youngest revision in the repository located at
          <filename>/var/svn/repos</filename>:</para>
          <screen>
$ svnlook info /var/svn/repos
$ svnlook info /var/svn/repos -r 19
</screen>
          <para>The only exception to these rules about subcommands is
          the <command>svnlook youngest</command> subcommand, which
          takes no options, and simply prints out the repository's
          youngest revision number.</para>
          <screen>
$ svnlook youngest /var/svn/repos
19
</screen>
          <note>
            <para>Keep in mind that the only transactions you can browse
            are uncommitted ones.  Most repositories will have no such
            transactions, because transactions are usually either
            committed (in which case, you should access them as
            revision with the <option>--revision (-r)</option> option) or
            aborted and removed.</para>
          </note>
          <para>Output from <command>svnlook</command> is designed to be
          both human- and machine-parsable.  Take as an example the output
          of the <literal>info</literal> subcommand:</para>
          <screen>
$ svnlook info /var/svn/repos
sally
2002-11-04 09:29:13 -0600 (Mon, 04 Nov 2002)
27
Added the usual
Greek tree.
</screen>
          <para>The output of the <literal>info</literal> subcommand is
          defined as:</para>
          <orderedlist inheritnum="ignore" continuation="restarts">
            <listitem>
              <para>The author, followed by a newline.</para>
            </listitem>
            <listitem>
              <para>The date, followed by a newline.</para>
            </listitem>
            <listitem>
              <para>The number of characters in the log message,
              followed by a newline.</para>
            </listitem>
            <listitem>
              <para>The log message itself, followed by a newline.</para>
            </listitem>
          </orderedlist>
          <para>This output is human-readable, meaning items like the
          datestamp are displayed using a textual representation
          instead of something more obscure (such as the number of
          nanoseconds since the Tasty Freeze guy drove by).  But the
          output is also machine-parsable&#x2014;because the log
          message can contain multiple lines and be unbounded in
          length, <command>svnlook</command> provides the length of
          that message before the message itself.  This allows scripts
          and other wrappers around this command to make intelligent
          decisions about the log message, such as how much memory to
          allocate for the message, or at least how many bytes to skip
          in the event that this output is not the last bit of data in
          the stream.</para>
          <para><command>svnlook</command> can perform a variety of
          other queries:  displaying subsets of bits of information
          we've mentioned previously, recursively listing versioned
          directory trees, reporting which paths were modified in a
          given revision or transaction, showing textual and property
          differences made to files and directories, and so on.  See
          <xref linkend="svn.ref.svnlook"/> for a full reference of
          <command>svnlook</command>'s features.</para>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.reposadmin.maint.tk.svndumpfilter">
          <info>
            <title>svndumpfilter</title>
          </info>
          <para>While it won't be the most commonly used tool at the
          administrator's disposal, <command>svndumpfilter</command>
          provides a very particular brand of useful
          functionality&#x2014;the ability to quickly and easily modify
          streams of Subversion repository history data by acting as a
          path-based filter.</para>
          <para>The syntax of <command>svndumpfilter</command> is as
          follows:</para>
          <screen>
$ svndumpfilter help
general usage: svndumpfilter SUBCOMMAND [ARGS &amp; OPTIONS ...]
Type "svndumpfilter help &lt;subcommand&gt;" for help on a specific subcommand.
Type 'svndumpfilter --version' to see the program version.
  
Available subcommands:
   exclude
   include
   help (?, h)
</screen>
          <para>There are only two interesting subcommands.  They allow
          you to make the choice between explicit or implicit
          inclusion of paths in the stream:</para>
          <variablelist>
            <varlistentry>
              <term>
                <literal>exclude</literal>
              </term>
              <listitem>
                <para>Filter out a set of paths from the dump data
                stream.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <literal>include</literal>
              </term>
              <listitem>
                <para>Allow only the requested set of paths to pass
                through the dump data stream.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <para>You can learn more about these subcommands and
          <command>svndumpfilter</command>'s unique purpose in <xref linkend="svn.reposadmin.maint.filtering"/>.</para>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.reposadmin.maint.tk.svnsync">
          <info>
            <title>svnsync</title>
          </info>
          <para>The <command>svnsync</command> program, which is new to
          the 1.4 release of Subversion, provides all the
          functionality required for maintaining a read-only mirror of
          a Subversion repository.  The program really has one
          job&#x2014;to transfer one repository's versioned history
          into another repository.  And while there are few ways to do
          that, its primary strength is that it can operate
          remotely&#x2014;the <quote>source</quote> and
          <quote>sink</quote>
          <footnote><para>Or is that, the <quote>sync</quote>?</para></footnote>
          repositories may be on different computers from each other
          and from <command>svnsync</command> itself.</para>
          <para>As you might expect, <command>svnsync</command> has a
          syntax that looks very much like every other program we've
          mentioned in this chapter:</para>
          <screen>
$ svnsync help
general usage: svnsync SUBCOMMAND DEST_URL  [ARGS &amp; OPTIONS ...]
Type 'svnsync help &lt;subcommand&gt;' for help on a specific subcommand.
Type 'svnsync --version' to see the program version and RA modules.

Available subcommands:
   initialize (init)
   synchronize (sync)
   copy-revprops
   help (?, h)
$
</screen>
          <para>We talk more about replication repositories with
          <command>svnsync</command> in <xref linkend="svn.reposadmin.maint.replication"/>.</para>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.reposadmin.maint.tk.bdbutil">
          <info>
            <title>Berkeley DB Utilities</title>
          </info>
          <para>If you're using a Berkeley DB repository, then all of
          your versioned filesystem's structure and data live in a set
          of database tables within the <filename>db/</filename>
          subdirectory of your repository.  This subdirectory is a
          regular Berkeley DB environment directory, and can therefore
          be used in conjunction with any of the Berkeley database
          tools, typically provided as part of the Berkeley DB
          distribution.</para>
          <para>For day-to-day Subversion use, these tools are
          unnecessary.  Most of the functionality typically needed for
          Subversion repositories has been duplicated in the
          <command>svnadmin</command> tool.  For example,
          <command>svnadmin list-unused-dblogs</command> and
          <command>svnadmin list-dblogs</command> perform a
          subset of what is provided by the Berkeley
          <command>db_archive</command> command, and <command>svnadmin
          recover</command> reflects the common use cases of the
          <command>db_recover</command> utility.</para>
          <para>However, there are still a few Berkeley DB utilities
          that you might find useful.  The <command>db_dump</command>
          and <command>db_load</command> programs write and read,
          respectively, a custom file format which describes the keys
          and values in a Berkeley DB database.  Since Berkeley
          databases are not portable across machine architectures,
          this format is a useful way to transfer those databases from
          machine to machine, irrespective of architecture or
          operating system.  As we describe later in this chapter, you
          can also use <command>svnadmin dump</command> and
          <command>svnadmin load</command> for similar purposes, but
          <command>db_dump</command> and <command>db_load</command>
          can do certain jobs just as well and much faster.  They can
          also be useful if the experienced Berkeley DB hacker needs
          to do in-place tweaking of the data in a BDB-backed
          repository for some reason, which is something Subversion's
          utilities won't allow.  Also, the <command>db_stat</command>
          utility can provide useful information about the status of
          your Berkeley DB environment, including detailed statistics
          about the locking and storage subsystems.</para>
          <para>For more information on the Berkeley DB tool chain,
          visit the documentation section of the Berkeley DB section
          of Oracle's website, located at <uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.oracle.com/technology/documentation/berkeley-db/db/">http://www.oracle.com/technology/documentation/berkeley-db/db/</uri>.</para>
        </section>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.reposadmin.maint.setlog">
        <info>
          <title>Commit Log Message Correction</title>
        </info>
        <para>Sometimes a user will have an error in her log message (a
        misspelling or some misinformation, perhaps).  If the
        repository is configured (using the
        <literal>pre-revprop-change</literal> hook; see <xref linkend="svn.reposadmin.create.hooks"/>) to accept changes to
        this log message after the commit is finished, then the user
        can <quote>fix</quote> her log message remotely using the
        <command>svn</command> program's <literal>propset</literal>
        command (see <xref linkend="svn.ref.svn.c.propset"/>).
        However, because of the potential to lose information forever,
        Subversion repositories are not, by default, configured to
        allow changes to unversioned properties&#x2014;except by an
        administrator.</para>
        <para>If a log message needs to be changed by an administrator,
        this can be done using <command>svnadmin setlog</command>.
        This command changes the log message (the
        <literal>svn:log</literal> property) on a given revision of a
        repository, reading the new value from a provided file.</para>
        <screen>
$ echo "Here is the new, correct log message" &gt; newlog.txt
$ svnadmin setlog myrepos newlog.txt -r 388
</screen>
        <para>The <command>svnadmin setlog</command> command, by
        default, is
        still bound by the same protections against modifying
        unversioned properties as a remote client is&#x2014;the
        <literal>pre-</literal> and
        <literal>post-revprop-change</literal> hooks are still
        triggered, and therefore must be set up to accept changes of
        this nature.  But an administrator can get around these
        protections by passing the <option>--bypass-hooks</option>
        option to the <command>svnadmin setlog</command> command.</para>
        <warning>
          <para>Remember, though, that by bypassing the hooks, you are
          likely avoiding such things as email notifications of
          property changes, backup systems which track unversioned
          property changes, and so on.  In other words, be very
          careful about what you are changing, and how you change
          it.</para>
        </warning>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.reposadmin.maint.diskspace">
        <info>
          <title>Managing Disk Space</title>
        </info>
        <para>While the cost of storage has dropped incredibly in the
        past few years, disk usage is still a valid concern for
        administrators seeking to version large amounts of data.
        Every bit of version history information stored in the live
        repository needs to be backed up
        elsewhere, perhaps multiple times as part of rotating backup
        schedules.  It is useful to know what pieces of Subversion's
        repository data need to remain on the live site, which need to
        be backed up, and which can be safely removed.</para>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.reposadmin.maint.diskspace.deltas">
          <info>
            <title>How Subversion saves disk space</title>
          </info>
          <para>To keep the repository small,
          Subversion uses <firstterm>deltification</firstterm> (or,
          <quote>deltified storage</quote>) within the repository
          itself.  Deltification involves encoding the representation
          of a chunk of data as a collection of differences against
          some other chunk of data.  If the two pieces of data are
          very similar, this deltification results in storage savings
          for the deltified chunk&#x2014;rather than taking up space
          equal to the size of the original data, it takes up only
          enough space to say, <quote>I look just like this other
          piece of data over here, except for the following couple of
          changes</quote>.  The result is that most of the repository
          data that tends to be bulky&#x2014;namely, the contents of
          versioned files&#x2014;is stored at a much smaller size than
          the original <quote>fulltext</quote> representation of that
          data.  And for repositories created with Subversion 1.4 or
          later, the space savings are even better&#x2014;now those
          fulltext representations of file contents are themselves
          compressed.</para>
          <note>
            <para>Because all of the data that is subject to
            deltification in a BDB-backed repository is stored in a
            single Berkeley DB database file, reducing the size of the
            stored values will not immediately reduce the size of the
            database file itself.  Berkeley DB will, however, keep
            internal records of unused areas of the database file, and
            consume those areas first before growing the size of the
            database file.  So while deltification doesn't produce
            immediate space savings, it can drastically slow future
            growth of the database.</para>
          </note>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.reposadmin.maint.diskspace.deadtxns">
          <info>
            <title>Removing dead transactions</title>
          </info>
          <para>Though they are uncommon, there are circumstances in
          which a Subversion commit process might fail, leaving behind
          in the repository the remnants of the revision-to-be that
          wasn't&#x2014;an uncommitted transaction and all the file and
          directory changes associated with it.  This could happen for
          several reasons:  perhaps the client operation was
          inelegantly terminated by the user, or a network failure
          occurred in the middle of an operation.
          Regardless of the reason, dead transactions can happen.
          They don't do any real harm, other than consuming disk
          space.  A fastidious administrator may nonetheless wish to
          remove them.</para>
          <para>You can use <command>svnadmin</command>'s
          <literal>lstxns</literal> command to list the names of the
          currently outstanding transactions.</para>
          <screen>
$ svnadmin lstxns myrepos
19
3a1
a45
$
</screen>
          <para>Each item in the resultant output can then be used with
          <command>svnlook</command> (and its
          <option>--transaction (-t)</option> option) to determine who
          created the transaction, when it was created, what types of
          changes were made in the transaction&#x2014;information that
          is helpful in determining whether or not the transaction is
          a safe candidate for removal!  If you do indeed want to
          remove a transaction, its name
          can be passed to <command>svnadmin rmtxns</command>, which
          will perform the cleanup of the transaction.  In fact, the
          <literal>rmtxns</literal> subcommand can take its input
          directly from the output of
          <literal>lstxns</literal>!</para>
          <screen>
$ svnadmin rmtxns myrepos `svnadmin lstxns myrepos`
$
</screen>
          <para>If you use these two subcommands like this, you should
          consider making your repository temporarily inaccessible to
          clients.  That way, no one can begin a legitimate
          transaction before you start your cleanup.  <xref linkend="svn.reposadmin.maint.diskspace.deadtxns.ex-1"/>
          contains a bit of shell-scripting that can quickly generate
          information about each outstanding transaction in your
          repository.</para>
          <example xml:id="svn.reposadmin.maint.diskspace.deadtxns.ex-1">
            <info>
              <title>txn-info.sh (Reporting Outstanding Transactions)</title>
            </info>
            <programlisting>
#!/bin/sh

### Generate informational output for all outstanding transactions in
### a Subversion repository.

REPOS="${1}"
if [ "x$REPOS" = x ] ; then
  echo "usage: $0 REPOS_PATH"
  exit
fi

for TXN in `svnadmin lstxns ${REPOS}`; do 
  echo "---[ Transaction ${TXN} ]-------------------------------------------"
  svnlook info "${REPOS}" -t "${TXN}"
done
</programlisting>
          </example>
          <para>The output of the script is basically a concatenation of
          several chunks of <command>svnlook info</command> output
          (see <xref linkend="svn.reposadmin.maint.tk.svnlook"/>), and
          will look something like:</para>
          <screen>
$ txn-info.sh myrepos
---[ Transaction 19 ]-------------------------------------------
sally
2001-09-04 11:57:19 -0500 (Tue, 04 Sep 2001)
0
---[ Transaction 3a1 ]-------------------------------------------
harry
2001-09-10 16:50:30 -0500 (Mon, 10 Sep 2001)
39
Trying to commit over a faulty network.
---[ Transaction a45 ]-------------------------------------------
sally
2001-09-12 11:09:28 -0500 (Wed, 12 Sep 2001)
0
$
</screen>
          <para>A long-abandoned transaction usually represents some
          sort of failed or interrupted commit.  A transaction's
          datestamp can provide interesting information&#x2014;for
          example, how likely is it that an operation begun nine
          months ago is still active?</para>
          <para>In short, transaction cleanup decisions need not be made
          unwisely.  Various sources of information&#x2014;including
          Apache's error and access logs, Subversion's operational
          logs, Subversion revision history, and so on&#x2014;can be
          employed in the decision-making process.  And of course, an
          administrator can often simply communicate with a seemingly
          dead transaction's owner (via email, for example) to verify
          that the transaction is, in fact, in a zombie state.</para>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.reposadmin.maint.diskspace.bdblogs">
          <info>
            <title>Purging unused Berkeley DB logfiles</title>
          </info>
          <para>Until recently, the largest offender of disk space usage
          with respect to BDB-backed Subversion repositories was the
          log files in which Berkeley DB performs its pre-writes
          before modifying the actual database files.  These files
          capture all the actions taken along the route of changing
          the database from one state to another&#x2014;while the
          database files, at any given time, reflect a particular state, the log
          files contain all the many changes along the way <emphasis>between</emphasis>
          states.  Thus, they can grow and accumulate quite
          rapidly.</para>
          <para>Fortunately, beginning with the 4.2 release of Berkeley
          DB, the database environment has the ability to remove its
          own unused log files automatically.  Any
          repositories created using an <command>svnadmin</command>
          which is compiled against Berkeley DB version 4.2 or greater
          will be configured for this automatic log file removal.  If
          you don't want this feature enabled, simply pass the
          <option>--bdb-log-keep</option> option to the
          <command>svnadmin create</command> command.  If you forget
          to do this, or change your mind at a later time, simply edit
          the <filename>DB_CONFIG</filename> file found in your
          repository's <filename>db</filename> directory, comment out
          the line which contains the <literal>set_flags
          DB_LOG_AUTOREMOVE</literal> directive, and then run
          <command>svnadmin recover</command> on your repository to
          force the configuration changes to take effect.  See <xref linkend="svn.reposadmin.create.bdb"/> for more information about
          database configuration.</para>
          <para>Without some sort of automatic log file removal in
          place, log files will accumulate as you use your repository.
          This is actually somewhat of a feature of the database
          system&#x2014;you should be able to recreate your entire
          database using nothing but the log files, so these files can
          be useful for catastrophic database recovery.  But
          typically, you'll want to archive the log files that are no
          longer in use by Berkeley DB, and then remove them from disk
          to conserve space.  Use the <command>svnadmin
          list-unused-dblogs</command> command to list the unused
          log files:</para>
          <screen>
$ svnadmin list-unused-dblogs /var/svn/repos
/var/svn/repos/log.0000000031
/var/svn/repos/log.0000000032
/var/svn/repos/log.0000000033
&#x2026;
$ rm `svnadmin list-unused-dblogs /var/svn/repos`
## disk space reclaimed!
</screen>
          <warning>
            <para>BDB-backed repositories whose log files are used
            as part of a backup or disaster recovery plan should
            <emphasis>not</emphasis> make use of the log file
            autoremoval feature.  Reconstruction of a repository's
            data from log files can only be accomplished when <emphasis>all</emphasis> the log
            files are available.  If some of the log files are
            removed from disk before the backup system has a chance to
            copy them elsewhere, the incomplete set of backed-up log
            files is essentially useless.</para>
          </warning>
        </section>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.reposadmin.maint.recovery">
        <info>
          <title>Berkeley DB Recovery</title>
        </info>
        <para>As mentioned in <xref linkend="svn.reposadmin.basics.backends.bdb"/>, a Berkeley DB
        repository can sometimes be left in frozen state if not closed
        properly.  When this happens, an administrator needs to rewind
        the database back into a consistent state.  This is unique to
        BDB-backed repositories, though&#x2014;if you are using
        FSFS-backed ones instead, this won't apply to you.  And for
        those of you using Subversion 1.4 with Berkeley DB 4.4 or
        better, you should find that Subversion has become much more
        resilient in these types of situations.  Still, wedged
        Berkeley DB repositories do occur, and an administrator needs
        to know how to safely deal with this circumstance.</para>
        <para>In order to protect the data in your repository, Berkeley
        DB uses a locking mechanism.  This mechanism ensures that
        portions of the database are not simultaneously modified by
        multiple database accessors, and that each process sees the
        data in the correct state when that data is being read from
        the database.  When a process needs to change something in the
        database, it first checks for the existence of a lock on the
        target data.  If the data is not locked, the process locks the
        data, makes the change it wants to make, and then unlocks the
        data.  Other processes are forced to wait until that lock is
        removed before they are permitted to continue accessing that
        section of the database.  (This has nothing to do with the
        locks that you, as a user, can apply to versioned files within
        the repository; we try to clear up the confusion caused by
        this terminology collision in <xref linkend="svn.advanced.locking.meanings"/>.)</para>
        <para>In the course of using your Subversion repository, fatal
        errors or interruptions can prevent a process from having the
        chance to remove the locks it has placed in the database.  The
        result is that the back-end database system gets
        <quote>wedged</quote>.  When this happens, any attempts to
        access the repository hang indefinitely (since each new
        accessor is waiting for a lock to go away&#x2014;which isn't
        going to happen).</para>
        <para>If this happens to your repository, don't panic.  The
        Berkeley DB filesystem takes advantage of database
        transactions and checkpoints and pre-write journaling to
        ensure that only the most catastrophic of events
        <footnote><para>E.g.:  hard drive + huge electromagnet = disaster.</para></footnote>
        can permanently destroy a database environment.  A
        sufficiently paranoid repository administrator will have made
        off-site backups of the repository data in some fashion, but
        don't head off to the tape backup storage closet just yet.</para>
        <para>Instead, use the following recipe to attempt to
        <quote>unwedge</quote> your repository:</para>
        <orderedlist inheritnum="ignore" continuation="restarts">
          <listitem>
            <para>Make sure that there are no processes accessing (or
            attempting to access) the repository.  For networked
            repositories, this means shutting down the Apache HTTP
            Server or svnserve daemon, too.</para>
          </listitem>
          <listitem>
            <para>Become the user who owns and manages the repository.
            This is important, as recovering a repository while
            running as the wrong user can tweak the permissions of the
            repository's files in such a way that your repository will
            still be inaccessible even after it is 
            <quote>unwedged</quote>.</para>
          </listitem>
          <listitem>
            <para>Run the command <command>svnadmin recover
            /var/svn/repos</command>.  You should see output like
            this:</para>
            <screen>
Repository lock acquired.
Please wait; recovering the repository may take some time...

Recovery completed.
The latest repos revision is 19.
</screen>
            <para>This command may take many minutes to complete.</para>
          </listitem>
          <listitem>
            <para>Restart the server process.</para>
          </listitem>
        </orderedlist>
        <para>This procedure fixes almost every case of repository
        lock-up.  Make sure that you run this command as the user that
        owns and manages the database, not just as
        <literal>root</literal>.  Part of the recovery process might
        involve recreating from scratch various database files (shared
        memory regions, for example).  Recovering as
        <literal>root</literal> will create those files such that they
        are owned by <literal>root</literal>, which means that even
        after you restore connectivity to your repository, regular
        users will be unable to access it.</para>
        <para>If the previous procedure, for some reason, does not
        successfully unwedge your repository, you should do two
        things.  First, move your broken repository directory aside
        (perhaps by renaming it to something like
        <filename>repos.BROKEN</filename>) and then restore your
        latest backup of it.  Then, send an email to the Subversion
        user list (at <email>users@subversion.tigris.org</email>)
        describing your problem in detail.  Data integrity is an
        extremely high priority to the Subversion developers.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.reposadmin.maint.migrate">
        <info>
          <title>Migrating Repository Data Elsewhere</title>
        </info>
        <para>A Subversion filesystem has its data spread throughout
        files in the repository, in a fashion generally
        understood by (and of interest to) only the Subversion
        developers themselves.  However, circumstances may arise that
        call for all, or some subset, of that data to be copied or
        moved into another repository.</para>
        <para>Subversion provides such functionality by way of
        repository dump streams.  A repository dump stream (often
        referred to as a <quote>dumpfile</quote> when stored as a file
        on disk) is a portable, flat file format that describes the
        various revisions in your repository&#x2014;what was changed,
        by whom, when, and so on.  This dump stream is the primary
        mechanism used to marshal versioned history&#x2014;in whole or
        in part, with or without modification&#x2014;between
        repositories.  And Subversion provides the tools necessary for
        creating and loading these dump streams&#x2014;the
        <command>svnadmin dump</command> and <command>svnadmin
        load</command> subcommands, respectively.</para>
        <warning>
          <para>While the Subversion repository dump format contains
          human-readable portions and a familiar structure (it
          resembles an RFC-822 format, the same type of format used
          for most email), it is <emphasis>not</emphasis> a plaintext
          file format.  It is a binary file format, highly sensitive
          to meddling.  For example, many text editors will corrupt
          the file by automatically converting line endings.</para>
        </warning>
        <para>There are many reasons for dumping and loading Subversion
        repository data.  Early in Subversion's life, the most common
        reason was due to the evolution of Subversion itself.  As
        Subversion matured, there were times when changes made to the
        back-end database schema caused compatibility issues with
        previous versions of the repository, so users had to dump
        their repository data using the previous version of
        Subversion, and load it into a freshly created repository with
        the new version of Subversion.  Now, these types of schema
        changes haven't occurred since Subversion's 1.0 release, and
        the Subversion developers promise not to force users to dump
        and load their repositories when upgrading between minor
        versions (such as from 1.3 to 1.4) of Subversion.  But there
        are still other reasons for dumping and loading, including
        re-deploying a Berkeley DB repository on a new OS or CPU
        architecture, switching between the Berkeley DB and FSFS
        back-ends, or (as we'll cover in <xref linkend="svn.reposadmin.maint.filtering"/>) purging versioned
        data from repository history.</para>
        <para>Whatever your reason for migrating repository history,
        using the <command>svnadmin dump</command> and
        <command>svnadmin load</command> subcommands is
        straightforward.  <command>svnadmin dump</command> will output
        a range of repository revisions that are formatted using
        Subversion's custom filesystem dump format.  The dump format
        is printed to the standard output stream, while informative
        messages are printed to the standard error stream.  This
        allows you to redirect the output stream to a file while
        watching the status output in your terminal window.  For
        example:</para>
        <screen>
$ svnlook youngest myrepos
26
$ svnadmin dump myrepos &gt; dumpfile
* Dumped revision 0.
* Dumped revision 1.
* Dumped revision 2.
&#x2026;
* Dumped revision 25.
* Dumped revision 26.
</screen>
        <para>At the end of the process, you will have a single file
        (<filename>dumpfile</filename> in the previous example) that
        contains all the data stored in your repository in the
        requested range of revisions.  Note that <command>svnadmin
        dump</command> is reading revision trees from the repository
        just like any other <quote>reader</quote> process would
        (<command>svn checkout</command>, for example), so it's safe
        to run this command at any time.</para>
        <para>The other subcommand in the pair, <command>svnadmin
        load</command>, parses the standard input stream as a
        Subversion repository dump file, and effectively replays those
        dumped revisions into the target repository for that
        operation.  It also gives informative feedback, this time
        using the standard output stream:</para>
        <screen>
$ svnadmin load newrepos &lt; dumpfile
&lt;&lt;&lt; Started new txn, based on original revision 1
     * adding path : A ... done.
     * adding path : A/B ... done.
     &#x2026;
------- Committed new rev 1 (loaded from original rev 1) &gt;&gt;&gt;

&lt;&lt;&lt; Started new txn, based on original revision 2
     * editing path : A/mu ... done.
     * editing path : A/D/G/rho ... done.

------- Committed new rev 2 (loaded from original rev 2) &gt;&gt;&gt;

&#x2026;

&lt;&lt;&lt; Started new txn, based on original revision 25
     * editing path : A/D/gamma ... done.

------- Committed new rev 25 (loaded from original rev 25) &gt;&gt;&gt;

&lt;&lt;&lt; Started new txn, based on original revision 26
     * adding path : A/Z/zeta ... done.
     * editing path : A/mu ... done.

------- Committed new rev 26 (loaded from original rev 26) &gt;&gt;&gt;

</screen>
        <para>The result of a load is new revisions added to a
        repository&#x2014;the same thing you get by making commits
        against that repository from a regular Subversion client.  And
        just as in a commit, you can use hook programs to perform
        actions before and after each of the commits made during a
        load process.  By passing the
        <option>--use-pre-commit-hook</option> and
        <option>--use-post-commit-hook</option> options to
        <command>svnadmin load</command>, you can instruct Subversion
        to execute the pre-commit and post-commit hook programs,
        respectively, for each loaded revision.  You might use these,
        for example, to ensure that loaded revisions pass through the
        same validation steps that regular commits pass through.  Of
        course, you should use these options with care&#x2014;if your
        post-commit hook sends emails to a mailing list for each new
        commit, you might not want to spew hundreds or thousands of
        commit emails in rapid succession at that list!  You can read more about the use of hook
        scripts in <xref linkend="svn.reposadmin.create.hooks"/>.</para>
        <para>Note that because <command>svnadmin</command> uses
        standard input and output streams for the repository dump and
        load process, people who are feeling especially saucy can try
        things like this (perhaps even using different versions of
        <command>svnadmin</command> on each side of the pipe):</para>
        <screen>
$ svnadmin create newrepos
$ svnadmin dump oldrepos | svnadmin load newrepos
</screen>
        <para>By default, the dump file will be quite large&#x2014;much
        larger than the repository itself.  That's because by default
        every version of every file is expressed as a full text in the
        dump file.  This is the fastest and simplest behavior, and
        nice if you're piping the dump data directly into some other
        process (such as a compression program, filtering program, or
        into a loading process).  But if you're creating a dump file
        for longer-term storage, you'll likely want to save disk space
        by using the <option>--deltas</option> option.  With this
        option, successive revisions of files will be output as
        compressed, binary differences&#x2014;just as file revisions
        are stored in a repository.  This option is slower, but
        results in a dump file much closer in size to the original
        repository.</para>
        <para>We mentioned previously that <command>svnadmin
        dump</command> outputs a range of revisions.  Use the
        <option>--revision (-r)</option> option to specify a single
        revision to dump, or a range of revisions.  If you omit this
        option, all the existing repository revisions will be
        dumped.</para>
        <screen>
$ svnadmin dump myrepos -r 23 &gt; rev-23.dumpfile
$ svnadmin dump myrepos -r 100:200 &gt; revs-100-200.dumpfile
</screen>
        <para>As Subversion dumps each new revision, it outputs only
        enough information to allow a future loader to re-create that
        revision based on the previous one.  In other words, for any
        given revision in the dump file, only the items that were
        changed in that revision will appear in the dump.  The only
        exception to this rule is the first revision that is dumped
        with the current <command>svnadmin dump</command>
        command.</para>
        <para>By default, Subversion will not express the first dumped
        revision as merely differences to be applied to the previous
        revision.  For one thing, there is no previous revision in the
        dump file!  And secondly, Subversion cannot know the state of
        the repository into which the dump data will be loaded (if it
        ever is).  To ensure that the output of each
        execution of <command>svnadmin dump</command> is
        self-sufficient, the first dumped revision is by default a
        full representation of every directory, file, and property in
        that revision of the repository.</para>
        <para>However, you can change this default behavior.  If you add
        the <option>--incremental</option> option when you dump your
        repository, <command>svnadmin</command> will compare the first
        dumped revision against the previous revision in the
        repository, the same way it treats every other revision that
        gets dumped.  It will then output the first revision exactly
        as it does the rest of the revisions in the dump
        range&#x2014;mentioning only the changes that occurred in that
        revision.  The benefit of this is that you can create several
        small dump files that can be loaded in succession, instead of
        one large one, like so:</para>
        <screen>
$ svnadmin dump myrepos -r 0:1000 &gt; dumpfile1
$ svnadmin dump myrepos -r 1001:2000 --incremental &gt; dumpfile2
$ svnadmin dump myrepos -r 2001:3000 --incremental &gt; dumpfile3
</screen>
        <para>These dump files could be loaded into a new repository
        with the following command sequence:</para>
        <screen>
$ svnadmin load newrepos &lt; dumpfile1
$ svnadmin load newrepos &lt; dumpfile2
$ svnadmin load newrepos &lt; dumpfile3
</screen>
        <para>Another neat trick you can perform with this
        <option>--incremental</option> option involves appending to an
        existing dump file a new range of dumped revisions.  For
        example, you might have a <literal>post-commit</literal> hook
        that simply appends the repository dump of the single revision
        that triggered the hook.  Or you might have a script that runs
        nightly to append dump file data for all the revisions that
        were added to the repository since the last time the script
        ran.  Used like this, <command>svnadmin dump</command> can be
        one way to back up changes to your repository over time in case
        of a system crash or some other catastrophic event.</para>
        <para>The dump format can also be used to merge the contents of
        several different repositories into a single repository.  By
        using the <option>--parent-dir</option> option of
        <command>svnadmin load</command>, you can specify a new
        virtual root directory for the load process.  That means if
        you have dump files for three repositories, say
        <filename>calc-dumpfile</filename>,
        <filename>cal-dumpfile</filename>, and
        <filename>ss-dumpfile</filename>, you can first create a new
        repository to hold them all:</para>
        <screen>
$ svnadmin create /var/svn/projects
$
</screen>
        <para>Then, make new directories in the repository which will
        encapsulate the contents of each of the three previous
        repositories:</para>
        <screen>
$ svn mkdir -m "Initial project roots" \
      file:///var/svn/projects/calc \
      file:///var/svn/projects/calendar \
      file:///var/svn/projects/spreadsheet
Committed revision 1.
$ 
</screen>
        <para>Lastly, load the individual dump files into their
        respective locations in the new repository:</para>
        <screen>
$ svnadmin load /var/svn/projects --parent-dir calc &lt; calc-dumpfile
&#x2026;
$ svnadmin load /var/svn/projects --parent-dir calendar &lt; cal-dumpfile
&#x2026;
$ svnadmin load /var/svn/projects --parent-dir spreadsheet &lt; ss-dumpfile
&#x2026;
$
</screen>
        <para>We'll mention one final way to use the Subversion
        repository dump format&#x2014;conversion from a different
        storage mechanism or version control system altogether.
        Because the dump file format is, for the most part,
        human-readable, it should be relatively easy to describe
        generic sets of changes&#x2014;each of which should be treated
        as a new revision&#x2014;using this file format.  In fact, the
        <command>cvs2svn</command> utility (see <xref linkend="svn.forcvs.convert"/>) uses the dump format to
        represent the contents of a CVS repository so that those
        contents can be copied into a Subversion repository.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.reposadmin.maint.filtering">
        <info>
          <title>Filtering Repository History</title>
        </info>
        <para>Since Subversion stores your versioned history using, at
        the very least, binary differencing algorithms and data
        compression (optionally in a completely opaque database
        system), attempting manual tweaks is unwise, if not quite
        difficult, and at any rate strongly discouraged.  And once
        data has been stored in your repository, Subversion
        generally doesn't provide an easy way to remove that data.
        <footnote><para>That's rather the reason you use version control at
            all, right?</para></footnote>
        But inevitably, there will be times when you would like to
        manipulate the history of your repository.  You might need
        to strip out all instances of a file that was accidentally
        added to the repository (and shouldn't be there for whatever
        reason).
        <footnote><para>Conscious, cautious removal of certain bits of
            versioned data is actually supported by real use-cases.
            That's why an <quote>obliterate</quote> feature has been
            one of the most highly requested Subversion features,
            and one which the Subversion developers hope to soon
            provide.</para></footnote>
        Or, perhaps you have multiple projects sharing a
        single repository, and you decide to split them up into
        their own repositories.  To accomplish tasks like this,
        administrators need a more manageable and malleable
        representation of the data in their repositories&#x2014;the
        Subversion repository dump format.</para>
        <para>As we described in <xref linkend="svn.reposadmin.maint.migrate"/>, the
        Subversion repository dump format is a human-readable
        representation of the changes that you've made to your
        versioned data over time.  You use the <command>svnadmin
        dump</command> command to generate the dump data, and
        <command>svnadmin load</command> to populate a new
        repository with it (see <xref linkend="svn.reposadmin.maint.migrate"/>).  The great thing
        about the human-readability aspect of the dump format is
        that, if you aren't careless about it, you can manually
        inspect and modify it.  Of course, the downside is that if
        you have three years' worth of repository activity
        encapsulated in what is likely to be a very large dump file,
        it could take you a long, long time to manually inspect and
        modify it.</para>
        <para>That's where <command>svndumpfilter</command> becomes
        useful.  This program acts as path-based filter for
        repository dump streams.  Simply give it either a list of
        paths you wish to keep, or a list of paths you wish to not
        keep, then pipe your repository dump data through this
        filter.  The result will be a modified stream of dump data
        that contains only the versioned paths you (explicitly or
        implicitly) requested.</para>
        <para>Let's look a realistic example of how you might use this
        program.  We discuss elsewhere (see <xref linkend="svn.reposadmin.projects.chooselayout"/>) the
        process of deciding how to choose a layout for the data in
        your repositories&#x2014;using one repository per project or
        combining them, arranging stuff within your repository, and
        so on.  But sometimes after new revisions start flying in,
        you rethink your layout and would like to make some changes.
        A common change is the decision to move multiple projects
        which are sharing a single repository into separate
        repositories for each project.</para>
        <para>Our imaginary repository contains three projects:
        <literal>calc</literal>, <literal>calendar</literal>, and
        <literal>spreadsheet</literal>.  They have been living
        side-by-side in a layout like this:</para>
        <screen>
/
   calc/
      trunk/
      branches/
      tags/
   calendar/
      trunk/
      branches/
      tags/
   spreadsheet/
      trunk/
      branches/
      tags/
</screen>
        <para>To get these three projects into their own repositories,
        we first dump the whole repository:</para>
        <screen>
$ svnadmin dump /var/svn/repos &gt; repos-dumpfile
* Dumped revision 0.
* Dumped revision 1.
* Dumped revision 2.
* Dumped revision 3.
&#x2026;
$
</screen>
        <para>Next, run that dump file through the filter, each time
        including only one of our top-level directories, and
        resulting in three new dump files:</para>
        <screen>
$ svndumpfilter include calc &lt; repos-dumpfile &gt; calc-dumpfile
&#x2026;
$ svndumpfilter include calendar &lt; repos-dumpfile &gt; cal-dumpfile
&#x2026;
$ svndumpfilter include spreadsheet &lt; repos-dumpfile &gt; ss-dumpfile
&#x2026;
$
</screen>
        <para>At this point, you have to make a decision.  Each of
        your dump files will create a valid repository,
        but will preserve the paths exactly as they were in the
        original repository.  This means that even though you would
        have a repository solely for your <literal>calc</literal>
        project, that repository would still have a top-level
        directory named <filename>calc</filename>.  If you want
        your <filename>trunk</filename>, <filename>tags</filename>,
        and <filename>branches</filename> directories to live in the
        root of your repository, you might wish to edit your
        dump files, tweaking the <literal>Node-path</literal> and
        <literal>Node-copyfrom-path</literal> headers to no longer have
        that first <filename>calc/</filename> path component.  Also,
        you'll want to remove the section of dump data that creates
        the <filename>calc</filename> directory.  It will look
        something like:</para>
        <screen>
Node-path: calc
Node-action: add
Node-kind: dir
Content-length: 0
  
</screen>
        <warning>
          <para>If you do plan on manually editing the dump file to
          remove a top-level directory, make sure that your editor is
          not set to automatically convert end-of-line characters to the native
          format (e.g. \r\n to \n), as the content will then not agree
          with the metadata.  This will render the dump file
          useless.</para>
        </warning>
        <para>All that remains now is to create your three new
        repositories, and load each dump file into the right
        repository:</para>
        <screen>
$ svnadmin create calc; svnadmin load calc &lt; calc-dumpfile
&lt;&lt;&lt; Started new transaction, based on original revision 1
     * adding path : Makefile ... done.
     * adding path : button.c ... done.
&#x2026;
$ svnadmin create calendar; svnadmin load calendar &lt; cal-dumpfile
&lt;&lt;&lt; Started new transaction, based on original revision 1
     * adding path : Makefile ... done.
     * adding path : cal.c ... done.
&#x2026;
$ svnadmin create spreadsheet; svnadmin load spreadsheet &lt; ss-dumpfile
&lt;&lt;&lt; Started new transaction, based on original revision 1
     * adding path : Makefile ... done.
     * adding path : ss.c ... done.
&#x2026;
$
</screen>
        <para>Both of <command>svndumpfilter</command>'s subcommands
        accept options for deciding how to deal with
        <quote>empty</quote> revisions.  If a given revision
        contained only changes to paths that were filtered out, that
        now-empty revision could be considered uninteresting or even
        unwanted.  So to give the user control over what to do with
        those revisions, <command>svndumpfilter</command> provides
        the following command-line options:</para>
        <variablelist>
          <varlistentry>
            <term>
              <option>--drop-empty-revs</option>
            </term>
            <listitem>
              <para>Do not generate empty revisions at all&#x2014;just
              omit them.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--renumber-revs</option>
            </term>
            <listitem>
              <para>If empty revisions are dropped (using the
              <option>--drop-empty-revs</option> option), change the
              revision numbers of the remaining revisions so that
              there are no gaps in the numeric sequence.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--preserve-revprops</option>
            </term>
            <listitem>
              <para>If empty revisions are not dropped, preserve the
              revision properties (log message, author, date, custom
              properties, etc.) for those empty revisions.
              Otherwise, empty revisions will only contain the
              original datestamp, and a generated log message that
              indicates that this revision was emptied by
              <command>svndumpfilter</command>.</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>While <command>svndumpfilter</command> can be very
        useful, and a huge timesaver, there are unfortunately a
        couple of gotchas.  First, this utility is overly sensitive
        to path semantics.  Pay attention to whether paths in your
        dump file are specified with or without leading slashes.
        You'll want to look at the <literal>Node-path</literal> and
        <literal>Node-copyfrom-path</literal> headers.</para>
        <screen>
&#x2026;
Node-path: spreadsheet/Makefile
&#x2026;
</screen>
        <para>If the paths have leading slashes, you should
        include leading slashes in the paths you pass to
        <command>svndumpfilter include</command> and
        <command>svndumpfilter exclude</command> (and if they don't,
        you shouldn't).  Further, if your dump file has an inconsistent
        usage of leading slashes for some reason,
        <footnote><para>While <command>svnadmin dump</command> has a
            consistent leading slash policy&#x2014;to not include
            them&#x2014;other programs which generate dump data might
            not be so consistent.</para></footnote>
        you should probably normalize those paths so they all
        have, or lack, leading slashes.</para>
        <para>Also, copied paths can give you some trouble.
        Subversion supports copy operations in the repository, where
        a new path is created by copying some already existing path.
        It is possible that at some point in the lifetime of your
        repository, you might have copied a file or directory from
        some location that <command>svndumpfilter</command> is
        excluding, to a location that it is including.  In order to
        make the dump data self-sufficient,
        <command>svndumpfilter</command> needs to still show the
        addition of the new path&#x2014;including the contents of any
        files created by the copy&#x2014;and not represent that
        addition as a copy from a source that won't exist in your
        filtered dump data stream.  But because the Subversion
        repository dump format only shows what was changed in each
        revision, the contents of the copy source might not be
        readily available.  If you suspect that you have any copies
        of this sort in your repository, you might want to rethink
        your set of included/excluded paths, perhaps including the
        paths that served as sources of your troublesome copy
        operations, too.</para>
        <para>Finally, <command>svndumpfilter</command> takes path
        filtering quite literally.  If you are trying to copy the
        history of a project rooted at
        <filename>trunk/my-project</filename> and move it into a
        repository of its own, you would, of course, use the
        <command>svndumpfilter include</command> command to keep all
        the changes in and under
        <filename>trunk/my-project</filename>.  But the resulting
        dump file makes no assumptions about the repository into
        which you plan to load this data.  Specifically, the dump
        data might begin with the revision which added the
        <filename>trunk/my-project</filename> directory, but it will
        <emphasis>not</emphasis> contain directives which would
        create the <filename>trunk</filename> directory itself
        (because <filename>trunk</filename> doesn't match the
        include filter).  You'll need to make sure that any
        directories which the new dump stream expect to exist
        actually do exist in the target repository before trying to
        load the stream into that repository.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.reposadmin.maint.replication">
        <info>
          <title>Repository Replication</title>
        </info>
        <para>There are several scenarios in which it is quite handy to
        have a Subversion repository whose version history is exactly
        the same as some other repository's.  Perhaps the most obvious
        one is the maintenance of a simple backup repository, used
        when the primary repository has become inaccessible due to a
        hardware failure, network outage, or other such annoyance.
        Other scenarios include deploying mirror repositories to
        distribute heavy Subversion load across multiple servers, use
        as a soft-upgrade mechanism, and so on.</para>
        <para>As of version 1.4, Subversion provides a program for
        managing scenarios like
        these&#x2014;<command>svnsync</command>.
        <command>svnsync</command> works by essentially asking the
        Subversion server to <quote>replay</quote> revisions, one at a
        time.  It then uses that revision information to mimic a
        commit of the same to another repository.  Neither repository
        needs to be locally accessible to machine on which
        <command>svnsync</command> is running&#x2014;its parameters are
        repository URLs, and it does all its work through Subversion's
        repository access (RA) interfaces.  All it requires is read
        access to the source repository and read/write access to the
        destination repository.</para>
        <note>
          <para>When using <command>svnsync</command> against a remote
          source repository, the Subversion server for that repository
          must be running Subversion version 1.4 or better.</para>
        </note>
        <para>Assuming you already have a source repository that you'd
        like to mirror, the next thing you need is an empty target
        repository which will actually serve as that mirror.  This
        target repository can use either of the available filesystem
        data-store back-ends (see <xref linkend="svn.reposadmin.basics.backends"/>), but it must not
        yet have any version history in it.  The protocol via which
        <command>svnsync</command> communicates revision information
        is highly sensitive to mismatches between the versioned
        histories contained in the source and target repositories.
        For this reason, while <command>svnsync</command> cannot
        <emphasis>demand</emphasis> that the target repository be
        read-only,
        <footnote><para>In fact, it can't truly be read-only, or
            <command>svnsync</command> itself would have a tough time
            copying revision history into it.</para></footnote>
        allowing the revision history in the target repository to
        change by any mechanism other than the mirroring process is a
        recipe for disaster.</para>
        <warning>
          <para>Do <emphasis>not</emphasis> modify a mirror repository
          in such a way as to cause its version history to deviate
          from that of the repository it mirrors.  The only commits
          and revision property modifications that ever occur on that
          mirror repository should be those performed by the
          <command>svnsync</command> tool.</para>
        </warning>
        <para>Another requirement of the target repository is that the
        <command>svnsync</command> process be allowed to modify
        certain revision properties.  <command>svnsync</command>
        stores its bookkeeping information in special revision
        properties on revision 0 of the destination repository.
        Because <command>svnsync</command> works within the framework
        of that repository's hook system, the default state of the
        repository (which is to disallow revision property changes;
        see <xref linkend="svn.ref.reposhooks.pre-revprop-change"/>)
        is insufficient.  You'll need to explicitly implement the
        pre-revprop-change hook, and your script must allow
        <command>svnsync</command> to set and change its special
        properties.  With those provisions in place, you are ready to
        start mirroring repository revisions.</para>
        <tip>
          <para>It's a good idea to implement authorization measures
          which allow your repository replication process to perform
          its tasks while preventing other users from modifying the
          contents of your mirror repository at all.</para>
        </tip>
        <para>Let's walk through the use of <command>svnsync</command>
        in a somewhat typical mirroring scenario.  We'll pepper this
        discourse with practical recommendations which you are free to
        disregard if they aren't required by or suitable for your
        environment.</para>
        <para>As a service to the fine developers of our favorite
        version control system, we will be mirroring the public
        Subversion source code repository and exposing that mirror
        publicly on the Internet, hosted on a different machine than
        the one on which the original Subversion source code
        repository lives.  This remote host has a global configuration
        which permits anonymous users to read the contents of
        repositories on the host, but requires users to authenticate
        in order to modify those repositories.  (Please forgive us for
        glossing over the details of Subversion server configuration
        for the moment&#x2014;those are covered thoroughly in <xref linkend="svn.serverconfig"/>.)  And for no other reason than
        that it makes for a more interesting example, we'll be driving
        the replication process from a third machine, the one which
        we currently find ourselves using.</para>
        <para>First, we'll create the repository which will be our
        mirror.  This and the next couple of steps do require shell
        access to the machine on which the mirror repository will
        live.  Once the repository is all configured, though, we
        shouldn't need to touch it directly again.</para>
        <screen>
$ ssh admin@svn.example.com \
      "svnadmin create /var/svn/svn-mirror"
admin@svn.example.com's password: ********
$
</screen>
        <para>At this point, we have our repository, and due to our
        server's configuration, that repository is now
        <quote>live</quote> on the Internet.  Now, because we don't
        want anything modifying the repository except our replication
        process, we need a way to distinguish that process from other
        would-be committers.  To do so, we use a dedicated username
        for our process.  Only commits and revision property
        modifications performed by the special username
        <literal>syncuser</literal> will be allowed.</para>
        <para>We'll use the repository's hook system both to allow the
        replication process to do what it needs to do, and to enforce
        that only it is doing those things.  We accomplish this by
        implementing two of the repository event
        hooks&#x2014;pre-revprop-change and start-commit.  Our
        <filename>pre-revprop-change</filename> hook script is found
        in <xref linkend="svn.reposadmin.maint.replication.pre-revprop-change"/>, and basically verifies that the user attempting the
        property changes is our <literal>syncuser</literal> user.  If
        so, the change is allowed; otherwise, it is denied.</para>
        <example xml:id="svn.reposadmin.maint.replication.pre-revprop-change">
          <info>
            <title>Mirror repository's pre-revprop-change hook script</title>
          </info>
          <programlisting>
#!/bin/sh 

USER="$3"

if [ "$USER" = "syncuser" ]; then exit 0; fi

echo "Only the syncuser user may change revision properties" &gt;&amp;2
exit 1
</programlisting>
        </example>
        <para>That covers revision property changes.  Now we need to
        ensure that only the <literal>syncuser</literal> user is
        permitted to commit new revisions to the repository.  We do
        this using a <filename>start-commit</filename> hook scripts
        like the one in <xref linkend="svn.reposadmin.maint.replication.start-commit"/>.</para>
        <example xml:id="svn.reposadmin.maint.replication.start-commit">
          <info>
            <title>Mirror repository's start-commit hook script</title>
          </info>
          <programlisting>
#!/bin/sh 

USER="$2"

if [ "$USER" = "syncuser" ]; then exit 0; fi

echo "Only the syncuser user may commit new revisions" &gt;&amp;2
exit 1
</programlisting>
        </example>
        <para>After installing our hook scripts and ensuring that they
        are executable by the Subversion server, we're finished with
        the setup of the mirror repository.  Now, we get to actually
        do the mirroring.</para>
        <para>The first thing we need to do with
        <command>svnsync</command> is to register in our target
        repository the fact that it will be a mirror of the source
        repository.  We do this using the <command>svnsync
        initialize</command> subcommand.  Note that the various
        <command>svnsync</command> subcommands provide several of the
        same authentication-related options that
        <command>svn</command> does:  <option>--username</option>,
        <option>--password</option>,
        <option>--non-interactive</option>,
        <option>--config-dir</option>, and
        <option>--no-auth-cache</option>.</para>
        <screen>
$ svnsync help init
initialize (init): usage: svnsync initialize DEST_URL SOURCE_URL

Initialize a destination repository for synchronization from
another repository.

The destination URL must point to the root of a repository with
no committed revisions.  The destination repository must allow
revision property changes.

You should not commit to, or make revision property changes in,
the destination repository by any method other than 'svnsync'.
In other words, the destination repository should be a read-only
mirror of the source repository.

Valid options:
  --non-interactive        : do no interactive prompting
  --no-auth-cache          : do not cache authentication tokens
  --username arg           : specify a username ARG
  --password arg           : specify a password ARG
  --config-dir arg         : read user configuration files from directory ARG

$ svnsync initialize http://svn.example.com/svn-mirror \
                     http://svn.collab.net/repos/svn \
                     --username syncuser --password syncpass
Copied properties for revision 0.
$
</screen>
        <para>Our target repository will now remember that it is a
        mirror of the public Subversion source code repository.
        Notice that we provided a username and password as arguments
        to <command>svnsync</command>&#x2014;that was required by the
        pre-revprop-change hook on our mirror repository.</para>
        <note>
          <para>The URLs provided to <command>svnsync</command> must
          point to the root directories of the target and source
          repositories, respectively.  The tool does not handle
          mirroring of repository subtrees.</para>
        </note>
        <note>
          <para>The initial release of <command>svnsync</command> (in
          Subversion 1.4) has a small shortcoming&#x2014;the values
          given to the <option>--username</option> and
          <option>--password</option> command-line options get used
          for authentication against both the source and destination
          repositories.  Obviously, there's no guarantee that the
          synchronizing user's credentials are the same in both
          places.  In the event that they are not the same, users
          trying to run <command>svnsync</command> in non-interactive
          mode (with the <option>--non-interactive</option> option)
          might experience problems.</para>
        </note>
        <para>And now comes the fun part.  With a single subcommand, we
        can tell <command>svnsync</command> to copy all the
        as-yet-unmirrored revisions from the source repository to the
        target.
        <footnote><para>Be forewarned that while it will take only a few
            seconds for the average reader to parse this paragraph and
            the sample output which follows it, the actual time
            required to complete such a mirroring operation is, shall
            we say, quite a bit longer.</para></footnote>
        The <command>svnsync synchronize</command> subcommand will
        peek into the special revision properties previously stored on
        the target repository, and determine what repository it is
        mirroring and that the most recently mirrored revision was
        revision 0.  Then it will query the source repository and
        determine what the latest revision in that repository is.
        Finally, it asks the source repository's server to start
        replaying all the revisions between 0 and that latest
        revision.  As <command>svnsync</command> get the resulting
        response from the source repository's server, it begins
        forwarding those revisions to the target repository's server
        as new commits.</para>
        <screen>
$ svnsync help synchronize
synchronize (sync): usage: svnsync synchronize DEST_URL

Transfer all pending revisions from source to destination.
&#x2026;
$ svnsync synchronize http://svn.example.com/svn-mirror \
                      --username syncuser --password syncpass
Committed revision 1.
Copied properties for revision 1.
Committed revision 2.
Copied properties for revision 2.
Committed revision 3.
Copied properties for revision 3.
&#x2026;
Committed revision 23406.
Copied properties for revision 23406.
Committed revision 23407.
Copied properties for revision 23407.
Committed revision 23408.
Copied properties for revision 23408.
</screen>
        <para>Of particular interest here is that for each mirrored
        revision, there is first a commit of that revision to the
        target repository, and then property changes follow.  This is
        because the initial commit is performed by (and attributed to)
        the user <literal>syncuser</literal>, and datestamped with the
        time as of that revision's creation.  Also, Subversion's
        underlying repository access interfaces don't provide a
        mechanism for setting arbitrary revision properties as part of
        a commit.  So <command>svnsync</command> follows up with an
        immediate series of property modifications which copy all the
        revision properties found for that revision in the source
        repository into the target repository.  This also has the
        effect of fixing the author and datestamp of the revision
        to match that of the source repository.</para>
        <para>Also noteworthy is that <command>svnsync</command>
        performs careful bookkeeping that allows it to be safely
        interrupted and restarted without ruining the integrity of the
        mirrored data.  If a network glitch occurs while mirroring a
        repository, simply repeat the <command>svnsync
        synchronize</command> command and it will happily pick up
        right where it left off.  In fact, as new revisions appear in
        the source repository, this is exactly what you to do
        in order to keep your mirror up-to-date.</para>
        <para>There is, however, one bit of inelegance in the process.
        Because Subversion revision properties can be changed at any
        time throughout the lifetime of the repository, and don't
        leave an audit trail that indicates when they were changed,
        replication processes have to pay special attention to them.
        If you've already mirrored the first 15 revisions of a
        repository and someone then changes a revision property on
        revision 12, <command>svnsync</command> won't know to go back
        and patch up its copy of revision 12.  You'll need to tell it
        to do so manually by using (or with some additionally tooling
        around) the <command>svnsync copy-revprops</command>
        subcommand, which simply re-replicates all the revision
        properties for a particular revision.</para>
        <screen>
$ svnsync help copy-revprops
copy-revprops: usage: svnsync copy-revprops DEST_URL REV

Copy all revision properties for revision REV from source to
destination.
&#x2026;
$ svnsync copy-revprops http://svn.example.com/svn-mirror 12 \
                        --username syncuser --password syncpass
Copied properties for revision 12.
$
</screen>
        <para>That's repository replication in a nutshell.  You'll
        likely want some automation around such a process.  For
        example, while our example was a pull-and-push setup, you
        might wish to have your primary repository push changes to one
        or more blessed mirrors as part of its post-commit and
        post-revprop-change hook implementations.  This would enable
        the mirror to be up-to-date in as near to realtime as is
        likely possible.</para>
        <para>Also, while it isn't very commonplace to do so,
        <command>svnsync</command> does gracefully mirror repositories
        in which the user as whom it authenticates only has partial
        read access.  It simply copies only the bits of the repository
        that it is permitted to see.  Obviously such a mirror is not
        useful as a backup solution.</para>
        <para>As far as user interaction with repositories and mirrors
        goes, it <emphasis>is</emphasis> possible to have a single
        working copy that interacts with both, but you'll have to jump
        through some hoops to make it happen.  First, you need to
        ensure that both the primary and mirror repositories have the
        same repository UUID (which is not the case by default).  You
        can set the mirror repository's UUID by loading a dump file
        stub into it which contains the UUID of the primary
        repository, like so:</para>
        <screen>
$ cat - &lt;&lt;EOF | svnadmin load --force-uuid dest
SVN-fs-dump-format-version: 2

UUID: 65390229-12b7-0310-b90b-f21a5aa7ec8e
EOF
$
</screen>
        <para>Now that the two repositories have the same UUID, you can
        use <command>svn switch --relocate</command> to point your
        working copy to whichever of the repositories you wish to
        operate against, a process which is described in <xref linkend="svn.ref.svn.c.switch"/>.  There is a possible danger
        here, though, in that if the primary and mirror repositories
        aren't in close synchronization, a working copy up-to-date
        with, and pointing to, the primary repository will, if
        relocated to point to an out-of-date mirror, become confused
        about the apparent sudden loss of revisions it fully expects
        to be present, and throws errors to that effect.  If this
        occurs, you can relocate your working copy back to the primary
        repository and then either wait until the mirror repository is
        up-to-date, or backdate your working copy to a revision you
        know is present in the sync repository and then retry the
        relocation.</para>
        <para>Finally, be aware that the revision-based replication
        provided by <command>svnsync</command> is only
        that&#x2014;replication of revisions.  It does not include such
        things as the hook implementations, repository or server
        configuration data, uncommitted transactions, or information
        about user locks on repository paths.  Only information
        carried by the Subversion repository dump file format is
        available for replication.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.reposadmin.maint.backup">
        <info>
          <title>Repository Backup</title>
        </info>
        <para>Despite numerous advances in technology since the birth of
        the modern computer, one thing unfortunately rings true with
        crystalline clarity&#x2014;sometimes, things go very, very
        awry.  Power outages, network connectivity dropouts, corrupt
        RAM and crashed hard drives are but a taste of the evil that
        Fate is poised to unleash on even the most conscientious
        administrator.  And so we arrive at a very important
        topic&#x2014;how to make backup copies of your repository
        data.</para>
        <para>There are two types of backup methods available for
        Subversion repository administrators&#x2014;full and
        incremental.  A full backup of the repository involves
        squirreling away in one sweeping action all the information
        required to fully reconstruct that repository in the event of
        a catastrophe.  Usually, it means, quite literally, the
        duplication of the entire repository directory (which includes
        either a Berkeley DB or FSFS environment).  Incremental
        backups are lesser things, backups of only the portion of the
        repository data that has changed since the previous
        backup.</para>
        <para>As far as full backups go, the naive approach might seem
        like a sane one, but unless you temporarily disable all other
        access to your repository, simply doing a recursive directory
        copy runs the risk of generating a faulty backup.  In the case
        of Berkeley DB, the documentation describes a certain order in
        which database files can be copied that will guarantee a valid
        backup copy.  A similar ordering exists for FSFS data.  But
        you don't have to implement these algorithms yourself, because
        the Subversion development team has already done so.  The
        <command>svnadmin hotcopy</command> command takes care of the
        minutia involved in making a hot backup of your repository.
        And its invocation is as trivial as Unix's
        <command>cp</command> or Windows' <command>copy</command>
        operations:</para>
        <screen>
$ svnadmin hotcopy /var/svn/repos /var/svn/repos-backup
</screen>
        <para>The resulting backup is a fully functional Subversion
        repository, able to be dropped in as a replacement for your
        live repository should something go horribly wrong.</para>
        <para>When making copies of a Berkeley DB repository, you can
        even instruct <command>svnadmin hotcopy</command> to purge any
        unused Berkeley DB logfiles (see <xref linkend="svn.reposadmin.maint.diskspace.bdblogs"/>) from the
        original repository upon completion of the copy.  Simply
        provide the <option>--clean-logs</option> option on the
        command-line.</para>
        <screen>
$ svnadmin hotcopy --clean-logs /var/svn/bdb-repos /var/svn/bdb-repos-backup
</screen>
        <para>Additional tooling around this command is available, too.
        The <filename>tools/backup/</filename> directory of the
        Subversion source distribution holds the
        <command>hot-backup.py</command> script.  This script adds a
        bit of backup management atop <command>svnadmin
        hotcopy</command>, allowing you to keep only the most recent
        configured number of backups of each repository.  It will
        automatically manage the names of the backed-up repository
        directories to avoid collisions with previous backups, and
        will <quote>rotate off</quote> older backups, deleting them so
        only the most recent ones remain.  Even if you also have an
        incremental backup, you might want to run this program on a
        regular basis.  For example, you might consider using
        <command>hot-backup.py</command> from a program scheduler
        (such as <command>cron</command> on Unix systems) which will
        cause it to run nightly (or at whatever granularity of Time
        you deem safe).</para>
        <para>Some administrators use a different backup mechanism built
        around generating and storing repository dump data.  We
        described in <xref linkend="svn.reposadmin.maint.migrate"/>
        how to use <command>svnadmin dump --incremental</command> to
        perform an incremental backup of a given revision or range of
        revisions.  And of course, there is a full backup variation of
        this achieved by omitting the <option>--incremental</option>
        option to that command.  There is some value in these methods,
        in that the format of your backed-up information is
        flexible&#x2014;it's not tied to a particular platform,
        versioned filesystem type, or release of Subversion or
        Berkeley DB.  But that flexibility comes at a cost, namely
        that restoring that data can take a long time&#x2014;longer
        with each new revision committed to your repository.  Also, as
        is the case with so many of the various backup methods,
        revision property changes made to already-backed-up revisions
        won't get picked up by a non-overlapping, incremental dump
        generation.  For these reasons, we recommend against relying
        solely on dump-based backup approaches.</para>
        <para>As you can see, each of the various backup types and
        methods has its advantages and disadvantages.  The easiest is
        by far the full hot backup, which will always result in a
        perfect working replica of your repository.  Should something
        bad happen to your live repository, you can restore from the
        backup with a simple recursive directory copy.  Unfortunately,
        if you are maintaining multiple backups of your repository,
        these full copies will each eat up just as much disk space as
        your live repository.  Incremental backups, by contrast, tend
        to be quicker to generate and smaller to store.  But the
        restoration process can be a pain, often involving applying
        multiple incremental backups.  And other methods have their
        own peculiarities.  Administrators need to find the balance
        between the cost of making the backup and the cost of
        restoring it.</para>
        <para>The <command>svnsync</command> program (see <xref linkend="svn.reposadmin.maint.replication"/>) actually
        provides a rather handy middle-ground approach.  If you are
        regularly synchronizing a read-only mirror with your main
        repository, then in a pinch, your read-only mirror is probably
        a good candidate for replacing that main repository if it
        falls over.  The primary disadvantage of this method is that
        only the versioned repository data gets
        synchronized&#x2014;repository configuration files,
        user-specified repository path locks, and other items which
        might live in the physical repository directory but not
        <emphasis>inside</emphasis> the repository's virtual versioned
        filesystem are not handled by svnsync.</para>
        <para>In any backup scenario, repository administrators need
        to be aware of how modifications to unversioned revision
        properties affect their backups.  Since these changes do not
        themselves generate new revisions, they will not trigger
        post-commit hooks, and may not even trigger the
        pre-revprop-change and post-revprop-change hooks.
        <footnote><para><command>svnadmin setlog</command> can be called in a
            way that bypasses the hook interface altogether.</para></footnote>  
        And since you can change revision properties without respect
        to chronological order&#x2014;you can change any revision's
        properties at any time&#x2014;an incremental backup of the
        latest few revisions might not catch a property modification
        to a revision that was included as part of a previous 
        backup.</para>
        <para>Generally speaking, only the truly paranoid would need to
        backup their entire repository, say, every time a commit
        occurred.  However, assuming that a given repository has some
        other redundancy mechanism in place with relatively fine
        granularity (like per-commit emails or incremental dumps), a
        hot backup of the database might be something that a
        repository administrator would want to include as part of a
        system-wide nightly backup.  It's your data&#x2014;protect it
        as much as you'd like.</para>
        <para>Often, the best approach to repository backups is a
        diversified one which leverages combinations of the methods
        described here.  The Subversion developers, for example, back
        up the Subversion source code repository nightly using
        <command>hot-backup.py</command> and an offsite
        <command>rsync</command> of those full backups; keep multiple
        archives of all the commit and property change notification
        emails; and have repository mirrors maintained by various
        volunteers using <command>svnsync</command>.  Your solution
        might be similar, but should be catered to your needs and that
        delicate balance of convenience with paranoia.  And whatever
        you do, validate your backups from time to time&#x2014;what
        good is a spare tire that has a hole in it?  While all of this
        might not save your hardware from the iron fist of Fate,
        <footnote><para>You know&#x2014;the collective term for all of her
            <quote>fickle fingers</quote>.</para></footnote>
        it should certainly help you recover from those trying 
        times.</para>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.reposadmin.summary">
      <info>
        <title>Summary</title>
      </info>
      <para>By now you should have a basic understanding of how to
      create, configure, and maintain Subversion repositories.  We've
      introduced you to the various tools that will assist you with
      this task.  Throughout the chapter, we've noted common
      administration pitfalls, and suggestions for avoiding
      them.</para>
      <para>All that remains is for you to decide what exciting data to
      store in your repository, and finally, how to make it available
      over a network.  The next chapter is all about networking.</para>
    </section>
  </chapter>
  <!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
  <chapter xml:id="svn.serverconfig">
    <info>
      <title>Server Configuration</title>
    </info>
    <para>A Subversion repository can be accessed simultaneously by
    clients running on the same machine on which the repository
    resides using the <literal>file://</literal> method.  But the
    typical Subversion setup involves a single server machine being
    accessed from clients on computers all over the office&#x2014;or,
    perhaps, all over the world.</para>
    <para>This chapter describes how to get your Subversion repository
    exposed outside its host machine for use by remote clients.  We
    will cover Subversion's currently available server mechanisms,
    discussing the configuration and use of each.  After reading
    this section, you should be able to decide which networking
    setup is right for your needs, and understand how to enable such
    a setup on your host computer.</para>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.serverconfig.overview">
      <info>
        <title>Overview</title>
      </info>
      <para>Subversion was designed with an abstract network layer.
      This means that a repository can be programmatically accessed by
      any sort of server process, and the client <quote>repository
      access</quote> API allows programmers to write plugins that
      speak relevant network protocols.  In theory, Subversion can use
      an infinite number of network implementations.  In practice,
      there are only two servers at the time of this writing.</para>
      <para>Apache is an extremely popular webserver; using the
      <command>mod_dav_svn</command> module, Apache can access a
      repository and make it available to clients via the
      WebDAV/DeltaV protocol, which is an extension of HTTP.  Because
      Apache is an extremely extensible web server, it provides a
      number of features <quote>for free</quote>, such as encrypted
      SSL communication, logging, integration with a number of
      third-party authentication systems, and limited built-in web
      browsing of repositories.</para>
      <para>In the other corner is <command>svnserve</command>: a small,
      lightweight server program that speaks a custom protocol with
      clients.  Because its protocol is explicitly designed for
      Subversion and is stateful (unlike HTTP), it provides
      significantly faster network operations&#x2014;but at the cost of
      some features as well.  While it can use SASL to provide a
      variety of authentication and encryption options, it has no
      logging or built-in web-browsing.  It is, however, extremely
      easy to set up and is often the best option for small teams just
      starting out with Subversion.</para>
      <para>A third option is to use <command>svnserve</command>
      tunneled over an SSH connection.  Even though this scenario
      still uses <command>svnserve</command>, it differs quite a bit
      in features from a traditional <command>svnserve</command>
      deployment.  SSH is used to encrypt all communication.  SSH is
      also used exclusively to authenticate, so real system accounts
      are required on the server host (unlike
      vanilla <command>svnserve</command>, which has its own private
      user accounts.)  Finally, because this setup requires that each
      user spawn a private, temporary <command>svnserve</command>
      process, it's equivalent (from a permissions point of view) to
      allowing a group of local users to all access the repository
      via <literal>file://</literal> URLs. Path-based access control
      has no meaning, since each user is accessing the repository
      database files directly.</para>
      <para>Here's a quick summary of the three typical server
      deployments.</para>
      <table xml:id="svn.serverconfig.overview.tbl-1">
        <info>
          <title>Comparison of Subversion Server Options</title>
        </info>
        <tgroup cols="4">
          <thead>
            <row>
              <entry>Feature</entry>
              <entry>Apache + mod_dav_svn</entry>
              <entry>svnserve</entry>
              <entry>svnserve over SSH</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Authentication options</entry>
              <entry>HTTP(S) basic auth, X.509 certificates, LDAP, NTLM, or
              any other mechanism available to Apache httpd</entry>
              <entry>CRAM-MD5 by default;  LDAP, NTLM, or any other mechanism
              available to SASL</entry>
              <entry>SSH</entry>
            </row>
            <row>
              <entry>User account options</entry>
              <entry>private 'users' file, or other mechanisms
            available to Apache httpd (LDAP, SQL, etc.)</entry>
              <entry>private 'users' file, or other mechanisms available
              to SASL (LDAP, SQL, etc.)</entry>
              <entry>system accounts</entry>
            </row>
            <row>
              <entry>Authorization options</entry>
              <entry>read/write access can be granted over whole
              repository, or specified per-path.</entry>
              <entry>read/write access can be granted over whole
              repository, or specified per-path.</entry>
              <entry>read/write access only grantable over whole
              repository</entry>
            </row>
            <row>
              <entry>Encryption</entry>
              <entry>via optional SSL</entry>
              <entry>via optional SASL features</entry>
              <entry>SSH tunneled</entry>
            </row>
            <row>
              <entry>Logging</entry>
              <entry>full Apache logs of each HTTP request, with
            optional <quote>high-level</quote> logging of general
            client operations</entry>
              <entry>no logging</entry>
              <entry>no logging</entry>
            </row>
            <row>
              <entry>Interoperability</entry>
              <entry>partially usable by other WebDAV clients</entry>
              <entry>only talks to svn clients</entry>
              <entry>only talks to svn clients</entry>
            </row>
            <row>
              <entry>Web viewing</entry>
              <entry>limited built-in support, or via 3rd-party tools
              such as ViewVC</entry>
              <entry>only via 3rd-party tools such as ViewVC</entry>
              <entry>only via 3rd-party tools such as ViewVC</entry>
            </row>
            <row>
              <entry>Speed</entry>
              <entry>somewhat slower</entry>
              <entry>somewhat faster</entry>
              <entry>somewhat faster</entry>
            </row>
            <row>
              <entry>Initial setup</entry>
              <entry>somewhat complex</entry>
              <entry>extremely simple</entry>
              <entry>moderately simple </entry>
            </row>
          </tbody>
        </tgroup>
      </table>
    </section>
    <section xml:id="svn.serverconfig.choosing">
      <info>
        <title>Choosing a Server Configuration</title>
      </info>
      <para>So, which server should you use?  Which is best?</para>
      <para>Obviously, there's no right answer to that question.  Every
      team has different needs, and the different servers all
      represent different sets of tradeoffs.  The Subversion project
      itself doesn't endorse one server or another, or consider either
      server more <quote>official</quote> than another.</para>
      <para>Here are some reasons why you might choose one deployment
      over another, as well as reasons you
      might <emphasis>not</emphasis> choose one.</para>
      <section xml:id="svn.serverconfig.choosing.svnserve">
        <info>
          <title>The <command>svnserve</command> Server</title>
        </info>
        <variablelist>
          <varlistentry>
            <term>Why you might want to use it:</term>
            <listitem>
              <itemizedlist>
                <listitem>
                  <para>Quick and easy to set
                up.</para>
                </listitem>
                <listitem>
                  <para>Network protocol is stateful and
                noticeably faster than WebDAV.</para>
                </listitem>
                <listitem>
                  <para>No need to create system accounts on
                server.</para>
                </listitem>
                <listitem>
                  <para>Password is not passed over the
                network.</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Why you might want to avoid it:</term>
            <listitem>
              <itemizedlist>
                <listitem>
                  <para>By default, only one authentication method
                is available, the network protocol is not encrypted,
                and the server stores cleartext passwords.  (All these
                things can be changed by configuring SASL, but it's a
                bit more work to do.)</para>
                </listitem>
                <listitem>
                  <para>No logging of any kind, not even
                errors.</para>
                </listitem>
                <listitem>
                  <para>No built-in web browsing.  (You'd have to
                install a separate web server and some CGI software to
                add this.)</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="svn.serverconfig.choosing.svn-ssh">
        <info>
          <title><command>svnserve</command> over SSH</title>
        </info>
        <variablelist>
          <varlistentry>
            <term>Why you might want to use it:</term>
            <listitem>
              <itemizedlist>
                <listitem>
                  <para>Network protocol is stateful and
                noticeably faster than WebDAV.</para>
                </listitem>
                <listitem>
                  <para>You can take advantage of existing ssh
                accounts and user infrastructure.</para>
                </listitem>
                <listitem>
                  <para>All network traffic is
                encrypted.</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Why you might want to avoid it:</term>
            <listitem>
              <itemizedlist>
                <listitem>
                  <para>Only one choice of authentication
                method.</para>
                </listitem>
                <listitem>
                  <para>No logging of any kind, not even
                errors.</para>
                </listitem>
                <listitem>
                  <para>Requires users to be in same system group, or
                use a shared ssh key.</para>
                </listitem>
                <listitem>
                  <para>If used improperly, can lead to file permissions
                problems.</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="svn.serverconfig.choosing.apache">
        <info>
          <title>The Apache HTTP Server</title>
        </info>
        <variablelist>
          <varlistentry>
            <term>Why you might want to use it:</term>
            <listitem>
              <itemizedlist>
                <listitem>
                  <para>Allows Subversion to use any of the
                  numerous authentication systems already integrated
                  with Apache.</para>
                </listitem>
                <listitem>
                  <para>No need to create system accounts on
                  server.</para>
                </listitem>
                <listitem>
                  <para>Full Apache logging.</para>
                </listitem>
                <listitem>
                  <para>Network traffic can be encrypted via
                  SSL.</para>
                </listitem>
                <listitem>
                  <para>HTTP(S) can usually go through corporate
                  firewalls.</para>
                </listitem>
                <listitem>
                  <para>Built-in repository browsing via web
                  browser.</para>
                </listitem>
                <listitem>
                  <para>Repository can be mounted as a network
                  drive for transparent version control. (See
                  <xref linkend="svn.webdav.autoversioning"/>.)</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Why you might want to avoid it:</term>
            <listitem>
              <itemizedlist>
                <listitem>
                  <para>Noticeably slower than svnserve, because
                HTTP is a stateless protocol and requires more
                turnarounds.</para>
                </listitem>
                <listitem>
                  <para>Initial setup can be complex.</para>
                </listitem>
              </itemizedlist>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="svn.serverconfig.choosing.recommendations">
        <info>
          <title>Recommendations</title>
        </info>
        <para>In general, the authors of this book recommend a vanilla
        <command>svnserve</command> installation for small teams just
        trying to get started with a Subversion server; it's the
        simplest to set up, and has the fewest maintenance issues.
        You can always switch to a more complex server
        deployment as your needs change.</para>
        <para>Here are some general recommendations and tips, based on
        years of supporting users:</para>
        <itemizedlist>
          <listitem>
            <para>If you're trying to set up the simplest possible
            server for your group, then a
            vanilla <command>svnserve</command> installation is the
            easiest, fastest route.  Note, however, that your
            repository data will be transmitted in the clear over the
            network.  If your deployment is entirely within your
            company's LAN or VPN, this isn't an issue.  If the
            repository is exposed to the wide-open internet, then you
            might want to make sure that either the repository's
            contents aren't sensitive (e.g. it contains only
            open-source code), or that you go the extra mile in
            configuring SASL to encrypt network communications.</para>
          </listitem>
          <listitem>
            <para>If you need to integrate with existing legacy identity
            systems (LDAP, Active Directory, NTLM, X.509, etc.), then
            you must use either the Apache-based server
            or <command>svnserve</command> configured with SASL.  If
            you absolutely need server-side logs of either server
            errors or client activities, then an Apache-based server
            is your only option.</para>
          </listitem>
          <listitem>
            <para>If you've decided to use either Apache or stock
             <command>svnserve</command>, create a
             single <literal>svn</literal> user on your system and run
             the server process as that user.  Be sure to make the
             repository directory wholly owned by
             the <literal>svn</literal> user as well.  From a security
             point of view, this keeps the repository data nicely
             siloed and protected by operating system filesystem
             permissions, changeable by only the Subversion server
             process itself.</para>
          </listitem>
          <listitem>
            <para>If you have an existing infrastructure heavily based
            on SSH accounts, and if your users already have system
            accounts on your server machine, then it makes sense to
            deploy an svnserve-over-ssh solution.  Otherwise, we don't
            widely recommend this option to the public.  It's
            generally considered safer to have your users access the
            repository via (imaginary) accounts managed
            by <command>svnserve</command> or Apache, rather than by
            full-blown system accounts.  If your deep desire for
            encrypted communication still draws you to this option, we
            recommend using Apache with SSL
            or <command>svnserve</command> with SASL encryption
            instead.</para>
          </listitem>
          <listitem>
            <para>Do <emphasis>not</emphasis> be seduced by the simple
            idea of having all of your users access a repository
            directly via <literal>file://</literal> URLs.  Even if
            the repository is readily available to everyone via
            network share, this is a bad idea.  It removes any layers
            of protection between the users and the repository: users
            can accidentally (or intentionally) corrupt the repository
            database, it becomes hard to take the repository offline
            for inspection or upgrade, and it can lead to a mess of
            file-permissions problems (see
            <xref linkend="svn.serverconfig.multimethod"/>.)  Note
            that this is also one of the reasons we warn against
            accessing repositories via <literal>svn+ssh://</literal>
            URLs&#x2014;from a security standpoint, it's effectively
            the same as local users accessing
            via <literal>file://</literal>, and can entail all the
            same problems if the administrator isn't careful.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.serverconfig.svnserve">
      <info>
        <title>svnserve, a custom server</title>
      </info>
      <para>The <command>svnserve</command> program is a lightweight
      server, capable of speaking to clients over TCP/IP using a
      custom, stateful protocol.  Clients contact an
      <command>svnserve</command> server by using URLs that begin with
      the <literal>svn://</literal> or <literal>svn+ssh://</literal>
      scheme.  This section will explain the different ways of running
      <command>svnserve</command>, how clients authenticate themselves
      to the server, and how to configure appropriate access control
      to your repositories.</para>
      <!-- =============================================================== -->
      <section xml:id="svn.serverconfig.svnserve.invoking">
        <info>
          <title>Invoking the Server</title>
        </info>
        <para>There are a few different ways to run the
        <command>svnserve</command> program:</para>
        <itemizedlist>
          <listitem>
            <para>Run <command>svnserve</command> as a
            standalone daemon, listening for
            requests.</para>
          </listitem>
          <listitem>
            <para>Have the Unix <command>inetd</command> daemon
            temporarily spawn <command>svnserve</command> whenever a
            request comes in on a certain port.</para>
          </listitem>
          <listitem>
            <para>Have SSH invoke a
            temporary <command>svnserve</command> over an encrypted
            tunnel.</para>
          </listitem>
          <listitem>
            <para>Run <command>svnserve</command> as a Microsoft
            Windows service.</para>
          </listitem>
        </itemizedlist>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.serverconfig.svnserve.invoking.daemon">
          <info>
            <title><command>svnserve</command> as Daemon</title>
          </info>
          <para>The easiest option is to run <command>svnserve</command>
          as a standalone <quote>daemon</quote> process.  Use the
          <option>-d</option> option for this:</para>
          <screen>
$ svnserve -d
$               # svnserve is now running, listening on port 3690
</screen>
          <para>When running <command>svnserve</command> in daemon mode,
          you can use the <option>--listen-port=</option> and
          <option>--listen-host=</option> options to customize the
          exact port and hostname to <quote>bind</quote> to.</para>
          <para>Once we successfully start <command>svnserve</command> as
        above, it makes every repository on your system available to
        the network.  A client needs to specify an
        <emphasis>absolute</emphasis> path in the repository URL.  For
        example, if a repository is located at
        <filename>/var/svn/project1</filename>, then a client would
        reach it via
        <uri>svn://host.example.com/var/svn/project1</uri>.  To
        increase security, you can pass the <option>-r</option> option
        to <command>svnserve</command>, which restricts it to
        exporting only repositories below that path.  For
        example:</para>
          <screen>
$ svnserve -d -r /var/svn
&#x2026;
</screen>
          <para>Using the <option>-r</option> option effectively
        modifies the location that the program treats as the root of
        the remote filesystem space.  Clients then use URLs that
        have that path portion removed from them, leaving much
        shorter (and much less revealing) URLs:</para>
          <screen>
$ svn checkout svn://host.example.com/project1
&#x2026;
</screen>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.serverconfig.svnserve.invoking.inetd">
          <info>
            <title><command>svnserve</command> via <command>inetd</command></title>
          </info>
          <para>If you want <command>inetd</command> to launch the
          process, then you need to pass the <option>-i</option>
          (<option>--inetd</option>) option.  In the example, we've shown the
          output from running <literal>svnserve -i</literal> at the
          command line, but note that isn't how you actually start the
          daemon; see the paragraphs following the example for how to
          configure <command>inetd</command> to
          start <command>svnserve</command>.</para>
          <screen>
$ svnserve -i
( success ( 1 2 ( ANONYMOUS ) ( edit-pipeline ) ) )
</screen>
          <para>When invoked with the <option>--inetd</option> option,
        <command>svnserve</command> attempts to speak with a
        Subversion client via <emphasis>stdin</emphasis> and
        <emphasis>stdout</emphasis> using a custom protocol.  This is
        the standard behavior for a program being run via
        <command>inetd</command>.  The IANA has reserved port 3690
        for the Subversion protocol, so on a Unix-like system you can
        add lines to <filename>/etc/services</filename> like these (if
        they don't already exist):</para>
          <screen>
svn           3690/tcp   # Subversion
svn           3690/udp   # Subversion
</screen>
          <para>And if your system is using a classic Unix-like
        <command>inetd</command> daemon, you can add this line to
        <filename>/etc/inetd.conf</filename>:</para>
          <screen>
svn stream tcp nowait svnowner /usr/bin/svnserve svnserve -i
</screen>
          <para>Make sure <quote>svnowner</quote> is a user which has
        appropriate permissions to access your repositories.  Now, when
        a client connection comes into your server on port 3690,
        <command>inetd</command> will spawn an
        <command>svnserve</command> process to service it.  Of course,
        you may also want to add <option>-r</option> to the
        configuration line as well, to restrict which repositories are
        exported.</para>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.serverconfig.svnserve.invoking.tunnel">
          <info>
            <title><command>svnserve</command> over a Tunnel</title>
          </info>
          <para>A third way to invoke <command>svnserve</command> is in
          <quote>tunnel mode</quote>, with the <option>-t</option>
          option.  This mode assumes that a remote-service program
          such as <command>RSH</command> or <command>SSH</command> has
          successfully authenticated a user and is now invoking a
          private <command>svnserve</command> process <emphasis>as
          that user</emphasis>.  (Note that you, the user, will
          rarely, if ever, have reason to invoke
          <command>svnserve</command> with the <option>-t</option> at
          the command line; instead, the <command>SSH</command> daemon
          does so for you.)  The <command>svnserve</command> program
          behaves normally (communicating via
          <emphasis>stdin</emphasis> and <emphasis>stdout</emphasis>),
          and assumes that the traffic is being automatically
          redirected over some sort of tunnel back to the client.
          When <command>svnserve</command> is invoked by a tunnel
          agent like this, be sure that the authenticated user has
          full read and write access to the repository database files.
          It's essentially the same as a local user accessing the
          repository via <literal>file://</literal> URLs.</para>
          <para>This option is described in much more detail in
          <xref linkend="svn.serverconfig.svnserve.sshauth"/>.</para>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.serverconfig.svnserve.invoking.winservice">
          <info>
            <title><command>svnserve</command> as Windows Service</title>
          </info>
          <para>If your Windows system is a descendant of Windows NT
          (2000, 2003, XP, Vista), then you can
          run <command>svnserve</command> as a standard Windows
          service.  This is typically a much nicer experience than
          running it as a standalone daemon with the <option>--daemon
          (-d)</option> option.  Using daemon-mode requires launching
          a console, typing a command, and then leaving the console
          window running indefinitely.  A Windows service, however,
          runs in the background, can start at boot time
          automatically, and can be started and stopped using the same
          consistent administration interface as other
          Windows services. </para>
          <para>You'll need to define the new service using the
          command-line tool <command>SC.EXE</command>.  Much like
          the <command>inetd</command> configuration line, you must
          specify an exact invocation of <command>svnserve</command>
          for Windows to run at start-up time:</para>
          <screen>
C:\&gt; sc create svn
        binpath= "C:\svn\bin\svnserve.exe --service -r C:\repos"
        displayname= "Subversion Server"
        depend= Tcpip
        start= auto
</screen>
          <para>This defines a new Windows service
          named <quote>svn</quote>, and which executes a
          particular <command>svnserve.exe</command> command when
          started (in this case, rooted
          at <filename>C:\repos</filename>.)  There are a number of
          caveats in the prior example, however.</para>
          <para>First, notice that the <command>svnserve.exe</command>
          program must always be invoked with
          the <option>--service</option> option.  Any other options to
          <command>svnserve</command> must then be specified on the
          same line, but you cannot add conflicting options such
          as <option>--daemon
          (-d)</option>, <option>--tunnel</option>, or <option>--inetd
          (-i)</option>.  Options such as <option>-r</option>
          or <option>--listen-port</option> are fine, though.  Second, be
          careful about spaces when invoking
          the <command>SC.EXE</command> command: the
          <literal>key= value</literal> patterns must have no
          spaces between <literal>key=</literal> and exactly one
          space before the <literal>value</literal>.  Lastly, be
          careful about spaces in your command-line to be invoked.  If
          a directory name contains spaces (or other characters that
          need escaping), place the entire inner value
          of <literal>binpath</literal> in double-quotes, by escaping
          them:</para>
          <screen>
C:\&gt; sc create svn
        binpath= "\"C:\program files\svn\bin\svnserve.exe\" --service -r C:\repos"
        displayname= "Subversion Server"
        depend= Tcpip
        start= auto
</screen>
          <para>Also note that the word <literal>binpath</literal> is
          misleading&#x2014;its value is a <emphasis>command
          line</emphasis>, not the path to an executable.  That's why
          you need to surround it with quote marks if it contains
          embedded spaces.</para>
          <para>Once the service is defined, it can stopped, started, or
          queried using standard GUI tools (the Services
          administrative control panel), or at the command line as
          well:</para>
          <screen>
C:\&gt; net stop svn
C:\&gt; net start svn
</screen>
          <para>The service can also be uninstalled (i.e. undefined) by
          deleting its definition:  <literal>sc delete svn</literal>.
          Just be sure to stop the service first!
          The <command>SC.EXE</command> program has many other
          subcommands and options; run <literal>sc /?</literal> to
          learn more about it.</para>
        </section>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.serverconfig.svnserve.auth">
        <info>
          <title>Built-in authentication and authorization</title>
        </info>
        <para>When a client connects to an <command>svnserve</command>
        process, the following things happen:</para>
        <itemizedlist>
          <listitem>
            <para>The client selects a specific
        repository.</para>
          </listitem>
          <listitem>
            <para>The server processes the repository's
        <filename>conf/svnserve.conf</filename> file, and begins to
        enforce any authentication and authorization policies it
        describes.</para>
          </listitem>
          <listitem>
            <para>Depending on the defined policies,</para>
            <itemizedlist>
              <listitem>
                <para>the client may be allowed to make requests
              anonymously, without ever receiving an authentication
              challenge, OR</para>
              </listitem>
              <listitem>
                <para>the client may be challenged for
              authentication at any time, OR</para>
              </listitem>
              <listitem>
                <para>if operating in <quote>tunnel
              mode</quote>, the client will declare itself to be
              already externally authenticated (typically by
              SSH).</para>
              </listitem>
            </itemizedlist>
          </listitem>
        </itemizedlist>
        <para>The <command>svnserve</command> server, by default, only
        knows how to send a CRAM-MD5 <footnote><para>See RFC
        2195.</para></footnote> authentication challenge.  In essence,
        the server sends a small amount of data to the client.  The
        client uses the MD5 hash algorithm to create a fingerprint of
        the data and password combined, then sends the fingerprint as
        a response.  The server performs the same computation with the
        stored password to verify that the result is
        identical.  <emphasis>At no point does the actual password
        travel over the network.</emphasis></para>
        <para>If your <command>svnserve</command> server was built with
        SASL, then it not only knows how to send CRAM-MD5 challenges,
        but likely knows a whole host of other authentication
        mechanisms.  See
        <xref linkend="svn.serverconfig.svnserve.sasl"/> to configure
        SASL authentication and encryption.</para>
        <para>It's also possible, of course, for the client to be
        externally authenticated via a tunnel agent, such as
        <command>SSH</command>.  In that case, the server simply
        examines the user it's running as, and uses it as the
        authenticated username.  For more on this, see <xref linkend="svn.serverconfig.svnserve.sshauth"/>.</para>
        <para>As you've already guessed, a repository's
        <filename>svnserve.conf</filename> file is the central
        mechanism for controlling authentication and authorization
        policies.  The file has the same format as other configuration
        files (see <xref linkend="svn.advanced.confarea"/>): section names
        are marked by square brackets (<literal>[</literal> and
        <literal>]</literal>), comments begin with hashes
        (<literal>#</literal>), and each section contains
        specific variables that can be set (<literal>variable =
        value</literal>).  Let's walk through these files and learn how
        to use them.</para>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.serverconfig.svnserve.auth.users">
          <info>
            <title>Create a 'users' file and realm</title>
          </info>
          <para>For now, the <literal>[general]</literal> section of the
          <filename>svnserve.conf</filename> has all the variables you
          need.  Begin by changing the values of those variables:
          choose a name for a file which will contain your usernames
          and passwords, and choose an authentication realm:</para>
          <screen>
[general]
password-db = userfile
realm = example realm
</screen>
          <para>The <literal>realm</literal> is a name that you define.
          It tells clients which sort of <quote>authentication
          namespace</quote> they're connecting to; the Subversion
          client displays it in the authentication prompt, and uses it
          as a key (along with the server's hostname and port) for
          caching credentials on disk (see <xref linkend="svn.serverconfig.netmodel.credcache"/>).  The
          <literal>password-db</literal> variable points to a separate
          file that contains a list of usernames and passwords, using
          the same familiar format.  For example:</para>
          <screen>
[users]
harry = foopassword
sally = barpassword
</screen>
          <para>The value of <literal>password-db</literal> can be an
          absolute or relative path to the users file.  For many
          admins, it's easy to keep the file right in the
          <filename>conf/</filename> area of the repository, alongside
          <filename>svnserve.conf</filename>.  On the other hand, it's
          possible you may want to have two or more repositories share
          the same users file; in that case, the file should probably
          live in a more public place.  The repositories sharing the
          users file should also be configured to have the same realm,
          since the list of users essentially defines an
          authentication realm.  Wherever the file lives, be sure to
          set the file's read and write permissions appropriately.  If
          you know which user(s) <command>svnserve</command> will run
          as, restrict read access to the user file as necessary.</para>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.serverconfig.svnserve.auth.general">
          <info>
            <title>Set access controls</title>
          </info>
          <para>There are two more variables to set in the
          <filename>svnserve.conf</filename> file: they determine what
          unauthenticated (anonymous) and authenticated users are
          allowed to do.  The variables <literal>anon-access</literal>
          and <literal>auth-access</literal> can be set to the values
          <literal>none</literal>, <literal>read</literal>, or
          <literal>write</literal>.  Setting the value to
          <literal>none</literal> prohibits both reading and writing;
          <literal>read</literal> allows read-only access to the
          repository, and <literal>write</literal> allows complete
          read/write access to the repository.  For example:</para>
          <screen>
[general]
password-db = userfile
realm = example realm

# anonymous users can only read the repository
anon-access = read

# authenticated users can both read and write
auth-access = write
</screen>
          <para>The example settings are, in fact, the default values of
          the variables, should you forget to define them.  If you
          want to be even more conservative, you can block anonymous
          access completely:</para>
          <screen>
[general]
password-db = userfile
realm = example realm

# anonymous users aren't allowed
anon-access = none

# authenticated users can both read and write
auth-access = write
</screen>
          <para>The server process not only understands
        these <quote>blanket</quote> access controls to the
        repository, but also finer-grained access restrictions placed
        on specific files and directories within the repository.  To
        make use of this feature, you need to define a file containing
        more detailed rules, and then set
        the <literal>authz-db</literal> variable to point to it:</para>
          <screen>
[general]
password-db = userfile
realm = example realm

# Specific access rules for specific locations
authz-db = authzfile
</screen>
          <para>The syntax of the <filename>authzfile</filename> file is
          discussed in detail in
          <xref linkend="svn.serverconfig.pathbasedauthz"/>.  Note
          that the <literal>authz-db</literal> variable isn't mutually
          exclusive with the <literal>anon-access</literal>
          and <literal>auth-access</literal> variables;  if all the
          variables are defined at once, then <emphasis>all</emphasis>
          of the rules must be satisfied before access is allowed.</para>
        </section>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.serverconfig.svnserve.sasl">
        <info>
          <title>Using <command>svnserve</command> with SASL</title>
        </info>
        <para>For many teams, the built-in CRAM-MD5 authentication is
        all they need from <command>svnserve</command>.  However, if
        your server (and your Subversion clients) were built with the
        Cyrus Simple Authentication and Security Layer (SASL) library,
        then you have a number of authentication and encryption
        options available to you.</para>
        <sidebar>
          <info>
            <title>What is SASL?</title>
          </info>
          <para>The Cyrus Simple Authentication and Security Layer is
          open-source software written by Carnegie Mellon University.
          It adds generic authentication and encryption capabilities
          to any network protocol, and as of Subversion 1.5 and later,
          both the <command>svnserve</command> server
          and <command>svn</command> client know how to make use of
          this library.  It may or may not be available to you: if
          you're building Subversion yourself, you'll need to have at
          least version 2.1 of SASL installed on your system and
          you'll need to make sure that it's detected during
          Subversion's build process.  If you're using a pre-built
          Subversion binary package, you'll have to check with the
          package maintainer as to whether SASL support was compiled
          in.  SASL comes with a number of pluggable modules that
          represent different authentication systems: Kerberos
          (GSSAPI), NTLM, One-Time-Passwords (OTP), DIGEST-MD5, LDAP,
          Secure-Remote-Password (SRP), and others.  Certain
          mechanisms may or may not be available to you; be sure to
          check which modules are provided.</para>
          <para>You can download Cyrus SASL (both code and
          documentation) from
          <uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://asg.web.cmu.edu/sasl/sasl-library.html">http://asg.web.cmu.edu/sasl/sasl-library.html</uri>.</para>
        </sidebar>
        <para>Normally, when a subversion client connects
        to <command>svnserve</command>, the server sends a greeting
        which advertises a list of capabilities it supports, and the
        client responds with a similar list of capabilities.  If the
        server is configured to require authentication, it then sends
        a challenge which lists the authentication mechanisms
        available; the client responds by choosing one of the
        mechanisms, and then authentication is carried out in some
        number of roundtrip messages.  Even when SASL capabilities
        aren't present, the client and server inherently know how to
        use the CRAM-MD5 and ANONYMOUS mechanisms (see
        <xref linkend="svn.serverconfig.svnserve.auth"/>).  If server
        and client were linked against SASL, then a number of other
        authentication mechanisms may also be available.  However,
        you'll need to explicitly configure SASL on the server-side to
        advertise them.</para>
        <section xml:id="svn.serverconfig.svnserve.sasl.authn">
          <info>
            <title>Authenticating with SASL</title>
          </info>
          <para>To activate specific SASL mechanisms on the server, you'll
          need to do two things.  First, create
          a <literal>[sasl]</literal> section in your
          repository's <filename>svnserve.conf</filename> file, with
          this key-value pair:</para>
          <screen>
          use-sasl = true
</screen>
          <para>Second, create a file
          called <filename>subversion.conf</filename> in a place where
          the SASL library can find it&#x2014;typically in the
          directory where SASL plugins are located.  You'll have to
          locate the plugin directory on your particular system, such
          as <filename>/usr/lib/sasl2/</filename>
          or <filename>/etc/sasl2/</filename>.  (Note that this
          is <emphasis>not</emphasis>
          the <filename>svnserve.conf</filename> file that lives
          within a repository!)</para>
          <para>On a Windows server, you'll have to also edit the
          registry (using a tool like <command>regedit</command>) to
          tell SASL where to find things.  Create a registry key
          named <literal>[HKEY_LOCAL_MACHINE\SOFTWARE\Carnegie
          Mellon\Project Cyrus\SASL Library]</literal>, and place two
          keys inside it: a key called <literal>SearchPath</literal>
          (whose value is a path containing the
          SASL <filename>.dll</filename> plugins), and a key
          called <literal>ConfFile</literal> (whose value is a path
          containing the <filename>subversion.conf</filename>
          file.)</para>
          <para>Because SASL provides so many different kinds of
          authentication mechanisms, it would be foolish (and far
          beyond the scope of this book) to try and describe every
          possible server-side configuration.  Instead, we recommend
          that you read the documentation supplied in
          the <filename>doc/</filename> subdirectory of the SASL
          source code.  It goes into great detail about each mechanism
          and how to configure the server appropriately for each.  For
          the purposes of this discussion, we'll just demonstrate a
          simple example of configuring the DIGEST-MD5 mechanism.  For
          example, if your <filename>subversion.conf</filename>
          contains:</para>
          <screen>
pwcheck_method: auxprop
auxprop_plugin: sasldb
mech_list: DIGEST-MD5
</screen>
          <para>...then you've told SASL to advertise the DIGEST-MD5
          mechanism to clients, and to check user passwords against a
          private password database (typically stored
          in <filename>/etc/sasldb2</filename>).  A system
          administrator can then use
          the <command>saslpasswd2</command> program to add or modify
          usernames and passwords in the database:</para>
          <screen>
$ saslpasswd2 -c -u realm username
</screen>
          <para>A few words of warning: first, make sure that the
          "realm" argument to <command>saslpasswd2</command> matches
          the same "realm" you've defined in your
          repository's <filename>svnserve.conf</filename> file; if
          they don't match, authentication will fail.  Also, due to a
          shortcoming in SASL, the common realm must be a string with
          no space characters.  Finally, if you decide to go with the
          standard SASL password database, make sure that
          the <command>svnserve</command> program has read access to
          the file (and possibly write access as well, if you're using
          a mechanism such as OTP.)</para>
          <para>This is just one simple way of configuring SASL.  Many
          other authentication mechanisms available, and passwords can
          be stored in other places such as in LDAP or a SQL database.
          Consult the full SASL documentation for details.</para>
          <para>Remember that if you configure your server to only allow
          certain SASL authentication mechanisms, this can also have
          the effect of forcing all of connecting clients to have SASL
          support as well.  Any Subversion client built without SASL
          support (which includes all pre-1.5 clients) will be unable
          to authenticate.  On the one hand, this sort of restriction
          may be exactly what you want (<quote>my clients must all use
          Kerberos!</quote>).  However, if you still want non-SASL
          clients to be able to authenticate, be sure to advertise the
          CRAM-MD5 mechanism as an option.  All clients are able to
          use CRAM-MD5, whether they have SASL support or not.</para>
        </section>
        <section xml:id="svn.serverconfig.svnserve.sasl.encryption">
          <info>
            <title>SASL Encryption</title>
          </info>
          <para>SASL is also able to perform data-encryption if a
          particular mechanism supports it.  The built-in CRAM-MD5
          mechanism doesn't support encryption, but DIGEST-MD5 does,
          and mechanisms like SRP actually require use of the OpenSSL
          library .  To enable or disable different levels of
          encryption, you can set two values in your
          repository's <filename>svnserve.conf</filename> file:</para>
          <screen>
[sasl]
use-sasl = true
min-encryption = 128
max-encryption = 256
</screen>
          <para>The <literal>min-encryption</literal>
          and <literal>max-encryption</literal> variables control the
          level of encryption demanded by the server.  To disable
          encryption completely, set both values to 0.  To enable
          simple checksumming of data (i.e. prevent tampering and
          guarantee data integrity without encryption), set both
          values to 1.  If you wish to allow&#x2014;but not
          require&#x2014;encryption, set the minimum value to 0, and
          the maximum value to some bit-length.  To require encryption
          unconditionally, set both values to numbers greater than 1.
          In our example above, we require clients to do at least
          128-bit encryption, but no more than 256-bit
          encryption.</para>
        </section>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.serverconfig.svnserve.sshauth">
        <info>
          <title>Tunneling over SSH</title>
        </info>
        <para><command>svnserve</command>'s built-in authentication (and
        SASL support) can be very handy, because it avoids the need to
        create real system accounts.  On the other hand, some
        administrators already have well-established SSH
        authentication frameworks in place.  In these situations, all
        of the project's users already have system accounts and the
        ability to <quote>SSH into</quote> the server machine.</para>
        <para>It's easy to use SSH in conjunction with
        <command>svnserve</command>.  The client simply uses the
        <literal>svn+ssh://</literal> URL scheme to connect:</para>
        <screen>
$ whoami
harry

$ svn list svn+ssh://host.example.com/repos/project
harry@host.example.com's password:  *****

foo
bar
baz
&#x2026;
</screen>
        <para>In this example, the Subversion client is invoking a local
        <command>ssh</command> process, connecting to
        <literal>host.example.com</literal>, authenticating as the
        user <literal>harry</literal>, then spawning a private
        <command>svnserve</command> process on the remote machine
        running as the user <literal>harry</literal>.  The
        <command>svnserve</command> command is being invoked in tunnel
        mode (<option>-t</option>) and its network protocol is being
        <quote>tunneled</quote> over the encrypted connection by
        <command>ssh</command>, the tunnel-agent.
        <command>svnserve</command> is aware that it's running as the
        user <literal>harry</literal>, and if the client performs a
        commit, the authenticated username will be used as the
        author of the new revision.</para>
        <para>The important thing to understand here is that the
        Subversion client is <emphasis>not</emphasis> connecting to a
        running <command>svnserve</command> daemon.  This method of
        access doesn't require a daemon, nor does it notice one if
        present.  It relies wholly on the ability of
        <command>ssh</command> to spawn a temporary
        <command>svnserve</command> process, which then terminates
        when the network connection is closed.</para>
        <para>When using <literal>svn+ssh://</literal> URLs to access a
        repository, remember that it's the <command>ssh</command>
        program prompting for authentication, and
        <emphasis>not</emphasis> the <command>svn</command> client
        program.  That means there's no automatic password caching
        going on (see <xref linkend="svn.serverconfig.netmodel.credcache"/>).  The
        Subversion client often makes multiple connections to the
        repository, though users don't normally notice this due to the
        password caching feature.  When using
        <literal>svn+ssh://</literal> URLs, however, users may be
        annoyed by <command>ssh</command> repeatedly asking for a
        password for every outbound connection.  The solution is to
        use a separate SSH password-caching tool like
        <command>ssh-agent</command> on a Unix-like system, or
        <command>pageant</command> on Windows.</para>
        <para>When running over a tunnel, authorization is primarily
        controlled by operating system permissions to the repository's
        database files; it's very much the same as if Harry were
        accessing the repository directly via a
        <literal>file://</literal> URL.  If multiple system users are
        going to be accessing the repository directly, you may want to
        place them into a common group, and you'll need to be careful
        about umasks.  (Be sure to read <xref linkend="svn.serverconfig.multimethod"/>.)  But even in the case of
        tunneling, the <filename>svnserve.conf</filename> file can
        still be used to block access, by simply setting
        <literal>auth-access = read</literal> or <literal>auth-access
        = none</literal>.
        <footnote><para>Note that using any sort
            of <command>svnserve</command>-enforced access control at
            all is a bit pointless;  the user already has direct access to
            the repository database.</para></footnote>
      </para>
        <para>You'd think that the story of SSH tunneling would end
        here, but it doesn't.  Subversion allows you to create custom
        tunnel behaviors in your run-time <filename>config</filename>
        file (see <xref linkend="svn.advanced.confarea"/>).  For example,
        suppose you want to use RSH instead of SSH<footnote><para>We
        don't actually recommend this, since RSH is notably less
        secure than SSH.</para></footnote>.  In the
        <literal>[tunnels]</literal> section of your
        <filename>config</filename> file, simply define it like
        this:</para>
        <screen>
[tunnels]
rsh = rsh
</screen>
        <para>And now, you can use this new tunnel definition by using a
        URL scheme that matches the name of your new variable:
        <literal>svn+rsh://host/path</literal>.  When using the new
        URL scheme, the Subversion client will actually be running the
        command <command>rsh host svnserve -t</command> behind the
        scenes.  If you include a username in the URL (for example,
        <literal>svn+rsh://username@host/path</literal>) the client
        will also include that in its command (<command>rsh
        username@host svnserve -t</command>).  But you can define new
        tunneling schemes to be much more clever than that:</para>
        <screen>
[tunnels]
joessh = $JOESSH /opt/alternate/ssh -p 29934
</screen>
        <para>This example demonstrates a couple of things.  First, it
        shows how to make the Subversion client launch a very specific
        tunneling binary (the one located at
        <filename>/opt/alternate/ssh</filename>) with specific
        options.  In this case, accessing a
        <literal>svn+joessh://</literal> URL would invoke the
        particular SSH binary with <option>-p 29934</option> as
        arguments&#x2014;useful if you want the tunnel program to
        connect to a non-standard port.</para>
        <para>Second, it shows how to define a custom environment
        variable that can override the name of the tunneling program.
        Setting the <literal>SVN_SSH</literal> environment variable is
        a convenient way to override the default SSH tunnel agent.
        But if you need to have several different overrides for
        different servers, each perhaps contacting a different port or
        passing a different set of options to SSH, you can use the
        mechanism demonstrated in this example.  Now if we were to set
        the <literal>JOESSH</literal> environment variable, its value
        would override the entire value of the tunnel
        variable&#x2014;<command>$JOESSH</command> would be executed
        instead of <command>/opt/alternate/ssh -p
        29934</command>.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.serverconfig.svnserve.sshtricks">
        <info>
          <title>SSH configuration tricks</title>
        </info>
        <para>It's not only possible to control the way in which the
        client invokes <command>ssh</command>, but also to control
        the behavior of <command>sshd</command> on your server
        machine.  In this section, we'll show how to control the
        exact <command>svnserve</command> command executed
        by <command>sshd</command>, as well as how to have multiple
        users share a single system account.</para>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.serverconfig.svnserve.sshtricks.setup">
          <info>
            <title>Initial setup</title>
          </info>
          <para>To begin, locate the home directory of the account
          you'll be using to launch <command>svnserve</command>.  Make
          sure the account has an SSH public/private keypair
          installed, and that the user can log in via public-key
          authentication.  Password authentication will not work,
          since all of the following SSH tricks revolve around using
          the SSH <filename>authorized_keys</filename> file.</para>
          <para>If it doesn't already exist, create the
          <filename>authorized_keys</filename> file (on Unix,
          typically <filename>~/.ssh/authorized_keys</filename>).
          Each line in this file describes a public key that is
          allowed to connect.  The lines are typically of the
          form:</para>
          <screen>
  ssh-dsa AAAABtce9euch&#x2026; user@example.com
</screen>
          <para>The first field describes the type of key, the second
          field is the base64-encoded key itself, and the third field
          is a comment.  However, it's a lesser known fact that the
          entire line can be preceded by a <literal>command</literal>
          field:</para>
          <screen>
  command="program" ssh-dsa AAAABtce9euch&#x2026; user@example.com
</screen>
          <para>When the <literal>command</literal> field is set, the
          SSH daemon will run the named program instead of the
          typical <command>svnserve -t</command> invocation that the
          Subversion client asks for.  This opens the door to a number
          of server-side tricks.  In the following examples, we
          abbreviate the lines of the file as:</para>
          <screen>
  command="program" TYPE KEY COMMENT
</screen>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.serverconfig.svnserve.sshtricks.fixedcmd">
          <info>
            <title>Controlling the invoked command</title>
          </info>
          <para>Because we can specify the executed server-side command,
          it's easy to name a specific <command>svnserve</command>
          binary to run and to pass it extra arguments:</para>
          <screen>
  command="/path/to/svnserve -t -r /virtual/root" TYPE KEY COMMENT
</screen>
          <para>In this example, <filename>/path/to/svnserve</filename>
          might be a custom wrapper script
          around <command>svnserve</command> which sets the umask (see
          <xref linkend="svn.serverconfig.multimethod"/>).  It also shows how to
          anchor <command>svnserve</command> in a virtual root
          directory, just as one often does when
          running <command>svnserve</command> as a daemon process.
          This might be done either to restrict access to parts of the
          system, or simply to relieve the user of having to type an
          absolute path in the <literal>svn+ssh://</literal>
          URL.</para>
          <para>It's also possible to have multiple users share a single
          account.  Instead of creating a separate system account for
          each user, generate a public/private keypair for each
          person.  Then place each public key into
          the <filename>authorized_users</filename> file, one per
          line, and use the <option>--tunnel-user</option>
          option:</para>
          <screen>
  command="svnserve -t --tunnel-user=harry" TYPE1 KEY1 harry@example.com
  command="svnserve -t --tunnel-user=sally" TYPE2 KEY2 sally@example.com
</screen>
          <para>This example allows both Harry and Sally to connect to
          the same account via public-key authentication.  Each of
          them has a custom command that will be executed;
          the <option>--tunnel-user</option> option 
          tells <command>svnserve -t</command> to assume that the named
          argument is the authenticated user.  Without
          <option>--tunnel-user</option>, it would appear as though
          all commits were coming from the one shared system
          account.</para>
          <para>A final word of caution: giving a user access to the
          server via public-key in a shared account might still allow
          other forms of SSH access, even if you've set
          the <literal>command</literal> value
          in <filename>authorized_keys</filename>.  For example, the
          user may still get shell access through SSH, or be able to
          perform X11 or general port-forwarding through your server.
          To give the user as little permission as possible, you may
          want to specify a number of restrictive options immediately
          after the <literal>command</literal>:</para>
          <screen>
  command="svnserve -t --tunnel-user=harry",no-port-forwarding,\
           no-agent-forwarding,no-X11-forwarding,no-pty \
           TYPE1 KEY1 harry@example.com
</screen>
        </section>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.serverconfig.httpd">
      <info>
        <title>httpd, the Apache HTTP server</title>
      </info>
      <para>The Apache HTTP Server is a <quote>heavy duty</quote>
      network server that Subversion can leverage.  Via a custom
      module, <command>httpd</command> makes Subversion repositories
      available to clients via the WebDAV/DeltaV protocol, which is an
      extension to HTTP 1.1 (see <uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.webdav.org/">http://www.webdav.org/</uri>
      for more information).  This protocol takes the ubiquitous HTTP
      protocol that is the core of the World Wide Web, and adds
      writing&#x2014;specifically, versioned
      writing&#x2014;capabilities.  The result is a standardized,
      robust system that is conveniently packaged as part of the
      Apache 2.0 software, is supported by numerous operating systems
      and third-party products, and doesn't require network
      administrators to open up yet another custom port.
      <footnote><para>They really hate doing that.</para></footnote>
      While an Apache-Subversion server has more features than
      <command>svnserve</command>, it's also a bit more difficult
      to set up.  With flexibility often comes more complexity.</para>
      <para>Much of the following discussion includes references to
      Apache configuration directives.  While some examples are given
      of the use of these directives, describing them in full is
      outside the scope of this chapter.  The Apache team maintains
      excellent documentation, publicly available on their website at
      <uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://httpd.apache.org">http://httpd.apache.org</uri>.  For example, a general
      reference for the configuration directives is located at <uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="       http://httpd.apache.org/docs-2.0/mod/directives.html">       http://httpd.apache.org/docs-2.0/mod/directives.html</uri>.</para>
      <para>Also, as you make changes to your Apache setup, it is likely
      that somewhere along the way a mistake will be made.  If you are
      not already familiar with Apache's logging subsystem, you should
      become aware of it.  In your <filename>httpd.conf</filename>
      file are directives that specify the on-disk locations of the
      access and error logs generated by Apache (the
      <literal>CustomLog</literal> and <literal>ErrorLog</literal>
      directives, respectively).  Subversion's mod_dav_svn uses
      Apache's error logging interface as well.  You can always browse
      the contents of those files for information that might reveal
      the source of a problem that is not clearly noticeable
      otherwise.</para>
      <sidebar>
        <info>
          <title>Why Apache 2?</title>
        </info>
        <para>If you're a system administrator, it's very likely that
        you're already running the Apache web server and have some
        prior experience with it.  At the time of writing, Apache 1.3
        is by far the most popular version of Apache.  The world has
        been somewhat slow to upgrade to the Apache 2.X series for
        various reasons: some people fear change, especially changing
        something as critical as a web server.  Other people depend on
        plug-in modules that only work against the Apache 1.3 API, and
        are waiting for a 2.X port.  Whatever the reason, many people
        begin to worry when they first discover that Subversion's
        Apache module is written specifically for the Apache 2 API.</para>
        <para>The proper response to this problem is: don't worry about
        it.  It's easy to run Apache 1.3 and Apache 2 side-by-side;
        simply install them to separate places, and use Apache 2 as a
        dedicated Subversion server that runs on a port other than 80.
        Clients can access the repository by placing the port number
        into the URL:</para>
        <screen>
$ svn checkout http://host.example.com:7382/repos/project
&#x2026;
</screen>
      </sidebar>
      <!-- =============================================================== -->
      <section xml:id="svn.serverconfig.httpd.prereqs">
        <info>
          <title>Prerequisites</title>
        </info>
        <para>To network your repository over HTTP, you basically need
        four components, available in two packages.  You'll need
        Apache <command>httpd</command> 2.0, the
        <command>mod_dav</command> DAV module that comes with it,
        Subversion, and the <command>mod_dav_svn</command>
        filesystem provider module distributed with Subversion.
        Once you have all of those components, the process of
        networking your repository is as simple as:</para>
        <itemizedlist>
          <listitem>
            <para>getting httpd 2.0 up and running with the mod_dav
            module,</para>
          </listitem>
          <listitem>
            <para>installing the mod_dav_svn plugin to mod_dav, which
            uses Subversion's libraries to access the repository,
            and</para>
          </listitem>
          <listitem>
            <para>configuring your <filename>httpd.conf</filename>
            file to export (or expose) the repository.</para>
          </listitem>
        </itemizedlist>
        <para>You can accomplish the first two items either by
        compiling <command>httpd</command> and Subversion from
        source code, or by installing pre-built binary packages of
        them on your system.  For the most up-to-date information on
        how to compile Subversion for use with the Apache HTTP Server,
        as well as how to compile and configure Apache itself for
        this purpose, see the <filename>INSTALL</filename> file in
        the top level of the Subversion source code tree.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.serverconfig.httpd.basic">
        <info>
          <title>Basic Apache Configuration</title>
        </info>
        <para>Once you have all the necessary components installed on
        your system, all that remains is the configuration of Apache
        via its <filename>httpd.conf</filename> file.  Instruct Apache
        to load the mod_dav_svn module using the
        <literal>LoadModule</literal> directive.  This directive must
        precede any other Subversion-related configuration items.  If
        your Apache was installed using the default layout, your
        <command>mod_dav_svn</command> module should have been
        installed in the <filename>modules</filename> subdirectory of
        the Apache install location (often
        <filename>/usr/local/apache2</filename>).  The
        <literal>LoadModule</literal> directive has a simple syntax,
        mapping a named module to the location of a shared library on
        disk:</para>
        <screen>
LoadModule dav_svn_module     modules/mod_dav_svn.so
</screen>
        <para>Note that if <command>mod_dav</command> was compiled as a
        shared object (instead of statically linked directly to the
        <command>httpd</command> binary), you'll need a similar
        <literal>LoadModule</literal> statement for it, too.  Be sure
        that it comes before the <command>mod_dav_svn</command> line:</para>
        <screen>
LoadModule dav_module         modules/mod_dav.so
LoadModule dav_svn_module     modules/mod_dav_svn.so
</screen>
        <para>At a later location in your configuration file, you now
        need to tell Apache where you keep your Subversion repository
        (or repositories).  The <literal>Location</literal> directive
        has an XML-like notation, starting with an opening tag, and
        ending with a closing tag, with various other configuration
        directives in the middle.  The purpose of the
        <literal>Location</literal> directive is to instruct Apache to
        do something special when handling requests that are directed
        at a given URL or one of its children.  In the case of
        Subversion, you want Apache to simply hand off support for
        URLs that point at versioned resources to the DAV layer.  You
        can instruct Apache to delegate the handling of all URLs whose
        path portions (the part of the URL that follows the server's
        name and the optional port number) begin with
        <filename>/repos/</filename> to a DAV provider whose
        repository is located at
        <filename>/var/svn/repository</filename> using the
        following <filename>httpd.conf</filename> syntax:</para>
        <screen>
&lt;Location /repos&gt;
  DAV svn
  SVNPath /var/svn/repository
&lt;/Location&gt;
</screen>
        <para>If you plan to support multiple Subversion repositories
        that will reside in the same parent directory on your local
        disk, you can use an alternative directive, the
        <literal>SVNParentPath</literal> directive, to indicate that
        common parent directory.  For example, if you know you will be
        creating multiple Subversion repositories in a directory
        <filename>/var/svn</filename> that would be accessed via
        URLs like <uri>http://my.server.com/svn/repos1</uri>,
        <uri>http://my.server.com/svn/repos2</uri>, and
        so on, you could use the <filename>httpd.conf</filename>
        configuration syntax in the following example:</para>
        <screen>
&lt;Location /svn&gt;
  DAV svn

  # any "/svn/foo" URL will map to a repository /var/svn/foo
  SVNParentPath /var/svn
&lt;/Location&gt;
</screen>
        <para>Using the previous syntax, Apache will delegate the
        handling of all URLs whose path portions begin with
        <filename>/svn/</filename> to the Subversion DAV provider,
        which will then assume that any items in the directory
        specified by the <literal>SVNParentPath</literal> directive
        are actually Subversion repositories.  This is a particularly
        convenient syntax in that, unlike the use of the
        <literal>SVNPath</literal> directive, you don't have to
        restart Apache in order to create and network new
        repositories.</para>
        <para>Be sure that when you define your new
        <literal>Location</literal>, it doesn't overlap with other
        exported Locations.  For example, if your main
        <literal>DocumentRoot</literal> is exported to
        <filename>/www</filename>, do not export a Subversion
        repository in <literal>&lt;Location /www/repos&gt;</literal>.
        If a request comes in for the URI
        <filename>/www/repos/foo.c</filename>, Apache won't know
        whether to look for a file <filename>repos/foo.c</filename> in
        the <literal>DocumentRoot</literal>, or whether to delegate
        <command>mod_dav_svn</command> to return
        <filename>foo.c</filename> from the Subversion repository.
        The result is often an error from the server of the form
        <literal>301 Moved Permanently</literal>.</para>
        <sidebar>
          <info>
            <title>Server Names and the COPY Request</title>
          </info>
          <para>Subversion makes use of the <literal>COPY</literal>
          request type to perform server-side copies of files and
          directories.  As part of the sanity checking done by the
          Apache modules, the source of the copy is expected to be
          located on the same machine as the destination of the copy.
          To satisfy this requirement, you might need to tell mod_dav
          the name you use as the hostname of your server.  Generally,
          you can use the <literal>ServerName</literal> directive in
          <filename>httpd.conf</filename> to accomplish this.</para>
          <screen>
ServerName svn.example.com
</screen>
          <para>If you are using Apache's virtual hosting support via
          the <literal>NameVirtualHost</literal> directive, you may
          need to use the <literal>ServerAlias</literal> directive to
          specify additional names that your server is known by.
          Again, refer to the Apache documentation for full
          details.</para>
        </sidebar>
        <para>At this stage, you should strongly consider the question
        of permissions.  If you've been running Apache for some time
        now as your regular web server, you probably already have a
        collection of content&#x2014;web pages, scripts and such.
        These items have already been configured with a set of
        permissions that allows them to work with Apache, or more
        appropriately, that allows Apache to work with those files.
        Apache, when used as a Subversion server, will also need the
        correct permissions to read and write to your Subversion
        repository.</para>
        <para>You will need to determine a permission system setup that
        satisfies Subversion's requirements without messing up any
        previously existing web page or script installations.  This
        might mean changing the permissions on your Subversion
        repository to match those in use by other things that Apache
        serves for you, or it could mean using the
        <literal>User</literal> and <literal>Group</literal>
        directives in <filename>httpd.conf</filename> to specify that
        Apache should run as the user and group that owns your
        Subversion repository.  There is no single correct way to set
        up your permissions, and each administrator will have
        different reasons for doing things a certain way.  Just be
        aware that permission-related problems are perhaps the most
        common oversight when configuring a Subversion repository for
        use with Apache.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.serverconfig.httpd.authn">
        <info>
          <title>Authentication Options</title>
        </info>
        <para>At this point, if you configured
        <filename>httpd.conf</filename> to contain something like</para>
        <screen>
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn
&lt;/Location&gt;
</screen>
        <para>&#x2026;then your repository is <quote>anonymously</quote>
        accessible to the world.  Until you configure some
        authentication and authorization policies, the Subversion
        repositories you make available via the
        <literal>Location</literal> directive will be generally
        accessible to everyone.  In other words,</para>
        <itemizedlist>
          <listitem>
            <para>anyone can use their Subversion client to check out a
            working copy of a repository URL (or any of its
            subdirectories),</para>
          </listitem>
          <listitem>
            <para>anyone can interactively browse the repository's
            latest revision simply by pointing their web browser to
            the repository URL, and</para>
          </listitem>
          <listitem>
            <para>anyone can commit to the repository.</para>
          </listitem>
        </itemizedlist>
        <para>Of course, you might have already set up
        a <filename>pre-commit</filename> hook script to prevent
        commits (see <xref linkend="svn.reposadmin.create.hooks"/>).
        But as you read on, you'll see that it's also possible use
        Apache's built-in methods to restrict access in specific
        ways.</para>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.serverconfig.httpd.authn.basic">
          <info>
            <title>Basic HTTP Authentication</title>
          </info>
          <para>The easiest way to authenticate a client is via the
          HTTP Basic authentication mechanism, which simply uses a
          username and password to verify that a user is who she says
          she is.  Apache provides an <command>htpasswd</command>
          utility for managing the list of acceptable usernames and
          passwords.  Let's grant commit access to
          Sally and Harry.  First, we need to add them to the password
          file.</para>
          <screen>
$ ### First time: use -c to create the file
$ ### Use -m to use MD5 encryption of the password, which is more secure
$ htpasswd -cm /etc/svn-auth-file harry
New password: *****
Re-type new password: *****
Adding password for user harry
$ htpasswd -m /etc/svn-auth-file sally
New password: *******
Re-type new password: *******
Adding password for user sally
$
</screen>
          <para>Next, you need to add some more
          <filename>httpd.conf</filename> directives inside your
          <literal>Location</literal> block to tell Apache what to do
          with your new password file.  The
          <literal>AuthType</literal> directive specifies the type of
          authentication system to use.  In this case, we want to
          specify the <literal>Basic</literal> authentication system.
          <literal>AuthName</literal> is an arbitrary name that you
          give for the authentication domain.  Most browsers will
          display this name in the pop-up dialog box when the browser
          is querying the user for his name and password.  Finally,
          use the <literal>AuthUserFile</literal> directive to specify
          the location of the password file you created using
          <command>htpasswd</command>.</para>
          <para>After adding these three directives, your
          <literal>&lt;Location&gt;</literal> block should look
          something like this:</para>
          <screen>
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn
  AuthType Basic
  AuthName "Subversion repository"
  AuthUserFile /etc/svn-auth-file
&lt;/Location&gt;
</screen>
          <para>This <literal>&lt;Location&gt;</literal> block is not
          yet complete, and will not do anything useful.  It's merely
          telling Apache that whenever authorization is required,
          Apache should harvest a username and password from the
          Subversion client.  What's missing here, however, are
          directives that tell Apache <emphasis>which</emphasis> sorts
          of client requests require authorization.  Wherever
          authorization is required, Apache will demand
          authentication as well.  The simplest thing to do is protect
          all requests.  Adding <literal>Require valid-user</literal>
          tells Apache that all requests require an authenticated
          user:</para>
          <screen>
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn
  AuthType Basic
  AuthName "Subversion repository"
  AuthUserFile /etc/svn-auth-file
  Require valid-user
&lt;/Location&gt;
</screen>
          <para>Be sure to read the next section (<xref linkend="svn.serverconfig.httpd.authz"/>) for more detail on the
          <literal>Require</literal> directive and other ways to set
          authorization policies.</para>
          <para>One word of warning: HTTP Basic Auth passwords pass in
          very nearly plain-text over the network, and thus are
          extremely insecure.  If you're worried about password
          snooping, it may be best to use some sort of SSL encryption,
          so that clients authenticate via <literal>https://</literal>
          instead of <literal>http://</literal>; at a bare minimum,
          you can configure Apache to use a self-signed server
          certificate.
          <footnote><para>While self-signed server certificates are still
              vulnerable to a <quote>man in the middle</quote> attack,
              such an attack is much more difficult for a casual
              observer to pull off, compared to sniffing unprotected
              passwords.</para></footnote>
          Consult Apache's documentation (and OpenSSL documentation)
          about how to do that.</para>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.serverconfig.httpd.authn.sslcerts">
          <info>
            <title>SSL Certificate Management</title>
          </info>
          <para>Businesses that need to expose their repositories for access
          outside the company firewall should be conscious of the
          possibility that unauthorized parties could be
          <quote>sniffing</quote> their network traffic.  SSL makes
          that kind of unwanted attention less likely to result in
          sensitive data leaks.</para>
          <para>If a Subversion client is compiled to use OpenSSL, then
          it gains the ability to speak to an Apache server via
          <literal>https://</literal> URLs.  The Neon library used by
          the Subversion client is not only able to verify server
          certificates, but can also supply client certificates when
          challenged.  When the client and server have exchanged SSL
          certificates and successfully authenticated one another, all
          further communication is encrypted via a session key.</para>
          <para>It's beyond the scope of this book to describe how to
          generate client and server certificates, and how to
          configure Apache to use them.  Many other books, including
          Apache's own documentation, describe this task.  But what
          <emphasis>can</emphasis> be covered here is how to manage
          server and client certificates from an ordinary Subversion
          client.</para>
          <para>When speaking to Apache via <literal>https://</literal>,
          a Subversion client can receive two different types of
          information:</para>
          <itemizedlist>
            <listitem>
              <para>a server certificate</para>
            </listitem>
            <listitem>
              <para>a demand for a client certificate</para>
            </listitem>
          </itemizedlist>
          <para>If the client receives a server certificate, it needs to
          verify that it trusts the certificate: is the server really
          who it claims to be?  The OpenSSL library does this by
          examining the signer of the server certificate, or
          <firstterm>certifying authority</firstterm> (CA).  If
          OpenSSL is unable to automatically trust the CA, or if some
          other problem occurs (such as an expired certificate or
          hostname mismatch), the Subversion command-line client will
          ask you whether you want to trust the server certificate
          anyway:</para>
          <screen>
$ svn list https://host.example.com/repos/project

Error validating server certificate for 'https://host.example.com:443':
 - The certificate is not issued by a trusted authority. Use the
   fingerprint to validate the certificate manually!
Certificate information:
 - Hostname: host.example.com
 - Valid: from Jan 30 19:23:56 2004 GMT until Jan 30 19:23:56 2006 GMT
 - Issuer: CA, example.com, Sometown, California, US
 - Fingerprint: 7d:e1:a9:34:33:39:ba:6a:e9:a5:c4:22:98:7b:76:5c:92:a0:9c:7b

(R)eject, accept (t)emporarily or accept (p)ermanently?
</screen>
          <para>This dialogue should look familiar; it's essentially the
          same question you've probably seen coming from your web
          browser (which is just another HTTP client like Subversion).
          If you choose the (p)ermanent option, the server certificate
          will be cached in your private run-time
          <filename>auth/</filename> area in just the same way your
          username and password are cached (see <xref linkend="svn.serverconfig.netmodel.credcache"/>).  If cached,
          Subversion will automatically trust this certificate
          in future negotiations.</para>
          <para>Your run-time <filename>servers</filename> file also gives
          you the ability to make your Subversion client automatically
          trust specific CAs, either globally or on a per-host basis.
          Simply set the <literal>ssl-authority-files</literal>
          variable to a semicolon-separated list of PEM-encoded CA
          certificates:</para>
          <screen>
[global]
ssl-authority-files = /path/to/CAcert1.pem;/path/to/CAcert2.pem
</screen>
          <para>Many OpenSSL installations also have a pre-defined set
          of <quote>default</quote> CAs that are nearly universally
          trusted.  To make the Subversion client automatically trust
          these standard authorities, set the
          <literal>ssl-trust-default-ca</literal> variable to
          <literal>true</literal>.</para>
          <para>When talking to Apache, a Subversion client might also
          receive a challenge for a client certificate.  Apache is
          asking the client to identify itself: is the client really
          who it says it is?  If all goes correctly, the Subversion
          client sends back a private certificate signed by a CA that
          Apache trusts.  A client certificate is usually stored on
          disk in encrypted format, protected by a local password.
          When Subversion receives this challenge, it will ask you for
          both a path to the certificate and the password which
          protects it:</para>
          <screen>
$ svn list https://host.example.com/repos/project

Authentication realm: https://host.example.com:443
Client certificate filename: /path/to/my/cert.p12
Passphrase for '/path/to/my/cert.p12':  ********
&#x2026;
</screen>
          <para>Notice that the client certificate is a
          <quote>p12</quote> file.  To use a client certificate with
          Subversion, it must be in PKCS#12 format, which is a
          portable standard.  Most web browsers are already able to
          import and export certificates in that format.   Another
          option is to use the OpenSSL command-line tools to convert
          existing certificates into PKCS#12.</para>
          <para>Again, the runtime <filename>servers</filename> file
          allows you to automate this challenge on a per-host basis.
          Either or both pieces of information can be described in
          runtime variables:</para>
          <screen>
[groups]
examplehost = host.example.com

[examplehost]
ssl-client-cert-file = /path/to/my/cert.p12
ssl-client-cert-password = somepassword
</screen>
          <para>Once you've set the
          <literal>ssl-client-cert-file</literal> and
          <literal>ssl-client-cert-password</literal> variables, the
          Subversion client can automatically respond to a client
          certificate challenge without prompting you.
          <footnote><para>More security-conscious folk might not want to store
              the client certificate password in the runtime
              <filename>servers</filename> file.</para></footnote>
        </para>
        </section>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.serverconfig.httpd.authz">
        <info>
          <title>Authorization Options</title>
        </info>
        <para>At this point, you've configured authentication, but not
        authorization.  Apache is able to challenge clients and
        confirm identities, but it has not been told how to allow or
        restrict access to the clients bearing those identities.  This
        section describes two strategies for controlling access to
        your repositories.</para>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.serverconfig.httpd.authz.blanket">
          <info>
            <title>Blanket Access Control</title>
          </info>
          <para>The simplest form of access control is to authorize
          certain users for either read-only access to a repository,
          or read/write access to a repository.</para>
          <para>You can restrict access on all repository operations by
          adding the <literal>Require valid-user</literal> directive
          to your <literal>&lt;Location&gt;</literal> block.  Using
          our previous example, this would mean that only clients that
          claimed to be either <literal>harry</literal> or
          <literal>sally</literal>, and provided the correct
          password for their respective username, would be allowed to
          do anything with the Subversion repository:</para>
          <screen>
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn

  # how to authenticate a user
  AuthType Basic
  AuthName "Subversion repository"
  AuthUserFile /path/to/users/file

  # only authenticated users may access the repository
  Require valid-user
&lt;/Location&gt;
</screen>
          <para>Sometimes you don't need to run such a tight ship.  For
          example, Subversion's own source code repository at
          <uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://svn.collab.net/repos/svn">http://svn.collab.net/repos/svn</uri> allows anyone
          in the world to perform read-only repository tasks (like
          checking out working copies and browsing the repository with
          a web browser), but restricts all write operations to
          authenticated users.  To do this type of selective
          restriction, you can use the <literal>Limit</literal> and
          <literal>LimitExcept</literal> configuration directives.
          Like the <literal>Location</literal> directive, these blocks
          have starting and ending tags, and you would nest them
          inside your <literal>&lt;Location&gt;</literal>
          block.</para>
          <para>The parameters present on the <literal>Limit</literal>
          and <literal>LimitExcept</literal> directives are HTTP
          request types that are affected by that block.  For example,
          if you wanted to disallow all access to your repository
          except the currently supported read-only operations, you
          would use the <literal>LimitExcept</literal> directive,
          passing the <literal>GET</literal>,
          <literal>PROPFIND</literal>, <literal>OPTIONS</literal>, and
          <literal>REPORT</literal> request type parameters.  Then the
          previously mentioned <literal>Require valid-user</literal>
          directive would be placed inside the
          <literal>&lt;LimitExcept&gt;</literal> block instead of just
          inside the <literal>&lt;Location&gt;</literal> block.</para>
          <screen>
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn

  # how to authenticate a user
  AuthType Basic
  AuthName "Subversion repository"
  AuthUserFile /path/to/users/file

  # For any operations other than these, require an authenticated user.
  &lt;LimitExcept GET PROPFIND OPTIONS REPORT&gt;
    Require valid-user
  &lt;/LimitExcept&gt;
&lt;/Location&gt;
</screen>
          <para>These are only a few simple examples.  For more in-depth
          information about Apache access control and the
          <literal>Require</literal> directive, take a look at the
          <literal>Security</literal> section of the Apache
          documentation's tutorials collection at <uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://httpd.apache.org/docs-2.0/misc/tutorials.html">http://httpd.apache.org/docs-2.0/misc/tutorials.html</uri>.</para>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.serverconfig.httpd.authz.perdir">
          <info>
            <title>Per-Directory Access Control</title>
          </info>
          <para>It's possible to set up finer-grained permissions using
          a second Apache httpd module,
          <command>mod_authz_svn</command>.  This module grabs the
          various opaque URLs passing from client to server, asks
          <command>mod_dav_svn</command> to decode them, and then
          possibly vetoes requests based on access policies defined in
          a configuration file.</para>
          <para>If you've built Subversion from source code,
          <command>mod_authz_svn</command> is automatically built
          and installed alongside <command>mod_dav_svn</command>.
          Many binary distributions install it automatically as well.
          To verify that it's installed correctly, make sure it comes
          right after <command>mod_dav_svn</command>'s
          <literal>LoadModule</literal> directive in
          <filename>httpd.conf</filename>:</para>
          <screen>
LoadModule dav_module         modules/mod_dav.so
LoadModule dav_svn_module     modules/mod_dav_svn.so
LoadModule authz_svn_module   modules/mod_authz_svn.so
</screen>
          <para>To activate this module, you need to configure your
          <literal>Location</literal> block to use the
          <literal>AuthzSVNAccessFile</literal> directive, which
          specifies a file containing the permissions policy for paths
          within your repositories.  (In a moment, we'll discuss the
          format of that file.)</para>
          <para>Apache is flexible, so you have the option to configure
          your block in one of three general patterns.  To begin,
          choose one of these basic configuration patterns.  (The
          examples below are very simple; look at Apache's own
          documentation for much more detail on Apache authentication
          and authorization options.)</para>
          <para>The simplest block is to allow open access to everyone.
          In this scenario, Apache never sends authentication
          challenges, so all users are treated as
          <quote>anonymous</quote>.</para>
          <example xml:id="svn.serverconfig.httpd.authz.perdir.ex-1">
            <info>
              <title>A sample configuration for anonymous access.</title>
            </info>
            <programlisting>
&lt;Location /repos&gt;
  DAV svn
  SVNParentPath /var/svn

  # our access control policy
  AuthzSVNAccessFile /path/to/access/file
&lt;/Location&gt;
          </programlisting>
          </example>
          <para>On the opposite end of the paranoia scale, you can
          configure your block to demand authentication from everyone.
          All clients must supply credentials to identify themselves.
          Your block unconditionally requires authentication via the
          <literal>Require valid-user</literal> directive, and defines
          a means to authenticate.</para>
          <example xml:id="svn.serverconfig.httpd.authz.perdir.ex-2">
            <info>
              <title>A sample configuration for authenticated access.</title>
            </info>
            <programlisting>
&lt;Location /repos&gt;
  DAV svn
  SVNParentPath /var/svn

  # our access control policy
  AuthzSVNAccessFile /path/to/access/file

  # only authenticated users may access the repository
  Require valid-user

  # how to authenticate a user
  AuthType Basic
  AuthName "Subversion repository"
  AuthUserFile /path/to/users/file
&lt;/Location&gt;
          </programlisting>
          </example>
          <para>A third very popular pattern is to allow a combination
          of authenticated and anonymous access.  For example, many
          administrators want to allow anonymous users to read certain
          repository directories, but want only authenticated users to
          read (or write) more sensitive areas.  In this setup, all
          users start out accessing the repository anonymously.  If
          your access control policy demands a real username at any
          point, Apache will demand authentication from the client.
          To do this, you use both the <literal>Satisfy Any</literal>
          and <literal>Require valid-user</literal> directives
          together.</para>
          <example xml:id="svn.serverconfig.httpd.authz.perdir.ex-3">
            <info>
              <title>A sample configuration for mixed
            authenticated/anonymous access.</title>
            </info>
            <programlisting>
&lt;Location /repos&gt;
  DAV svn
  SVNParentPath /var/svn

  # our access control policy
  AuthzSVNAccessFile /path/to/access/file

  # try anonymous access first, resort to real
  # authentication if necessary.
  Satisfy Any
  Require valid-user

  # how to authenticate a user
  AuthType Basic
  AuthName "Subversion repository"
  AuthUserFile /path/to/users/file
&lt;/Location&gt;
          </programlisting>
          </example>
          <para>Once you've settled on one of these three
          basic <filename>httpd.conf</filename> templates, you need to
          create your file containing access rules for particular
          paths within the repository.  This is described in
          <xref linkend="svn.serverconfig.pathbasedauthz"/>.</para>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.serverconfig.httpd.authz.pathauthzoff">
          <info>
            <title>Disabling Path-based Checks</title>
          </info>
          <para>The <command>mod_dav_svn</command> module goes through a
          lot of work to make sure that data you've marked
          <quote>unreadable</quote> doesn't get accidentally leaked.
          This means that it needs to closely monitor all of the paths
          and file-contents returned by commands like <command>svn
          checkout</command> or <command>svn update</command>
          commands.  If these commands encounter a path that isn't
          readable according to some authorization policy, then the
          path is typically omitted altogether.  In the case of
          history or rename tracing&#x2014;e.g. running a command like
          <command>svn cat -r OLD foo.c</command> on a file that was
          renamed long ago&#x2014;the rename tracking will simply halt
          if one of the object's former names is determined to be
          read-restricted.</para>
          <para>All of this path-checking can sometimes be quite
          expensive, especially in the case of <command>svn
          log</command>.  When retrieving a list of revisions, the server
          looks at every changed path in each revision and checks it
          for readability.  If an unreadable path is discovered, then
          it's omitted from the list of the revision's changed paths
          (normally seen with the <option>--verbose</option> option),
          and the whole log message is suppressed.  Needless to say,
          this can be time-consuming on revisions that affect a large
          number of files.  This is the cost of security: even if you
          haven't configured a module like
          <command>mod_authz_svn</command> at all, the
          <command>mod_dav_svn</command> module is still asking Apache
          <command>httpd</command> to run authorization checks on
          every path.  The <command>mod_dav_svn</command> module has
          no idea what authorization modules have been installed, so
          all it can do is ask Apache to invoke whatever might be
          present.</para>
          <para>On the other hand, there's also an escape-hatch of
          sorts, one which allows you to trade security features for
          speed.  If you're not enforcing any sort of per-directory
          authorization (i.e. not using
          <command>mod_authz_svn</command> or similar module), then
          you can disable all of this path-checking.  In your
          <filename>httpd.conf</filename> file, use the
          <literal>SVNPathAuthz</literal> directive:</para>
          <example xml:id="svn.serverconfig.httpd.authz.pathauthzoff.ex-1">
            <info>
              <title>Disabling path checks altogether</title>
            </info>
            <programlisting>
&lt;Location /repos&gt;
  DAV svn
  SVNParentPath /var/svn

  SVNPathAuthz off
&lt;/Location&gt;
          </programlisting>
          </example>
          <para>The <literal>SVNPathAuthz</literal> directive is <quote>on</quote> by
          default.  When set <quote>off</quote>, all path-based
          authorization checking is disabled;
          <command>mod_dav_svn</command> stops invoking authorization
          checks on every path it discovers.</para>
        </section>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.serverconfig.httpd.extra">
        <info>
          <title>Extra Goodies</title>
        </info>
        <para>We've covered most of the authentication and authorization
        options for Apache and mod_dav_svn.  But there are a few other
        nice features that Apache provides.</para>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.serverconfig.httpd.extra.browsing">
          <info>
            <title>Repository Browsing</title>
          </info>
          <para>One of the most useful benefits of an Apache/WebDAV
          configuration for your Subversion repository is that the
          youngest revisions of your versioned files and directories
          are immediately available for viewing via a regular web
          browser.  Since Subversion uses URLs to identify versioned
          resources, those URLs used for HTTP-based repository access
          can be typed directly into a Web browser.  Your browser will
          issue an HTTP <literal>GET</literal> request for that URL, and
          based on whether that URL represents a versioned directory
          or file, mod_dav_svn will respond with a directory listing
          or with file contents.</para>
          <para>Since the URLs do not contain any information about
          which version of the resource you wish to see, mod_dav_svn
          will always answer with the youngest version.  This
          functionality has the wonderful side-effect that you can
          pass around Subversion URLs to your peers as references to
          documents, and those URLs will always point at the latest
          manifestation of that document.  Of course, you can even use
          the URLs as hyperlinks from other web sites, too.</para>
          <sidebar>
            <info>
              <title>Can I view older revisions?</title>
            </info>
            <para>With an ordinary web browser?  In one word: nope.  At
            least, not with <command>mod_dav_svn</command> as your
            only tool.</para>
            <para>Your web browser only speaks ordinary HTTP.  That
            means it only knows how to GET public URLs, which
            represent the latest versions of files and directories.
            According to the WebDAV/DeltaV specification, each server
            defines a private URL syntax for older versions of
            resources, and that syntax is opaque to clients.  To find
            an older version of a file, a client must follow a
            specific procedure to <quote>discover</quote> the proper
            URL; the procedure involves issuing a series of WebDAV
            PROPFIND requests and understanding DeltaV concepts.  This
            is something your web browser simply can't do.</para>
            <para>So to answer the question, one obvious way to see
            older revisions of files and directories is by passing the
            <option>--revision (-r)</option> argument to
            the <command>svn list</command> and <command>svn
            cat</command> commands.  To browse old revisions with your
            web browser, however, you can use third-party software.  A
            good example of this is ViewVC
            (<uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://viewvc.tigris.org/">http://viewvc.tigris.org/</uri>).  ViewVC was
            originally written to display CVS repositories through the
            web,
            <footnote><para>Back then, it was called <quote>ViewCVS</quote>.</para></footnote>
            and the latest releases are able to understand Subversion
            repositories as well.</para>
          </sidebar>
          <section xml:id="svn.serverconfig.httpd.extra.browsing.mimetype">
            <info>
              <title>Proper MIME Type</title>
            </info>
            <para>When browsing a Subversion repository, the web browser
            gets a clue about how to render a file's contents by
            looking at the <literal>Content-Type:</literal> header
            returned in Apache's response to the
            HTTP <literal>GET</literal> request.  The value of this
            header is some sort of MIME type.  By default, Apache will
            tell the web browsers that all repository files are of
            the <quote>default</quote> MIME type,
            typically <literal>text/plain</literal>.  This can be
            frustrating, however, if a user wishes repository files to
            render as something more meaningful&#x2014;for example,
            it might be nice to have a <filename>foo.html</filename> file
            in the repository actually render as HTML when
            browsing.</para>
            <para>To make this happen, you only need to make sure that
            your files have the
            proper <literal>svn:mime-type</literal> set.  This is
            discussed in more detail in
            <xref linkend="svn.advanced.props.special.mime-type"/>,
            and you can even configure your client to automatically
            attach proper <literal>svn:mime-type</literal> properties
            to files entering the repository for the first time;  see
            <xref linkend="svn.advanced.props.auto"/>.</para>
            <para>So in our example, if one were to set
          the <literal>svn:mime-type</literal> property
          to <literal>text/html</literal> on
          file <filename>foo.html</filename>, then Apache would
          properly tell your web browser to render the file as
          HTML.  One could also attach
          proper <literal>image/*</literal> mime-type properties to
          images, and by doing this, ultimately get an entire web
          site to be viewable directly from a repository!  There's
          generally no problem with doing this, as long as the
          website doesn't contain any dynamically-generated
          content.</para>
          </section>
          <section xml:id="svn.serverconfig.httpd.extra.browsing.xslt">
            <info>
              <title>Customizing the Look</title>
            </info>
            <para>You generally will get more use out of URLs to
            versioned files&#x2014;after all, that's where the
            interesting content tends to lie.  But you might have
            occasion to browse a Subversion directory listing, where
            you'll quickly note that the generated HTML used to
            display that listing is very basic, and certainly not
            intended to be aesthetically pleasing (or even
            interesting).  To enable customization of these directory
            displays, Subversion provides an XML index feature.  A
            single <literal>SVNIndexXSLT</literal> directive in your
            repository's <literal>Location</literal> block of
            <filename>httpd.conf</filename> will instruct mod_dav_svn
            to generate XML output when displaying a directory
            listing, and to reference the XSLT stylesheet of your
            choice:</para>
            <screen>
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn
  SVNIndexXSLT "/svnindex.xsl"
  &#x2026;
&lt;/Location&gt;
</screen>
            <para>Using the <literal>SVNIndexXSLT</literal> directive and
           a creative XSLT stylesheet, you can make your directory
           listings match the color schemes and imagery used in other
           parts of your website.  Or, if you'd prefer, you can use
           the sample stylesheets provided in the Subversion source
           distribution's <filename>tools/xslt/</filename> directory.
           Keep in mind that the path provided to the
           <literal>SVNIndexXSLT</literal> directory is actually a URL
           path&#x2014;browsers need to be able to read your
           stylesheets in order to make use of them!</para>
          </section>
          <section xml:id="svn.serverconfig.httpd.extra.browsing.reposlisting">
            <info>
              <title>Listing Repositories</title>
            </info>
            <para>If you're serving a collection of repositories from a
            single URL via the <literal>SVNParentPath</literal>
            directive, then it's also possible to have Apache display
            all available repositories to a web browser.  Just
            activate the <literal>SVNListParentPath</literal>
            directive:</para>
            <screen>
&lt;Location /svn&gt;
  DAV svn
  SVNParentPath /var/svn
  SVNListParentPath on
  &#x2026;
&lt;/Location&gt;
</screen>
            <para>If a user now points her web browser to the
          URL <literal>http://host.example.com/svn/</literal>, she'll
          see list of all Subversion repositories sitting
          in <filename>/var/svn</filename>.  Obviously, this can
          be a security problem, so this feature is turned off by
          default.</para>
          </section>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.serverconfig.httpd.extra.logging">
          <info>
            <title>Apache Logging</title>
          </info>
          <para>Because Apache is an HTTP server at heart, it contains
          fantastically flexible logging features.  It's beyond the
          scope of this book to discuss all ways logging can be
          configured, but we should point out that even the most
          generic <filename>httpd.conf</filename> file will cause
          Apache to produce two logs:
          <filename>error_log</filename>
          and <filename>access_log</filename>.  These logs may appear
          in different places, but are typically created in the
          logging area of your Apache installation.  (On Unix, they
          often live
          in <filename>/usr/local/apache2/logs/</filename>.)</para>
          <para>The <filename>error_log</filename> describes any internal
          errors that Apache runs into as it works.
          The <filename>access_log</filename> file records every
          incoming HTTP request received by Apache.  This makes it
          easy to see, for example, which IP addresses Subversion
          clients are coming from, how often particular clients use
          the server, which users are authenticating properly, and
          which requests succeed or fail.</para>
          <para>Unfortunately, because HTTP is a stateless protocol,
          even the simplest Subversion client operation generates
          multiple network requests.  It's very difficult to look at
          the <filename>access_log</filename> and deduce what the
          client was doing&#x2014;most operations look like a series
          of cryptic <literal>PROPPATCH</literal>, <literal>GET</literal>,
          <literal>PUT</literal>, and <literal>REPORT</literal>
          requests.  To make things worse, many client operations send
          nearly-identical series of requests, so it's even harder to
          tell them apart.</para>
          <para><literal>mod_dav_svn</literal>, however, can come to
          your aid.  By activating an <quote>operational
          logging</quote> feature, you can
          ask <literal>mod_dav_svn</literal> to create a separate log
          file describing what sort of high-level operations your
          clients are performing.</para>
          <para>To do this, you need to make use of
          Apache's <literal>CustomLog</literal> directive (which is
          explained in more detail in Apache's own documentation).
          Be sure to invoke this
          directive <emphasis>outside</emphasis> of your
          Subversion <literal>Location</literal> block:</para>
          <screen>
&lt;Location /svn&gt;
  DAV svn
  &#x2026;
&lt;/Location&gt;

CustomLog logs/svn_logfile "%t %u %{SVN-ACTION}e" env=SVN-ACTION
</screen>
          <para>In this example, we're asking Apache to create a special
          logfile <filename>svn_logfile</filename> in the standard
          Apache <filename>logs</filename> directory.
          The <literal>%t</literal> and <literal>%u</literal>
          variables are replaced by the time and username of the
          request, respectively.  The really important part are the
          two instances of <literal>SVN-ACTION</literal>.
          When Apache sees that variable, it substitutes the value of
          the <literal>SVN-ACTION</literal> environment variable,
          which is automatically set by <literal>mod_dav_svn</literal>
          whenever it detects a high-level client action.</para>
          <para>So instead of having to interpret a
          traditional <filename>access_log</filename> like
          this:</para>
          <screen>
[26/Jan/2007:22:25:29 -0600] "PROPFIND /svn/calc/!svn/vcc/default HTTP/1.1" 207 398
[26/Jan/2007:22:25:29 -0600] "PROPFIND /svn/calc/!svn/bln/59 HTTP/1.1" 207 449
[26/Jan/2007:22:25:29 -0600] "PROPFIND /svn/calc HTTP/1.1" 207 647
[26/Jan/2007:22:25:29 -0600] "REPORT /svn/calc/!svn/vcc/default HTTP/1.1" 200 607
[26/Jan/2007:22:25:31 -0600] "OPTIONS /svn/calc HTTP/1.1" 200 188
[26/Jan/2007:22:25:31 -0600] "MKACTIVITY /svn/calc/!svn/act/e6035ef7-5df0-4ac0-b811-4be7c823f998 HTTP/1.1" 201 227
&#x2026;
</screen>
          <para>&#x2026; you can instead peruse a much more
          intelligible <filename>svn_logfile</filename> like this:</para>
          <screen>
[26/Jan/2007:22:24:20 -0600] - list-dir '/'
[26/Jan/2007:22:24:27 -0600] - update '/'
[26/Jan/2007:22:25:29 -0600] - remote-status '/'
[26/Jan/2007:22:25:31 -0600] sally commit r60
</screen>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.serverconfig.httpd.extra.other">
          <info>
            <title>Other Features</title>
          </info>
          <para>Several of the features already provided by Apache in
          its role as a robust Web server can be leveraged for
          increased functionality or security in Subversion as well.
          Subversion communicates with Apache using Neon, which is a
          generic HTTP/WebDAV library with support for such mechanisms
          as SSL (the Secure Socket Layer, discussed earlier).  If
          your Subversion client is built to support SSL, then it can
          access your Apache server
          using <literal>https://</literal>.</para>
          <para>Equally useful are other features of the Apache and
          Subversion relationship, such as the ability to specify a
          custom port (instead of the default HTTP port 80) or a
          virtual domain name by which the Subversion repository
          should be accessed, or the ability to access the repository
          through an HTTP proxy.  These things are all supported by
          Neon, so Subversion gets that support for free.</para>
          <para>Finally, because <command>mod_dav_svn</command> is
          speaking a subset of the WebDAV/DeltaV protocol, it's
          possible to access the repository via third-party DAV
          clients.  Most modern operating systems (Win32, OS X, and
          Linux) have the built-in ability to mount a DAV server as a
          standard network share.  This is a complicated topic; for
          details, read <xref linkend="svn.webdav"/>.</para>
        </section>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.serverconfig.pathbasedauthz">
      <info>
        <title>Path-Based Authorization</title>
      </info>
      <para>Both Apache and <command>svnserve</command> are capable of
      granting (or denying) permissions to users.  Typically this is
      done over the entire repository: a user can read the repository
      (or not), and she can write to the repository (or not).  It's
      also possible, however, to define finer-grained access rules.
      One set of users may have permission to write to a certain
      directory in the repository, but not others; another directory
      might not even be readable by all but a few special
      people.</para>
      <para>Both servers use a common file format to describe these
      path-based access rules.  In the case of Apache, one needs to
      load the <command>mod_authz_svn</command> module and then add
      the <literal>AuthzSVNAccessFile</literal> directive (within
      the <filename>httpd.conf</filename> file) pointing to your own
      rules-file.  (For a full explanation, see
      <xref linkend="svn.serverconfig.httpd.authz.perdir"/>.)  If
      you're using <command>svnserve</command>, then you need to make
      the <literal>authz-db</literal> variable
      (within <filename>svnserve.conf</filename>) point to your
      rules-file.</para>
      <sidebar>
        <info>
          <title>Do you really need path-based access control?</title>
        </info>
        <para>A lot of administrators setting up Subversion for the
        first time tend to jump into path-based access control without
        giving it a lot of thought.  The administrator usually knows
        which teams of people are working on which projects, so it's
        easy to jump in and grant certain teams access to certain
        directories and not others.  It seems like a natural thing,
        and it appeases the administrator's desire to maintain tight
        control of the repository.</para>
        <para>Note, though, that there are often invisible (and
        visible!) costs associated with this feature.  In the visible
        category, the server needs to do a lot more work to ensure
        that the user has the right to read or write each specific
        path; in certain situations, there's very noticeable
        performance loss.  In the invisible category, consider the
        culture you're creating.  Most of the time, while certain
        users <emphasis>shouldn't</emphasis> be committing changes to
        certain parts of the repository, that social contract doesn't
        need to be technologically enforced.  Teams can sometimes
        spontaneously collaborate with each other; someone may want to
        help someone else out by committing to an area she doesn't
        normally work on.  By preventing this sort of thing at the
        server level, you're setting up barriers to unexpected
        collaboration.  You're also creating a bunch of rules that
        need to be maintained as projects develop, new users are
        added, and so on.  It's a bunch of extra work to
        maintain.</para>
        <para>Remember that this is a version control system!  Even if
        somebody accidentally commits a change to something they
        shouldn't, it's easy to undo the change.  And if a user
        commits to the wrong place with deliberate malice, then it's a
        social problem anyway, and that the problem needs to be dealt
        with outside of Subversion.</para>
        <para>So before you begin restricting users' access rights, ask
        yourself if there's a real, honest need for this, or if it's
        just something that <quote>sounds good</quote> to an
        administrator.  Decide whether it's worth sacrificing some
        server speed for, and remember that there's very little risk
        involved; it's bad to become dependent on technology as a
        crutch for social problems.<footnote><para>A common theme in
        this book!</para></footnote>.</para>
        <para>As an example to ponder, consider that the Subversion
        project itself has always had a notion of who is allowed to
        commit where, but it's always been enforced socially.  This is
        a good model of community trust, especially for open-source
        projects.  Of course, sometimes there <emphasis>are</emphasis>
        truly legitimate needs for path-based access control; within
        corporations, for example, certain types of data really can be
        sensitive, and access needs to be genuinely restricted to
        small groups of people.</para>
      </sidebar>
      <para>Once your server knows where to find your rules-file, it's
      time to define the rules.</para>
      <para>The syntax of the file is the same familiar one used
      by <command>svnserve.conf</command> and the runtime
      configuration files.  Lines that start with a hash
      (<literal>#</literal>) are ignored.  In its simplest form, each
      section names a repository and path within it, and the
      authenticated usernames are the option names within each
      section.  The value of each option describes the user's level of
      access to the repository path: either
      <literal>r</literal> (read-only) or <literal>rw</literal>
      (read-write).  If the user is not mentioned at all, no access is
      allowed.</para>
      <para>To be more specific: the value of the section-names are
      either of the form <literal>[repos-name:path]</literal> or the
      form <literal>[path]</literal>.  If you're using the
      <literal>SVNParentPath</literal> directive, then it's important
      to specify the repository names in your sections.  If you omit
      them, then a section like
      <literal>[/some/dir]</literal> will match the path
      <filename>/some/dir</filename> in <emphasis>every</emphasis>
      repository.  If you're using the <literal>SVNPath</literal>
      directive, however, then it's fine to only define paths in your
      sections&#x2014;after all, there's only one repository.</para>
      <screen>
[calc:/branches/calc/bug-142]
harry = rw
sally = r
</screen>
      <para>In this first example, the user <literal>harry</literal> has
      full read and write access on the
      <filename>/branches/calc/bug-142</filename> directory in the
      <literal>calc</literal> repository, but the user
      <literal>sally</literal> has read-only access.  Any other users
      are blocked from accessing this directory.</para>
      <para>Of course, permissions are inherited from parent to child
      directory.  That means that we can specify a subdirectory with a
      different access policy for Sally:</para>
      <screen>
[calc:/branches/calc/bug-142]
harry = rw
sally = r

# give sally write access only to the 'testing' subdir
[calc:/branches/calc/bug-142/testing]
sally = rw
</screen>
      <para>Now Sally can write to the <filename>testing</filename>
      subdirectory of the branch, but can still only read other parts.
      Harry, meanwhile, continues to have complete read-write access
      to the whole branch.</para>
      <para>It's also possible to explicitly deny permission to someone
      via inheritance rules, by setting the username variable to
      nothing:</para>
      <screen>
[calc:/branches/calc/bug-142]
harry = rw
sally = r

[calc:/branches/calc/bug-142/secret]
harry =
</screen>
      <para>In this example, Harry has read-write access to the
      entire <filename>bug-142</filename> tree, but has absolutely no
      access at all to the <filename>secret</filename> subdirectory
      within it.</para>
      <para>The thing to remember is that the most specific path always
      matches first.  The server tries to match the path itself, and
      then the parent of the path, then the parent of that, and so on.
      The net effect is that mentioning a specific path in the
      accessfile will always override any permissions inherited from
      parent directories.</para>
      <para>By default, nobody has any access to the repository at all.
      That means that if you're starting with an empty file, you'll
      probably want to give at least read permission to all users at
      the root of the repository.  You can do this by using the
      asterisk variable (<literal>*</literal>), which means <quote>all
      users</quote>:</para>
      <screen>
[/]
* = r
</screen>
      <para>This is a common setup; notice that there's no repository
      name mentioned in the section name.  This makes all repositories
      world readable to all users. Once all users have read-access to
      the repositories, you can give explicit
      <literal>rw</literal> permission to certain users on specific
      subdirectories within specific repositories.</para>
      <para>The asterisk variable (<literal>*</literal>) is also worth
      special mention here: it's the
      <emphasis>only</emphasis> pattern which matches an anonymous
      user.  If you've configured your server block to allow a mixture
      of anonymous and authenticated access, all users start out
      accessing anonymously.  The server looks for a
      <literal>*</literal> value defined for the path being accessed;
      if it can't find one, then it demands real authentication from
      the client.</para>
      <para>The access file also allows you to define whole groups of
      users, much like the Unix <filename>/etc/group</filename>
      file:</para>
      <screen>
[groups]
calc-developers = harry, sally, joe
paint-developers = frank, sally, jane
everyone = harry, sally, joe, frank, sally, jane
</screen>
      <para>Groups can be granted access control just like users.
      Distinguish them with an <quote>at</quote>
      (<literal>@</literal>) prefix:</para>
      <screen>
[calc:/projects/calc]
@calc-developers = rw

[paint:/projects/paint]
@paint-developers = rw
jane = r
</screen>
      <para>Groups can also be defined to contain other groups:</para>
      <screen>
[groups]
calc-developers = harry, sally, joe
paint-developers = frank, sally, jane
everyone = @calc-developers, @paint-developers
</screen>
      <!-- TODO(sussman):  this sidebar needs to be changed for svn 1.5,
  making it clear that it's a neon behavior, and ??probably?? not the
  case when using serf... -->
      <sidebar>
        <info>
          <title>Partial Readability and Checkouts</title>
        </info>
        <para>If you're using Apache as your Subversion server and have
      made certain subdirectories of your repository unreadable to
      certain users, then you need to be aware of a possible
      non-optimal behavior with <command>svn
      checkout</command>.</para>
        <para>When the client requests a checkout or update over HTTP, it
      makes a single server request, and receives a single (often
      large) server response.  When the server receives the request,
      that is the <emphasis>only</emphasis> opportunity Apache has to
      demand user authentication.  This has some odd side-effects.
      For example, if a certain subdirectory of the repository is only
      readable by user Sally, and user Harry checks out a parent
      directory, his client will respond to the initial authentication
      challenge as Harry.  As the server generates the large response,
      there's no way it can re-send an authentication challenge when
      it reaches the special subdirectory;  thus the subdirectory is
      skipped altogether, rather than asking the user to
      re-authenticate as Sally at the right moment.  In a similar way,
      if the root of the repository is anonymously world-readable,
      then the entire checkout will be done without
      authentication&#x2014;again, skipping the unreadable directory,
      rather than asking for authentication partway through.</para>
      </sidebar>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.serverconfig.multimethod">
      <info>
        <title>Supporting Multiple Repository Access Methods</title>
      </info>
      <para>You've seen how a repository can be accessed in many
      different ways.  But is it possible&#x2014;or safe&#x2014;for your
      repository to be accessed by multiple methods simultaneously?
      The answer is yes, provided you use a bit of foresight.</para>
      <para>At any given time, these processes may require read and
      write access to your repository:</para>
      <itemizedlist>
        <listitem>
          <para>regular system users using a Subversion client (as
          themselves) to access the repository directly via
          <literal>file://</literal> URLs;</para>
        </listitem>
        <listitem>
          <para>regular system users connecting to SSH-spawned private
          <command>svnserve</command> processes (running as
          themselves) which access the repository;</para>
        </listitem>
        <listitem>
          <para>an <command>svnserve</command> process&#x2014;either a
          daemon or one launched by
          <command>inetd</command>&#x2014;running as a particular fixed
          user;</para>
        </listitem>
        <listitem>
          <para>an Apache <command>httpd</command> process, running as a
          particular fixed user.</para>
        </listitem>
      </itemizedlist>
      <para>The most common problem administrators run into is repository
      ownership and permissions.  Does every process (or user) in the
      previous list have the rights to read and write the Berkeley DB
      files?  Assuming you have a Unix-like operating system, a
      straightforward approach might be to place every potential
      repository user into a new <literal>svn</literal> group, and
      make the repository wholly owned by that group.  But even that's
      not enough, because a process may write to the database files
      using an unfriendly umask&#x2014;one that prevents access by
      other users.</para>
      <para>So the next step beyond setting up a common group for
      repository users is to force every repository-accessing process
      to use a sane umask.  For users accessing the repository
      directly, you can make the <command>svn</command> program into a
      wrapper script that first sets <command>umask 002</command> and
      then runs the real <command>svn</command> client program.  You
      can write a similar wrapper script for the
      <command>svnserve</command> program, and add a <command>umask
      002</command> command to Apache's own startup script,
      <filename>apachectl</filename>.  For example:</para>
      <screen>
$ cat /usr/bin/svn

#!/bin/sh

umask 002
/usr/bin/svn-real "$@"

</screen>
      <para>Another common problem is often encountered on Unix-like
      systems.  As a repository is used, Berkeley DB occasionally
      creates new log files to journal its actions.  Even if the
      repository is wholly owned by the <command>svn</command> group,
      these newly created files won't necessarily be owned by that
      same group, which then creates more permissions problems for
      your users.  A good workaround is to set the group SUID bit on
      the repository's <filename>db</filename> directory. This causes
      all newly-created log files to have the same group owner as the
      parent directory.</para>
      <para>Once you've jumped through these hoops, your repository
      should be accessible by all the necessary processes.  It may
      seem a bit messy and complicated, but the problems of having
      multiple users sharing write-access to common files are classic
      ones that are not often elegantly solved.</para>
      <para>Fortunately, most repository administrators will never
      <emphasis>need</emphasis> to have such a complex configuration.
      Users who wish to access repositories that live on the same
      machine are not limited to using <literal>file://</literal>
      access URLs&#x2014;they can typically contact the Apache HTTP
      server or <command>svnserve</command> using
      <literal>localhost</literal> for the server name in their
      <literal>http://</literal> or <literal>svn://</literal> URLs.
      And to maintain multiple server processes for your Subversion
      repositories is likely to be more of a headache than necessary.
      We recommend you choose the server that best meets your needs
      and stick with it!</para>
      <sidebar>
        <info>
          <title>The svn+ssh:// server checklist</title>
        </info>
        <para>It can be quite tricky to get a bunch of users with
        existing SSH accounts to share a repository without
        permissions problems.  If you're confused about all the things
        that you (as an administrator) need to do on a Unix-like
        system, here's a quick checklist that resummarizes some of
        things discussed in this section:</para>
        <itemizedlist>
          <listitem>
            <para>All of your SSH users need to be able to read and
            write to the repository, so: put all the SSH users into a
            single group. </para>
          </listitem>
          <listitem>
            <para>
            Make the repository wholly owned by that group.
            </para>
          </listitem>
          <listitem>
            <para>Set the group permissions to read/write.</para>
          </listitem>
          <listitem>
            <para>Your users need to use a sane umask when accessing the
            repository, so:  make sure that <command>svnserve</command>
            (<filename>/usr/bin/svnserve</filename>, or wherever
            it lives in <literal>$PATH</literal>) is actually a
            wrapper script which sets <command>umask 002</command> and
            executes the real <command>svnserve</command>
            binary.  </para>
          </listitem>
          <listitem>
            <para>Take similar measures when using
            <command>svnlook</command> and
            <command>svnadmin</command>.  Either run them with a sane
            umask, or wrap them as described above.</para>
          </listitem>
        </itemizedlist>
      </sidebar>
    </section>
  </chapter>
  <!--
local variables:
sgml-parent-document: ("book.xml" "chapter")
end:
-->
  <chapter xml:id="svn.customization">
    <info>
      <title>Customizing Your Subversion Experience</title>
    </info>
    <para>Version control can be a complex subject, as much art as
    science, and offering myriad ways of getting stuff done.
    Throughout this book you've read of the various Subversion
    command-line client subcommands and the options which modify their
    behavior.  In this chapter, we'll look into still more ways to
    customize the way Subversion works for you&#x2014;setting up the
    Subversion runtime configuration, using external helper
    applications, Subversion's interaction with the operating system's
    configured locale, and so on.</para>
    <!-- TODO(cmpilato): Gut the runtime config stuff like I did the
       property stuff, making larger topical sections to which the
       runtime config stuff generally refers.  Like already exists for
       external diff/diff3, add, for example, a section on external
       editors. -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.advanced.confarea">
      <info>
        <title>Runtime Configuration Area</title>
      </info>
      <para>Subversion provides many optional behaviors that can be
      controlled by the user.  Many of these options are of the kind
      that a user would wish to apply to all Subversion operations.
      So, rather than forcing users to remember command-line arguments
      for specifying these options, and to use them for every
      operation they perform, Subversion uses configuration files,
      segregated into a Subversion configuration area.</para>
      <para>The Subversion <firstterm>configuration area</firstterm> is
      a two-tiered hierarchy of option names and their values.
      Usually, this boils down to a special directory that contains
      <firstterm>configuration files</firstterm> (the first tier),
      which are just text files in standard INI format (with
      <quote>sections</quote> providing the second tier).  These files
      can be easily edited using your favorite text editor (such as
      Emacs or vi), and contain directives read by the client to
      determine which of several optional behaviors the user
      prefers.</para>
      <!-- =============================================================== -->
      <section xml:id="svn.advanced.confarea.layout">
        <info>
          <title>Configuration Area Layout</title>
        </info>
        <para>The first time that the <command>svn</command>
        command-line client is executed, it creates a per-user
        configuration area.  On Unix-like systems, this area appears
        as a directory named <filename>.subversion</filename> in the
        user's home directory.  On Win32 systems, Subversion creates a
        folder named <filename>Subversion</filename>, typically inside
        the <filename>Application Data</filename> area of the user's
        profile directory (which, by the way, is usually a hidden
        directory).  However, on this platform the exact location
        differs from system to system, and is dictated by the Windows
        registry.
        <footnote><para>The <literal>APPDATA</literal> environment variable
            points to the <filename>Application Data</filename> area,
            so you can always refer to this folder as
            <filename>%APPDATA%\Subversion</filename>.</para></footnote>
        We will refer to the per-user configuration area using its Unix
        name, <filename>.subversion</filename>.</para>
        <para>In addition to the per-user configuration area, Subversion
        also recognizes the existence of a system-wide configuration
        area.  This gives system administrators the ability to
        establish defaults for all users on a given machine.  Note
        that the system-wide configuration area does not alone dictate
        mandatory policy&#x2014;the settings in the per-user
        configuration area override those in the system-wide one, and
        command-line arguments supplied to the <command>svn</command>
        program have the final word on behavior.  On Unix-like
        platforms, the system-wide configuration area is
        expected to be the <filename>/etc/subversion</filename>
        directory; on Windows machines, it looks for a
        <filename>Subversion</filename> directory inside the common
        <filename>Application Data</filename> location (again, as
        specified by the Windows Registry).  Unlike the per-user
        case, the <command>svn</command> program does not attempt
        to create the system-wide configuration area.</para>
        <para>The per-user configuration area currently contains three
        files&#x2014;two configuration files (<filename>config</filename> and
        <filename>servers</filename>), and a <filename>README.txt</filename> 
        file which describes the INI format.  At the time of their
        creation, the files contain default values for each of the
        supported Subversion options, mostly commented out and grouped
        with textual descriptions about how the values for the key
        affect Subversion's behavior.  To change a certain behavior,
        you need only to load the appropriate configuration file into
        a text editor, and modify the desired option's value.  If at
        any time you wish to have the default configuration settings
        restored, you can simply remove (or rename) your configuration
        directory and then run some innocuous <command>svn</command>
        command, such as <command>svn --version</command>.  A new
        configuration directory with the default contents will be
        created.</para>
        <para>The per-user configuration area also contains a cache of
        authentication data.  The <filename>auth</filename> directory
        holds a set of subdirectories that contain pieces of cached
        information used by Subversion's various supported
        authentication methods.  This directory is created in such a
        way that only the user herself has permission to read its
        contents.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.advanced.confarea.windows-registry">
        <info>
          <title>Configuration and the Windows Registry</title>
        </info>
        <para>In addition to the usual INI-based configuration area,
        Subversion clients running on Windows platforms may also use
        the Windows registry to hold the configuration data.  The
        option names and their values are the same as in the INI
        files.  The <quote>file/section</quote> hierarchy is
        preserved as well, though addressed in a slightly different
        fashion&#x2014;in this schema, files and sections are just
        levels in the registry key tree.</para>
        <para>Subversion looks for system-wide configuration values
        under the
        <literal>HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion</literal>
        key.  For example, the <literal>global-ignores</literal> option,
        which is in the <literal>miscellany</literal> section of the
        <filename>config</filename> file, would be found at
        <literal>HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion\Config\Miscellany\global-ignores</literal>.
        Per-user configuration values should be stored under
        <literal>HKEY_CURRENT_USER\Software\Tigris.org\Subversion</literal>.
      </para>
        <para>Registry-based configuration options are parsed
        <emphasis>before</emphasis> their file-based counterparts, so
        are overridden by values found in the configuration files.  In
        other words, Subversion looks for configuration information in
        the following locations on a Windows system; lower-numbered
        locations take precedence over higher-numbered locations:</para>
        <orderedlist inheritnum="ignore" continuation="restarts">
          <listitem>
            <para>Command-line options</para>
          </listitem>
          <listitem>
            <para>The per-user INI files</para>
          </listitem>
          <listitem>
            <para>The per-user Registry values</para>
          </listitem>
          <listitem>
            <para>The system-wide INI files</para>
          </listitem>
          <listitem>
            <para>The system-wide Registry values</para>
          </listitem>
        </orderedlist>
        <para>Also, the Windows Registry doesn't really support the
        notion of something being <quote>commented out</quote>.
        However, Subversion will ignore any option key whose name
        begins with a hash (<literal>#</literal>) character.  This
        allows you to effectively comment out a Subversion option
        without deleting the entire key from the Registry, obviously
        simplifying the process of restoring that option.</para>
        <para>The <command>svn</command> command-line client never
        attempts to write to the Windows Registry, and will not
        attempt to create a default configuration area there.  You can
        create the keys you need using the <command>REGEDIT</command>
        program.  Alternatively, you can create a
        <filename>.reg</filename> file, and then double-click on that
        file from the Explorer shell, which will cause the data to be
        merged into your registry.</para>
        <example xml:id="svn.advanced.confarea.windows-registry.ex-1">
          <info>
            <title>Sample Registration Entries (.reg) File.</title>
          </info>
          <programlisting>
REGEDIT4

[HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion\Servers\groups]

[HKEY_LOCAL_MACHINE\Software\Tigris.org\Subversion\Servers\global]
"#http-proxy-host"=""
"#http-proxy-port"=""
"#http-proxy-username"=""
"#http-proxy-password"=""
"#http-proxy-exceptions"=""
"#http-timeout"="0"
"#http-compression"="yes"
"#neon-debug-mask"=""
"#ssl-authority-files"=""
"#ssl-trust-default-ca"=""
"#ssl-client-cert-file"=""
"#ssl-client-cert-password"=""

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\auth]
"#store-passwords"="yes"
"#store-auth-creds"="yes"

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\helpers]
"#editor-cmd"="notepad"
"#diff-cmd"=""
"#diff3-cmd"=""
"#diff3-has-program-arg"=""

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\tunnels]

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\miscellany]
"#global-ignores"="*.o *.lo *.la #*# .*.rej *.rej .*~ *~ .#* .DS_Store"
"#log-encoding"=""
"#use-commit-times"=""
"#no-unlock"=""
"#enable-auto-props"=""

[HKEY_CURRENT_USER\Software\Tigris.org\Subversion\Config\auto-props]

</programlisting>
        </example>
        <para>The previous example shows the contents of a
        <filename>.reg</filename> file which contains some of the most
        commonly used configuration options and their default values.
        Note the presence of both system-wide (for network
        proxy-related options) and per-user settings (editor programs
        and password storage, among others).  Also note that all the
        options are effectively commented out.  You need only to
        remove the hash (<literal>#</literal>) character from the
        beginning of the option names, and set the values as you
        desire.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.advanced.confarea.opts">
        <info>
          <title>Configuration Options</title>
        </info>
        <!-- TODO(cmpilato): Rework and move this section to the Reference -->
        <para>In this section, we will discuss the specific
        run-time configuration options that are currently supported
        by Subversion.</para>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.advanced.confarea.opts.servers">
          <info>
            <title>Servers</title>
          </info>
          <para>The <filename>servers</filename> file contains
          Subversion configuration options related to the network
          layers.  There are two special section names in this
          file&#x2014;<literal>groups</literal> and
          <literal>global</literal>.  The <literal>groups</literal>
          section is essentially a cross-reference table.  The keys in
          this section are the names of other sections in the file;
          their values are <firstterm>globs</firstterm>&#x2014;textual
          tokens which possibly contain wildcard
          characters&#x2014;that are compared against the hostnames of
          the machine to which Subversion requests are sent.</para>
          <programlisting>
[groups]
beanie-babies = *.red-bean.com
collabnet = svn.collab.net

[beanie-babies]
&#x2026;

[collabnet]
&#x2026;
</programlisting>
          <para>When Subversion is used over a network, it attempts to
          match the name of the server it is trying to reach with a
          group name under the <literal>groups</literal> section.  If
          a match is made, Subversion then looks for a section in the
          <filename>servers</filename> file whose name is the matched
          group's name.  From that section it reads the actual network
          configuration settings.</para>
          <para>The <literal>global</literal> section contains the
          settings that are meant for all of the servers not matched
          by one of the globs under the <literal>groups</literal>
          section.  The options available in this section are
          exactly the same as those valid for the other server
          sections in the file (except, of course, the special
          <literal>groups</literal> section), and are as
          follows:</para>
          <variablelist>
            <varlistentry>
              <term>
                <literal>http-proxy-exceptions</literal>
              </term>
              <listitem>
                <para>This specifies a comma-separated list of patterns
                for repository hostnames that should accessed
                directly, without using the proxy machine.  The
                pattern syntax is the same as is used in the Unix
                shell for filenames.  A repository hostname matching
                any of these patterns will not be proxied.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <literal>http-proxy-host</literal>
              </term>
              <listitem>
                <para>This specifies the hostname of the proxy computer
                through which your HTTP-based Subversion requests must
                pass.  It defaults to an empty value, which means that
                Subversion will not attempt to route HTTP requests
                through a proxy computer, and will instead attempt to
                contact the destination machine directly.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <literal>http-proxy-port</literal>
              </term>
              <listitem>
                <para>This specifies the port number on the proxy host
                to use.  It defaults to an empty value.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <literal>http-proxy-username</literal>
              </term>
              <listitem>
                <para>This specifies the username to supply to the proxy
                machine.  It defaults to an empty value.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <literal>http-proxy-password</literal>
              </term>
              <listitem>
                <para>This specifies the password to supply to the proxy
                machine.  It defaults to an empty value.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <literal>http-timeout</literal>
              </term>
              <listitem>
                <para>This specifies the amount of time, in seconds, to
                wait for a server response.  If you experience
                problems with a slow network connection causing
                Subversion operations to time out, you should increase
                the value of this option.  The default value is
                <literal>0</literal>, which instructs the underlying
                HTTP library, Neon, to use its default timeout
                setting.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <literal>http-compression</literal>
              </term>
              <listitem>
                <para>This specifies whether or not Subversion should
                attempt to compress network requests made to DAV-ready
                servers.  The default value is <literal>yes</literal>
                (though compression will only occur if that capability
                is compiled into the network layer).  Set this to
                <literal>no</literal> to disable compression, such as
                when debugging network transmissions.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <literal>neon-debug-mask</literal>
              </term>
              <listitem>
                <para>This is an integer mask that the underlying HTTP
                library, Neon, uses for choosing what type of
                debugging output to yield.  The default value is
                <literal>0</literal>, which will silence all debugging
                output.  For more information about how Subversion
                makes use of Neon, see <xref linkend="svn.developer"/>.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <literal>ssl-authority-files</literal>
              </term>
              <listitem>
                <para>This is a semicolon-delimited list of paths to files
                containing certificates of the certificate authorities
                (or CAs) that
                are accepted by the Subversion client when accessing the
                repository over HTTPS.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <literal>ssl-trust-default-ca</literal>
              </term>
              <listitem>
                <para>Set this variable to <literal>yes</literal> if you
                want Subversion to automatically trust the set of
                default CAs that ship with OpenSSL.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <literal>ssl-client-cert-file</literal>
              </term>
              <listitem>
                <para>If a host (or set of hosts) requires an SSL client
                certificate, you'll normally be prompted for a path to
                your certificate.  By setting this variable to that
                same path, Subversion will be able to find your client
                certificate automatically without prompting you.
                There's no standard place to store your certificate on
                disk; Subversion will grab it from any path you
                specify.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <literal>ssl-client-cert-password</literal>
              </term>
              <listitem>
                <para>If your SSL client certificate file is encrypted
                by a passphrase, Subversion will prompt you for the
                passphrase whenever the certificate is used.  If you
                find this annoying (and don't mind storing the
                password in the <filename>servers</filename> file),
                then you can set this variable to the certificate's
                passphrase.  You won't be prompted anymore.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.advanced.confarea.opts.config">
          <info>
            <title>Config</title>
          </info>
          <para>The <filename>config</filename> file contains the rest
          of the currently available Subversion run-time options,
          those not related to networking.  There are only a few
          options in use as of this writing, but they are again grouped into
          sections in expectation of future additions.</para>
          <para>The <literal>auth</literal> section contains settings
          related to Subversion's authentication and authorization
          against the repository.  It contains:</para>
          <variablelist>
            <varlistentry>
              <term>
                <literal>store-passwords</literal>
              </term>
              <listitem>
                <para>This instructs Subversion to cache, or not to
                cache, passwords that are supplied by the user in
                response to server authentication challenges.  The
                default value is <literal>yes</literal>.  Set this to
                <literal>no</literal> to disable this on-disk password
                caching.  You can override this option for a single
                instance of the <command>svn</command> command using
                the <option>--no-auth-cache</option> command-line
                parameter (for those subcommands that support it).
                For more information, see <xref linkend="svn.serverconfig.netmodel.credcache"/>.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <literal>store-auth-creds</literal>
              </term>
              <listitem>
                <para>This setting is the same as
                <literal>store-passwords</literal>, except that it
                enables or disables disk-caching of
                <emphasis>all</emphasis> authentication information:
                usernames, passwords, server certificates, and any
                other types of cacheable credentials.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <para>The <literal>helpers</literal> section controls which
          external applications Subversion uses to accomplish its
          tasks.  Valid options in this section are:</para>
          <variablelist>
            <varlistentry>
              <term>
                <literal>editor-cmd</literal>
              </term>
              <listitem>
                <para>This specifies the program Subversion will use to
                query the user for a log message during a commit
                operation, such as when using <command>svn
                commit</command> without either the
                <option>--message</option> (<option>-m</option>) or
                <option>--file</option> (<option>-F</option>) options.
                This program is also used with the <command>svn
                propedit</command> command&#x2014;a temporary file is
                populated with the current value of the property the
                user wishes to edit, and the edits take place right
                in the editor program (see <xref linkend="svn.advanced.props"/>).  This option's default
                value is empty.  The order of priority for determining the
                editor command (where lower-numbered locations take 
                precedence over higher-numbered locations) is:</para>
                <orderedlist inheritnum="ignore" continuation="restarts">
                  <listitem>
                    <para>Command-line option <literal>--editor-cmd</literal></para>
                  </listitem>
                  <listitem>
                    <para>Environment variable <literal>SVN_EDITOR</literal></para>
                  </listitem>
                  <listitem>
                    <para>Configuration option <literal>editor-cmd</literal></para>
                  </listitem>
                  <listitem>
                    <para>Environment variable <literal>VISUAL</literal></para>
                  </listitem>
                  <listitem>
                    <para>Environment variable <literal>EDITOR</literal></para>
                  </listitem>
                  <listitem>
                    <para>Possibly, a default value built in to Subversion
                    (not present in the official builds)</para>
                  </listitem>
                </orderedlist>
                <para>The value of any of these options or variables is
                (unlike <literal>diff-cmd</literal>) the beginning of a
                command line to be executed by the shell.  Subversion
                appends a space and the pathname of the temporary file to be
                edited.  The editor should modify the temporary file and
                return a zero exit code to indicate success.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <literal>diff-cmd</literal>
              </term>
              <listitem>
                <para>This specifies the absolute path of a differencing
                program, used when Subversion generates
                <quote>diff</quote> output (such as when using the
                <command>svn diff</command> command).  By default
                Subversion uses an internal differencing
                library&#x2014;setting this option will cause it to
                perform this task using an external program.  See
                <xref linkend="svn.advanced.externaldifftools"/> for
                more details on using such programs.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <literal>diff3-cmd</literal>
              </term>
              <listitem>
                <para>This specifies the absolute path of a three-way
                differencing program.  Subversion uses this program to
                merge changes made by the user with those received
                from the repository.  By default Subversion uses an
                internal differencing library&#x2014;setting this
                option will cause it to perform this task using an
                external program.  See <xref linkend="svn.advanced.externaldifftools"/> for more
                details on using such programs.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <literal>diff3-has-program-arg</literal>
              </term>
              <listitem>
                <para>This flag should be set to <literal>true</literal>
                if the program specified by the
                <literal>diff3-cmd</literal> option accepts a
                <option>--diff-program</option> command-line
                parameter.</para>
              </listitem>
            </varlistentry>
          </variablelist>
          <para>The <literal>tunnels</literal> section allows you to
          define new tunnel schemes for use with
          <command>svnserve</command> and <literal>svn://</literal>
          client connections.  For more details, see <xref linkend="svn.serverconfig.svnserve.sshauth"/>.</para>
          <para>The <literal>miscellany</literal> section is where
          everything that doesn't belong elsewhere winds up.
          <footnote><para>Anyone for potluck dinner?</para></footnote>
          In this section, you can find:</para>
          <variablelist>
            <varlistentry>
              <term>
                <literal>global-ignores</literal>
              </term>
              <listitem>
                <para>When running the <command>svn status</command>
                command, Subversion lists unversioned files and
                directories along with the versioned ones, annotating
                them with a <literal>?</literal> character (see <xref linkend="svn.tour.cycle.examine.status"/>).  Sometimes, it can
                be annoying to see uninteresting, unversioned
                items&#x2014;for example, object files that result from
                a program's compilation&#x2014;in this display.  The
                <literal>global-ignores</literal> option is a list of
                whitespace-delimited globs which describe the names of
                files and directories that Subversion should not
                display unless they are versioned.  The default value
                is <literal>*.o *.lo *.la #*# .*.rej *.rej .*~ *~
                .#* .DS_Store</literal>.</para>
                <para>As well as <command>svn status</command>, the
                <command>svn add</command> and <command>svn import</command>
                commands also ignore files that match the list
                when they are scanning a directory.  You can override this
                behaviour for a single instance of any of these commands
                by explicitly specifying the file name, or by using
                the <option>--no-ignore</option> command-line flag.</para>
                <para>For information on more fine-grained control of
                ignored items, see <xref linkend="svn.advanced.props.special.ignore"/>.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <literal>enable-auto-props</literal>
              </term>
              <listitem>
                <para>This instructs Subversion to automatically set
                properties on newly added or imported files.  The
                default value is <literal>no</literal>, so set this to
                <literal>yes</literal> to enable Auto-props.
                The <literal>auto-props</literal> section of this file
                specifies which properties are to be set on which files.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <literal>log-encoding</literal>
              </term>
              <listitem>
                <para>This variable sets the default character set
                encoding for commit log messages.  It's a permanent
                form of the <option>--encoding</option> option (see
                <xref linkend="svn.ref.svn.sw"/>).  The Subversion
                repository stores log messages in UTF-8, and assumes
                that your log message is written using your operating
                system's native locale.  You should specify a
                different encoding if your commit messages are written
                in any other encoding.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <literal>use-commit-times</literal>
              </term>
              <listitem>
                <para>Normally your working copy files have timestamps
                that reflect the last time they were touched by any
                process, whether that be your own editor or by some
                <command>svn</command> subcommand.  This is generally
                convenient for people developing software, because
                build systems often look at timestamps as a way of
                deciding which files need to be recompiled.</para>
                <para>In other situations, however, it's sometimes nice
                for the working copy files to have timestamps that
                reflect the last time they were changed in the
                repository.  The <command>svn export</command> command
                always places these <quote>last-commit
                timestamps</quote> on trees that it produces.  By
                setting this config variable to
                <literal>yes</literal>, the <command>svn
                checkout</command>, <command>svn update</command>,
                <command>svn switch</command>, and <command>svn
                revert</command> commands will also set last-commit
                timestamps on files that they touch.</para>
              </listitem>
            </varlistentry>
            <!-- ###TODO add description of other options shown in example
          registry file, e.g., template-root -->
          </variablelist>
          <para>The <literal>auto-props</literal> section controls
          the Subversion client's ability to automatically set
          properties on files when they are added or imported.
          It contains any number of key-value pairs in the
          format <literal>PATTERN = PROPNAME=PROPVALUE</literal>
          where <literal>PATTERN</literal> is a file pattern
          that matches a set of filenames and the rest of the
          line is the property and its value.  Multiple matches
          on a file will result in multiple propsets for that
          file; however, there is no guarantee that auto-props
          will be applied in the order in which they are listed
          in the config file, so you can't have one rule
          <quote>override</quote> another.  You can find several
          examples of auto-props usage in the
          <filename>config</filename> file.  Lastly, don't
          forget to set <literal>enable-auto-props</literal> to
          <literal>yes</literal> in the <literal>miscellany</literal>
          section if you want to enable auto-props.</para>
        </section>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.advanced.l10n">
      <info>
        <title>Localization</title>
      </info>
      <para><firstterm>Localization</firstterm> is the act of making
      programs behave in a region-specific way.  When a program
      formats numbers or dates in a way specific to your part of the
      world, or prints messages (or accepts input) in your native
      language, the program is said to
      be <firstterm>localized</firstterm>.  This section describes
      steps Subversion has made towards localization.</para>
      <!-- =============================================================== -->
      <section xml:id="svn.advanced.l10n.understanding">
        <info>
          <title>Understanding locales</title>
        </info>
        <para>Most modern operating systems have a notion of the
        <quote>current locale</quote>&#x2014;that is, the region or
        country whose localization conventions are honored.  These
        conventions&#x2014;typically chosen by some runtime
        configuration mechanism on the computer&#x2014;affect the way
        in which programs present data to the user, as well as the way
        in which they accept user input.</para>
        <para>On most Unix-like systems, you can check the values of the
        locale-related runtime configuration options by running the
        <command>locale</command> command:</para>
        <screen>
$ locale
LANG=
LC_COLLATE="C"
LC_CTYPE="C"
LC_MESSAGES="C"
LC_MONETARY="C"
LC_NUMERIC="C"
LC_TIME="C"
LC_ALL="C"
</screen>
        <para>The output is a list of locale-related environment
        variables and their current values.  In this example, the
        variables are all set to the default <literal>C</literal>
        locale, but users can set these variables to specific
        country/language code combinations.  For example, if one were
        to set the <literal>LC_TIME</literal> variable to
        <literal>fr_CA</literal>, then programs would know to present
        time and date information formatted according a
        French-speaking Canadian's expectations.  And if one were to
        set the <literal>LC_MESSAGES</literal> variable to
        <literal>zh_TW</literal>, then programs would know to present
        human-readable messages in Traditional Chinese.  Setting the
        <literal>LC_ALL</literal> variable has the effect of changing
        every locale variable to the same value.  The value of
        <literal>LANG</literal> is used as a default value for any
        locale variable that is unset.  To see the list of available
        locales on a Unix system, run the command <command>locale
        -a</command>.</para>
        <para>On Windows, locale configuration is done via the
        <quote>Regional and Language Options</quote> control panel
        item.  There you can view and select the values of individual
        settings from the available locales, and even customize (at a
        sickening level of detail) several of the display formatting
        conventions.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.advanced.l10n.svnuse">
        <info>
          <title>Subversion's use of locales</title>
        </info>
        <para>The Subversion client, <command>svn</command>, honors the
        current locale configuration in two ways.  First, it notices
        the value of the <literal>LC_MESSAGES</literal> variable and
        attempts to print all messages in the specified language.  For
        example:</para>
        <screen>
$ export LC_MESSAGES=de_DE
$ svn help cat
cat: Gibt den Inhalt der angegebenen Dateien oder URLs aus.
Aufruf: cat ZIEL[@REV]...
&#x2026;
</screen>
        <para>This behavior works identically on both Unix and Windows
        systems.  Note, though, that while your operating system might
        have support for a certain locale, the Subversion client still
        may not be able to speak the particular language.  In order to
        produce localized messages, human volunteers must provide
        translations for each language.  The translations are written
        using the GNU gettext package, which results in translation
        modules that end with the <filename>.mo</filename> filename
        extension.  For example, the German translation file is named
        <filename>de.mo</filename>.  These translation files are
        installed somewhere on your system.  On Unix, they typically
        live in <filename>/usr/share/locale/</filename>, while
        on Windows they're often found in the
        <filename>\share\locale\</filename> folder in Subversion's
        installation area.  Once installed, a module is named after
        the program it provides translations for.  For example, the
        <filename>de.mo</filename> file may ultimately end up
        installed as
        <filename>/usr/share/locale/de/LC_MESSAGES/subversion.mo</filename>.
        By browsing the installed <filename>.mo</filename> files, you
        can see which languages the Subversion client is able to
        speak.</para>
        <para>The second way in which the locale is honored involves how
        <command>svn</command> interprets your input.  The repository
        stores all paths, filenames, and log messages in Unicode,
        encoded as UTF-8.  In that sense, the repository is
        <firstterm>internationalized</firstterm>&#x2014;that is, the
        repository is ready to accept input in any human language.
        This means, however, that the Subversion client is responsible
        for sending only UTF-8 filenames and log messages into the
        repository.  In order to do this, it must convert the data
        from the native locale into UTF-8.</para>
        <para>For example, suppose you create a file named
        <filename>caff&#xE8;.txt</filename>, and then when committing the
        file, you write the log message as <quote>Adesso il caff&#xE8; &#xE8;
        pi&#xF9; forte</quote>.  Both the filename and log message contain
        non-ASCII characters, but because your locale is set to
        <literal>it_IT</literal>, the Subversion client knows to
        interpret them as Italian.  It uses an Italian character set
        to convert the data to UTF-8 before sending them off to the
        repository.</para>
        <para>Note that while the repository demands UTF-8 filenames and
        log messages, it <emphasis>does not</emphasis> pay attention
        to file contents.  Subversion treats file contents as opaque
        strings of bytes, and neither client nor server makes an
        attempt to understand the character set or encoding of the
        contents.</para>
        <sidebar>
          <info>
            <title>Character set conversion errors</title>
          </info>
          <para>While using Subversion, you might get hit with an error
          related to character set conversions:</para>
          <screen>
svn: Can't convert string from native encoding to 'UTF-8':
&#x2026;
svn: Can't convert string from 'UTF-8' to native encoding:
&#x2026;
</screen>
          <para>Errors like this typically occur when the Subversion
          client has received a UTF-8 string from the repository, but
          not all of the characters in that string can be represented
          using the encoding of the current locale.  For example, if
          your locale is <literal>en_US</literal> but a collaborator
          has committed a Japanese filename, you're likely to see this
          error when you receive the file during an <command>svn
          update</command>.</para>
          <para>The solution is either to set your locale to something
          which <emphasis>can</emphasis> represent the incoming UTF-8
          data, or to change the filename or log message in the
          repository.  (And don't forget to slap your collaborator's
          hand&#x2014;projects should decide on common languages ahead of
          time, so that all participants are using the same
          locale.)</para>
        </sidebar>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.advanced.externaldifftools">
      <info>
        <title>Using External Differencing Tools</title>
      </info>
      <para>The presence of <option>--diff-cmd</option> and
      <option>--diff3-cmd</option> options, and similarly named
      runtime configuration parameters (see <xref linkend="svn.advanced.confarea.opts.config"/>), can lead to a
      false notion of how easy it is to use external differencing (or
      <quote>diff</quote>) and merge tools with Subversion.  While
      Subversion can use most of popular such tools available, the
      effort invested in setting this up often turns out to be
      non-trivial.</para>
      <para>The interface between Subversion and external diff and merge
      tools harkens back to a time when Subversion's only contextual
      differencing capabilities were built around invocations of the
      GNU diffutils toolchain, specifically the
      <command>diff</command> and <command>diff3</command> utilities.
      To get the kind of behavior Subversion needed, it called these
      utilities with more than a handful of options and parameters,
      most of which were quite specific to the utilities.  Some time
      later, Subversion grew its own internal differencing library,
      and as a failover mechanism,
      <footnote><para>Subversion developers are good, but even the best make
          mistakes.</para></footnote>
      the <option>--diff-cmd</option> and <option>--diff3-cmd</option>
      options were added to the Subversion command-line client so
      users could more easily indicate that they preferred to use the
      GNU diff and diff3 utilities instead of the newfangled internal
      diff library.  If those options were used, Subversion would
      simply ignore the internal diff library, and fall back to
      running those external programs, lengthy argument lists and all.
      And that's where things remain today.</para>
      <para>It didn't take long for folks to realize that having such
      easy configuration mechanisms for specifying that Subversion
      should use the external GNU diff and diff3 utilities located at
      a particular place on the system could be applied toward the use
      of other diff and merge tools, too.  After all, Subversion
      didn't actually verify that the things it was being told to run
      were members of the GNU diffutils toolchain.  But the only
      configurable aspect of using those external tools is their
      location on the system&#x2014;not the option set, parameter
      order, etc.  Subversion continues throwing all those GNU utility
      options at your external diff tool regardless of whether or not
      that program can understand those options.  And that's where
      things get unintuitive for most users.</para>
      <para>The key to using external diff and merge tools (other than
      GNU diff and diff3, of course) with Subversion is to use wrapper
      scripts which convert the input from Subversion into something
      that your differencing tool can understand, and then to convert
      the output of your tool back into a format which Subversion
      expects&#x2014;the format that the GNU tools would have used.
      The following sections cover the specifics of those
      expectations.</para>
      <note>
        <para>The decision on when to fire off a contextual diff or
        merge as part of a larger Subversion operation is made
        entirely by Subversion, and is affected by, among other
        things, whether or not the files being operated on are
        human-readable as determined by their
        <literal>svn:mime-type</literal> property.  This means, for
        example, that even if you had the niftiest Microsoft
        Word-aware differencing or merging tool in the Universe, it
        would never be invoked by Subversion so long as your versioned
        Word documents had a configured MIME type that denoted that
        they were not human-readable (such as
        <literal>application/msword</literal>).  For more about MIME
        type settings, see <xref linkend="svn.advanced.props.special.mime-type"/></para>
      </note>
      <!-- =============================================================== -->
      <section xml:id="svn.advanced.externaldifftools.diff">
        <info>
          <title>External diff</title>
        </info>
        <para>Subversion calls external diff programs with parameters
        suitable for the GNU diff utility, and expects only that the
        external program return with a successful error code.  For
        most alternative diff programs, only the sixth and seventh
        arguments&#x2014;the paths of the files which represent the left and
        right sides of the diff, respectively&#x2014;are of interest.  Note
        that Subversion runs the diff program once per modified file
        covered by the Subversion operation, so if your program runs
        in an asynchronous fashion (or <quote>backgrounded</quote>),
        you might have several instances of it all running
        simultaneously.  Finally, Subversion expects that your program
        return an error code of 1 if your program detected differences,
        or 0 if it did not&#x2014;any other error code is considered a
        fatal error.
        <footnote><para>The GNU diff manual page puts it this way: <quote>An
            exit status of 0 means no differences were found, 1 means some
            differences were found, and 2 means trouble.</quote></para></footnote>
      </para>
        <para><xref linkend="svn.advanced.externaldifftools.diff.ex-1"/>
        and <xref linkend="svn.advanced.externaldifftools.diff.ex-2"/>
        are templates for external diff tool wrappers in the Bourne
        shell and Windows batch scripting languages,
        respectively.</para>
        <example xml:id="svn.advanced.externaldifftools.diff.ex-1">
          <info>
            <title>diffwrap.sh</title>
          </info>
          <programlisting>
#!/bin/sh

# Configure your favorite diff program here.
DIFF="/usr/local/bin/my-diff-tool"

# Subversion provides the paths we need as the sixth and seventh 
# parameters.
LEFT=${6}
RIGHT=${7}

# Call the diff command (change the following line to make sense for
# your merge program).
$DIFF --left $LEFT --right $RIGHT

# Return an errorcode of 0 if no differences were detected, 1 if some were.
# Any other errorcode will be treated as fatal.
</programlisting>
        </example>
        <example xml:id="svn.advanced.externaldifftools.diff.ex-2">
          <info>
            <title>diffwrap.bat</title>
          </info>
          <programlisting>
@ECHO OFF

REM Configure your favorite diff program here.
SET DIFF="C:\Program Files\Funky Stuff\My Diff Tool.exe"

REM Subversion provides the paths we need as the sixth and seventh 
REM parameters.
SET LEFT=%6
SET RIGHT=%7

REM Call the diff command (change the following line to make sense for
REM your merge program).
%DIFF% --left %LEFT% --right %RIGHT%

REM Return an errorcode of 0 if no differences were detected, 1 if some were.
REM Any other errorcode will be treated as fatal.
</programlisting>
        </example>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.advanced.externaldifftools.diff3">
        <info>
          <title>External diff3</title>
        </info>
        <para>Subversion calls external merge programs with parameters
        suitable for the GNU diff3 utility, expecting that the
        external program return with a successful error code and that
        the full file contents which result from the completed merge
        operation are printed on the standard output stream (so that
        Subversion can redirect them into the appropriate version
        controlled file).  For most alternative merge programs, only
        the ninth, tenth, and eleventh arguments, the paths of the
        files which represent the <quote>mine</quote>,
        <quote>older</quote>, and <quote>yours</quote> inputs,
        respectively, are of interest.  Note that because Subversion
        depends on the output of your merge program, you wrapper
        script must not exit before that output has been delivered to
        Subversion.  When it finally does exit, it should return an
        error code of 0 if the merge was successful, or 1 if unresolved
        conflicts remain in the output&#x2014;any other error code is
        considered a fatal error.</para>
        <para><xref linkend="svn.advanced.externaldifftools.diff3.ex-1"/> 
        and <xref linkend="svn.advanced.externaldifftools.diff3.ex-2"/> are
        templates for external merge tool wrappers in the Bourne shell
        and Windows batch scripting languages, respectively.</para>
        <example xml:id="svn.advanced.externaldifftools.diff3.ex-1">
          <info>
            <title>diff3wrap.sh</title>
          </info>
          <programlisting>
#!/bin/sh

# Configure your favorite diff3/merge program here.
DIFF3="/usr/local/bin/my-merge-tool"

# Subversion provides the paths we need as the ninth, tenth, and eleventh 
# parameters.
MINE=${9}
OLDER=${10}
YOURS=${11}

# Call the merge command (change the following line to make sense for
# your merge program).
$DIFF3 --older $OLDER --mine $MINE --yours $YOURS

# After performing the merge, this script needs to print the contents
# of the merged file to stdout.  Do that in whatever way you see fit.
# Return an errorcode of 0 on successful merge, 1 if unresolved conflicts
# remain in the result.  Any other errorcode will be treated as fatal.
</programlisting>
        </example>
        <example xml:id="svn.advanced.externaldifftools.diff3.ex-2">
          <info>
            <title>diff3wrap.bat</title>
          </info>
          <programlisting>
@ECHO OFF

REM Configure your favorite diff3/merge program here.
SET DIFF3="C:\Program Files\Funky Stuff\My Merge Tool.exe"

REM Subversion provides the paths we need as the ninth, tenth, and eleventh 
REM parameters.  But we only have access to nine parameters at a time, so we
REM shift our nine-parameter window twice to let us get to what we need.
SHIFT
SHIFT
SET MINE=%7
SET OLDER=%8
SET YOURS=%9

REM Call the merge command (change the following line to make sense for
REM your merge program).
%DIFF3% --older %OLDER% --mine %MINE% --yours %YOURS%

REM After performing the merge, this script needs to print the contents
REM of the merged file to stdout.  Do that in whatever way you see fit.
REM Return an errorcode of 0 on successful merge, 1 if unresolved conflicts
REM remain in the result.  Any other errorcode will be treated as fatal.
</programlisting>
        </example>
      </section>
    </section>
  </chapter>
  <!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
  <chapter xml:id="svn.developer">
    <info>
      <title>Embedding Subversion</title>
    </info>
    <para>Subversion has a modular design: it's implemented as a
    collection of libraries written in C.  Each library has a
    well-defined purpose and Application Programming Interface (API),
    and that interface is available not only for Subversion itself to
    use, but for any software that wishes to embed or otherwise
    programmatically control Subversion.  Additionally, Subversion's
    API is available not only to other C programs, but also to
    programs written in higher-level languages such as Python, Perl,
    Java, or Ruby.</para>
    <para>This chapter is for those who wish to interact with Subversion
    through its public API or its various language bindings.  If you
    wish to write robust wrapper scripts around Subversion
    functionality to simplify your own life, are trying to develop
    more complex integrations between Subversion and other pieces of
    software, or just have an interest in Subversion's various library
    modules and what they offer, this chapter is for you.  If,
    however, you don't foresee yourself participating with Subversion
    at such a level, feel free to skip this chapter with the
    confidence that your experience as a Subversion user will not be
    affected.</para>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.developer.layerlib">
      <info>
        <title>Layered Library Design</title>
      </info>
      <para>Each of Subversion's core libraries can be said to exist in
      one of three main layers&#x2014;the Repository Layer, the
      Repository Access (RA) Layer, or the Client Layer (see <xref linkend="svn.intro.architecture.dia-1"/>).  We will examine
      these layers shortly, but first, let's briefly summarize
      Subversion's various libraries.  For the sake of consistency, we
      will refer to the libraries by their extensionless Unix library
      names (libsvn_fs, libsvn_wc, mod_dav_svn, etc.).</para>
      <variablelist>
        <varlistentry>
          <term>libsvn_client</term>
          <listitem>
            <para>Primary interface for client
          programs</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>libsvn_delta</term>
          <listitem>
            <para>Tree and byte-stream differencing
          routines</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>libsvn_diff</term>
          <listitem>
            <para>Contextual differencing and merging
          routines</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>libsvn_fs</term>
          <listitem>
            <para>Filesystem commons and module
          loader</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>libsvn_fs_base</term>
          <listitem>
            <para>The Berkeley DB filesystem
          back-end</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>libsvn_fs_fs</term>
          <listitem>
            <para>The native filesystem (FSFS)
          back-end</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>libsvn_ra</term>
          <listitem>
            <para>Repository Access commons and module
          loader</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>libsvn_ra_dav</term>
          <listitem>
            <para>The WebDAV Repository Access
          module</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>libsvn_ra_local</term>
          <listitem>
            <para>The local Repository Access
          module</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>libsvn_ra_serf</term>
          <listitem>
            <para>Another (experimental) WebDAV Repository
          Access module</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>libsvn_ra_svn</term>
          <listitem>
            <para>The custom protocol Repository Access
          module</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>libsvn_repos</term>
          <listitem>
            <para>Repository interface</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>libsvn_subr</term>
          <listitem>
            <para>Miscellaneous helpful
          subroutines</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>libsvn_wc</term>
          <listitem>
            <para>The working copy management
          library</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>mod_authz_svn</term>
          <listitem>
            <para>Apache authorization module for Subversion
          repositories access via WebDAV</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>mod_dav_svn</term>
          <listitem>
            <para>Apache module for mapping WebDAV operations to
          Subversion ones</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>The fact that the word <quote>miscellaneous</quote> only
      appears once in the previous list is a good sign.  The
      Subversion development team is serious about making sure that
      functionality lives in the right layer and libraries.  Perhaps
      the greatest advantage of the modular design is its lack of
      complexity from a developer's point of view.  As a developer,
      you can quickly formulate that kind of <quote>big
      picture</quote> that allows you to pinpoint the location of
      certain pieces of functionality with relative ease.</para>
      <para>Another benefit of modularity is the ability to replace a
      given module with a whole new library that implements the same
      API without affecting the rest of the code base.  In some sense,
      this happens within Subversion already.  The libsvn_ra_dav,
      libsvn_ra_local, libsvn_ra_serf, and libsvn_ra_svn libraries
      each implement the same interface, all working as plugins to
      libsvn_ra.  And all four communicate with the Repository
      Layer&#x2014;libsvn_ra_local connects to the repository directly;
      the other three do so over a network.  The libsvn_fs_base and
      libsvn_fs_fs libraries are another pair of libraries that
      implement the same functionality in different ways&#x2014;both
      are plugins to the common libsvn_fs library.</para>
      <para>The client itself also highlights the benefits of modularity
      in the Subversion design.  Subversion's libsvn_client library is
      a one-stop shop for most of the functionality necessary for
      designing a working Subversion client (see <xref linkend="svn.developer.layerlib.client"/>).  So while the
      Subversion distribution provides only the <command>svn</command>
      command-line client program, there are several third-party
      programs which provide various forms of graphical client UI.
      These GUIs use the same APIs that the stock command-line client
      does.  This type of modularity has played a large role in the
      proliferation of available Subversion clients and IDE
      integrations and, by extension, to the tremendous adoption rate
      of Subversion itself.</para>
      <!-- =============================================================== -->
      <section xml:id="svn.developer.layerlib.repos">
        <info>
          <title>Repository Layer</title>
        </info>
        <para>When referring to Subversion's Repository Layer, we're
        generally talking about two basic concepts&#x2014;the versioned
        filesystem implementation (accessed via libsvn_fs, and
        supported by its libsvn_fs_base and libsvn_fs_fs plugins), and
        the repository logic that wraps it (as implemented in
        libsvn_repos).  These libraries provide the storage and
        reporting mechanisms for the various revisions of your
        version-controlled data.  This layer is connected to the
        Client Layer via the Repository Access Layer, and is, from the
        perspective of the Subversion user, the stuff at the
        <quote>other end of the line.</quote></para>
        <para>The Subversion Filesystem is not a kernel-level filesystem
        that one would install in an operating system (like the Linux
        ext2 or NTFS), but a virtual filesystem.  Rather than storing
        <quote>files</quote> and <quote>directories</quote> as real
        files and directories (as in, the kind you can navigate
        through using your favorite shell program), it uses one of two
        available abstract storage backends&#x2014;either a Berkeley DB
        database environment, or a flat-file representation.  (To
        learn more about the two repository back-ends, see <xref linkend="svn.reposadmin.basics.backends"/>.)  There has even
        been considerable interest by the development community in
        giving future releases of Subversion the ability to use other
        back-end database systems, perhaps through a mechanism such as
        Open Database Connectivity (ODBC).  In fact, Google did
        something similar to this before launching the Google Code
        Project Hosting service:  they announced in mid-2006 that members
        of its Open Source team had written a new proprietary
        Subversion filesystem plugin which used their ultra-scalable
        Bigtable database for its storage.</para>
        <para>The filesystem API exported by libsvn_fs contains the
        kinds of functionality you would expect from any other
        filesystem API&#x2014;you can create and remove files and
        directories, copy and move them around, modify file contents,
        and so on.  It also has features that are not quite as common,
        such as the ability to add, modify, and remove metadata
        (<quote>properties</quote>) on each file or directory.
        Furthermore, the Subversion Filesystem is a versioning
        filesystem, which means that as you make changes to your
        directory tree, Subversion remembers what your tree looked
        like before those changes.  And before the previous changes.
        And the previous ones.  And so on, all the way back through
        versioning time to (and just beyond) the moment you first
        started adding things to the filesystem.</para>
        <para>All the modifications you make to your tree are done
        within the context of a Subversion commit transaction.  The
        following is a simplified general routine for modifying your
        filesystem:</para>
        <orderedlist inheritnum="ignore" continuation="restarts">
          <listitem>
            <para>Begin a Subversion commit transaction.</para>
          </listitem>
          <listitem>
            <para>Make your changes (adds, deletes, property
            modifications, etc.).</para>
          </listitem>
          <listitem>
            <para>Commit your transaction.</para>
          </listitem>
        </orderedlist>
        <para>Once you have committed your transaction, your filesystem
        modifications are permanently stored as historical artifacts.
        Each of these cycles generates a single new revision of your
        tree, and each revision is forever accessible as an immutable
        snapshot of <quote>the way things were.</quote></para>
        <sidebar>
          <info>
            <title>The Transaction Distraction</title>
          </info>
          <para>The notion of a Subversion transaction can become easily
          confused with the transaction support provided by the
          underlying database itself, especially given the former's
          close proximity to the Berkeley DB database code in
          libsvn_fs_base.  Both types of transaction exist to provide
          atomicity and isolation.  In other words, transactions give
          you the ability to perform a set of actions in an
          all-or-nothing fashion&#x2014;either all the actions in the
          set complete with success, or they all get treated as if
          <emphasis>none</emphasis> of them ever happened&#x2014;and in
          a way that does not interfere with other processes acting on
          the data.</para>
          <para>Database transactions generally encompass small
          operations related specifically to the modification of data
          in the database itself (such as changing the contents of a
          table row).  Subversion transactions are larger in scope,
          encompassing higher-level operations like making
          modifications to a set of files and directories which are
          intended to be stored as the next revision of the filesystem
          tree.  If that isn't confusing enough, consider the fact
          that Subversion uses a database transaction during the
          creation of a Subversion transaction (so that if the
          creation of Subversion transaction fails, the database will
          look as if we had never attempted that creation in the first
          place)!</para>
          <para>Fortunately for users of the filesystem API, the
          transaction support provided by the database system itself
          is hidden almost entirely from view (as should be expected
          from a properly modularized library scheme).  It is only
          when you start digging into the implementation of the
          filesystem itself that such things become visible (or
          interesting).</para>
        </sidebar>
        <para>Most of the functionality provided by the filesystem
        interface deals with actions that occur on individual
        filesystem paths.  That is, from outside of the filesystem, the
        primary mechanism for describing and accessing the individual
        revisions of files and directories comes through the use of
        path strings like <filename>/foo/bar</filename>, just as if
        you were addressing files and directories through your
        favorite shell program.  You add new files and directories by
        passing their paths-to-be to the right API functions.  You
        query for information about them by the same mechanism.</para>
        <para>Unlike most filesystems, though, a path alone is not
        enough information to identify a file or directory in
        Subversion.  Think of a directory tree as a two-dimensional
        system, where a node's siblings represent a sort of
        left-and-right motion, and descending into subdirectories a
        downward motion.  <xref linkend="svn.developer.layerlib.repos.dia-1"/> shows a typical
        representation of a tree as exactly that.</para>
        <figure xml:id="svn.developer.layerlib.repos.dia-1">
          <info>
            <title>Files and directories in two dimensions</title>
          </info>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/ch08dia1.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>The difference here is that the Subversion filesystem has a
        nifty third dimension that most filesystems do not
        have&#x2014;Time!
        <footnote><para>We understand that this may come as a shock to sci-fi
            fans who have long been under the impression that Time was
            actually the <emphasis>fourth</emphasis> dimension, and we
            apologize for any emotional trauma induced by our
            assertion of a different theory.</para></footnote>
        In the filesystem interface, nearly every function that has a
        <parameter>path</parameter> argument also expects a
        <parameter>root</parameter> argument.  This
        svn_fs_root_t argument describes
        either a revision or a Subversion transaction (which is simply
        a revision-in-the-making), and provides that third-dimensional
        context needed to understand the difference between
        <filename>/foo/bar</filename> in revision 32, and the same
        path as it exists in revision 98.  <xref linkend="svn.developer.layerlib.repos.dia-2"/> shows revision
        history as an added dimension to the Subversion filesystem
        universe.</para>
        <figure xml:id="svn.developer.layerlib.repos.dia-2">
          <info>
            <title>Versioning time&#x2014;the third dimension!</title>
          </info>
          <mediaobject>
            <imageobject>
              <imagedata fileref="images/ch08dia2.png"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>As we mentioned earlier, the libsvn_fs API looks and feels
        like any other filesystem, except that it has this wonderful
        versioning capability.  It was designed to be usable by any
        program interested in a versioning filesystem.  Not
        coincidentally, Subversion itself is interested in that
        functionality.  But while the filesystem API should be
        sufficient for basic file and directory versioning support,
        Subversion wants more&#x2014;and that is where libsvn_repos
        comes in.</para>
        <para>The Subversion repository library (libsvn_repos) sits
        (logically speaking) atop the libsvn_fs API, providing
        additional functionality beyond that of the underlying
        versioned filesystem logic.  It does not completely wrap each
        and every filesystem function&#x2014;only certain major steps
        in the general cycle of filesystem activity are wrapped by the
        repository interface.  Some of these include the creation and
        commit of Subversion transactions, and the modification of
        revision properties.  These particular events are wrapped by
        the repository layer because they have hooks associated with
        them.  A repository hook system is not strictly related to
        implementing a versioning filesystem, so it lives in the
        repository wrapper library.</para>
        <para>The hooks mechanism is but one of the reasons for the
        abstraction of a separate repository library from the rest of
        the filesystem code.  The libsvn_repos API provides several
        other important utilities to Subversion.  These include the
        abilities to:</para>
        <itemizedlist>
          <listitem>
            <para>create, open, destroy, and perform recovery steps on a
            Subversion repository and the filesystem included in that
            repository.</para>
          </listitem>
          <listitem>
            <para>describe the differences between two filesystem
            trees.</para>
          </listitem>
          <listitem>
            <para>query for the commit log messages associated with all
            (or some) of the revisions in which a set of files was
            modified in the filesystem.</para>
          </listitem>
          <listitem>
            <para>generate a human-readable <quote>dump</quote> of the
            filesystem, a complete representation of the revisions in
            the filesystem.</para>
          </listitem>
          <listitem>
            <para>parse that dump format, loading the dumped revisions
            into a different Subversion repository.</para>
          </listitem>
        </itemizedlist>
        <para>As Subversion continues to evolve, the repository library
        will grow with the filesystem library to offer increased
        functionality and configurable option support.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.developer.layerlib.ra">
        <info>
          <title>Repository Access Layer</title>
        </info>
        <para>If the Subversion Repository Layer is at <quote>the other
        end of the line</quote>, the Repository Access (RA) Layer is
        the line itself.  Charged with marshaling data between the
        client libraries and the repository, this layer includes the
        libsvn_ra module loader library, the RA modules themselves
        (which currently includes libsvn_ra_dav, libsvn_ra_local,
        libsvn_ra_serf, and libsvn_ra_svn), and any additional
        libraries needed by one or more of those RA modules (such as
        the mod_dav_svn Apache module or libsvn_ra_svn's server,
        <command>svnserve</command>).</para>
        <para>Since Subversion uses URLs to identify its repository
        resources, the protocol portion of the URL scheme (usually
        <literal>file://</literal>, <literal>http://</literal>,
        <literal>https://</literal>, <literal>svn://</literal>, or
        <literal>svn+ssh://</literal>) is used to determine which RA
        module will handle the communications.  Each module registers
        a list of the protocols it knows how to <quote>speak</quote>
        so that the RA loader can, at runtime, determine which module
        to use for the task at hand.  You can determine which RA
        modules are available to the Subversion command-line client,
        and what protocols they claim to support, by running
        <command>svn --version</command>:</para>
        <screen>
$ svn --version
svn, version 1.4.3 (r23084)
   compiled Jan 18 2007, 07:47:40

Copyright (C) 2000-2006 CollabNet.
Subversion is open source software, see http://subversion.tigris.org/
This product includes software developed by CollabNet (http://www.Collab.Net/).

The following repository access (RA) modules are available:

* ra_dav : Module for accessing a repository via WebDAV (DeltaV) protocol.
  - handles 'http' scheme
  - handles 'https' scheme
* ra_svn : Module for accessing a repository using the svn network protocol.
  - handles 'svn' scheme
* ra_local : Module for accessing a repository on local disk.
  - handles 'file' scheme

$
</screen>
        <para>The public API exported by the RA Layer contains
        functionality necessary for sending and receiving versioned
        data to and from the repository.  And each of the available RA
        plugins is able to perform that task using a specific
        protocol&#x2014;libsvn_ra_dav speaks HTTP/WebDAV (optionally
        using SSL encryption) with an Apache HTTP Server that is
        running the mod_dav_svn Subversion server module;
        libsvn_ra_svn speaks a custom network protocol with the
        <command>svnserve</command> program; and so on.</para>
        <para>And for those who wish to access a Subversion repository
        using still another protocol, that is precisely why the
        Repository Access Layer is modularized!  Developers can simply
        write a new library that implements the RA interface on one
        side and communicates with the repository on the other.  Your
        new library can use existing network protocols, or you can
        invent your own.  You could use inter-process communication
        (IPC) calls, or&#x2014;let's get crazy, shall we?&#x2014;you
        could even implement an email-based protocol.  Subversion
        supplies the APIs; you supply the creativity.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.developer.layerlib.client">
        <info>
          <title>Client Layer</title>
        </info>
        <para>On the client side, the Subversion working copy is where
        all the action takes place.  The bulk of functionality
        implemented by the client-side libraries exists for the sole
        purpose of managing working copies&#x2014;directories full of
        files and other subdirectories which serve as a sort of local,
        editable <quote>reflection</quote> of one or more repository
        locations&#x2014;and propagating changes to and from the
        Repository Access layer.</para>
        <para>Subversion's working copy library, libsvn_wc, is directly
        responsible for managing the data in the working copies.  To
        accomplish this, the library stores administrative information
        about each working copy directory within a special
        subdirectory.  This subdirectory, named
        <filename>.svn</filename>, is present in each working copy
        directory and contains various other files and directories
        which record state and provide a private workspace for
        administrative action.  For those familiar with CVS, this
        <filename>.svn</filename> subdirectory is similar in purpose
        to the <filename>CVS</filename> administrative directories
        found in CVS working copies.  For more information about the
        <filename>.svn</filename> administrative area, see <xref linkend="svn.developer.insidewc"/>in this chapter.</para>
        <para>The Subversion client library, libsvn_client, has the
        broadest responsibility; its job is to mingle the
        functionality of the working copy library with that of the
        Repository Access Layer, and then to provide the highest-level
        API to any application that wishes to perform general revision
        control actions.  For example, the function
        <function>svn_client_checkout()</function> takes a URL as an
        argument.  It passes this URL to the RA layer and opens an
        authenticated session with a particular repository.  It then
        asks the repository for a certain tree, and sends this tree
        into the working copy library, which then writes a full
        working copy to disk (<filename>.svn</filename> directories
        and all).</para>
        <para>The client library is designed to be used by any
        application.  While the Subversion source code includes a
        standard command-line client, it should be very easy to write
        any number of GUI clients on top of the client library.  New
        GUIs (or any new client, really) for Subversion need not be
        clunky wrappers around the included command-line
        client&#x2014;they have full access via the libsvn_client API
        to same functionality, data, and callback mechanisms that the
        command-line client uses.  In fact, the Subversion source code
        tree contains a small C program (which can be found at
        <filename>tools/examples/minimal_client.c</filename> that
        exemplifies how to wield the Subversion API to create a simple
        client program</para>
        <sidebar>
          <info>
            <title>Binding Directly&#x2014;A Word About Correctness</title>
          </info>
          <para>Why should your GUI program bind directly with a
          libsvn_client instead of acting as a wrapper around a
          command-line program?  Besides simply being more efficient,
          it can be more correct as well.  A
          command-line program (like the one supplied with Subversion)
          that binds to the client library needs to effectively
          translate feedback and requested data bits from C types to
          some form of human-readable output.  This type of
          translation can be lossy.  That is, the program may not
          display all of the information harvested from the API, or
          may combine bits of information for compact representation.</para>
          <para>If you wrap such a command-line program with yet another
          program, the second program has access only to
          already-interpreted (and as we mentioned, likely incomplete)
          information, which it must <emphasis>again</emphasis>
          translate into <emphasis>its</emphasis> representation
          format.  With each layer of wrapping, the integrity of the
          original data is potentially tainted more and more, much
          like the result of making a copy of a copy (of a copy &#x2026;)
          of a favorite audio or video cassette.</para>
          <para>But the most compelling argument for binding directly to
          the APIs instead of wrapping other programs is that the
          Subversion project makes compatibility promises regarding
          its APIs.  Across minor versions of those APIs (such as
          between 1.3 and 1.4), no function's prototype will change.
          In other words, you aren't forced to update your program's
          source code simply because you've upgraded to a new version
          of Subversion.  Certain functions might be deprecated, but
          they still work, and this gives you a buffer of time to
          eventually embrace the newer APIs.  These kinds of
          compatibility promises do not exist for Subversion
          command-line program output, which is subject to change from
          release to release.</para>
        </sidebar>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.developer.insidewc">
      <info>
        <title>Inside the Working Copy Administration Area</title>
      </info>
      <para>As we mentioned earlier, each directory of a Subversion
      working copy contains a special subdirectory called
      <filename>.svn</filename> which houses administrative data about
      that working copy directory.  Subversion uses the information in
      <filename>.svn</filename> to keep track of things like:</para>
      <itemizedlist>
        <listitem>
          <para>Which repository location(s) are represented by the
          files and subdirectories in the working copy
          directory.</para>
        </listitem>
        <listitem>
          <para>What revision of each of those files and directories are
          currently present in the working copy.</para>
        </listitem>
        <listitem>
          <para>Any user-defined properties that might be attached
          to those files and directories.</para>
        </listitem>
        <listitem>
          <para>Pristine (un-edited) copies of the working copy
          files.</para>
        </listitem>
      </itemizedlist>
      <para>The Subversion working copy administration area's layout and
      contents are considered implementation details not really
      intended for human consumption.  Developers are encouraged to
      use Subversion's public APIs, or the tools that Subversion provides, to access and
      manipulate the working copy data, instead of directly reading
      or modifying those files.  The file formats employed by the working
      copy library for its administrative data do change from time to
      time&#x2014;a fact that the public APIs do a great job of
      hiding from the average user.  In this section, we
      expose some of these implementation details sheerly to appease
      your overwhelming curiosity.</para>
      <!-- =============================================================== -->
      <section xml:id="svn.developer.insidewc.entries">
        <info>
          <title>The Entries File</title>
        </info>
        <para>Perhaps the single most important file in the
        <filename>.svn</filename> directory is the
        <filename>entries</filename> file.  It
        contains the bulk of the administrative
        information about the versioned items in a working copy
        directory.  It is this one file which tracks the repository
        URLs, pristine revision, file checksums, pristine text and
        property timestamps, scheduling and conflict state
        information, last-known commit information (author, revision,
        timestamp), local copy history&#x2014;practically everything
        that a Subversion client is interested in knowing about a
        versioned (or to-be-versioned) resource!</para>
        <para>Folks familiar with CVS's administrative directories will
        have recognized at this point that Subversion's
        <filename>.svn/entries</filename> file serves the purposes of,
        among other things, CVS's <filename>CVS/Entries</filename>,
        <filename>CVS/Root</filename>, and
        <filename>CVS/Repository</filename> files combined.</para>
        <para>The format of the <filename>.svn/entries</filename> file
        has changed over time.  Originally an XML file, it now uses a
        custom&#x2014;though still human-readable&#x2014;file format.
        While XML was a great choice for early developers of
        Subversion who were frequently debugging the file's contents
        (and Subversion's behavior in light of them), the need for
        easy developer debugging has diminished as Subversion has
        matured, and has been replaced by the user's need for snappier
        performance.  Be aware that Subversion's working copy library
        automatically upgrades working copies from one format to
        another&#x2014;it reads the old formats, and writes the
        new&#x2014;which saves you the hassle of checking out a new
        working copy, but can also complicate situations where
        different versions of Subversion might be trying to use the
        same working copy.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.developer.insidewc.base-and-props">
        <info>
          <title>Pristine Copies and Property Files</title>
        </info>
        <para>As mentioned before, the <filename>.svn</filename>
        directory also holds the pristine <quote>text-base</quote>
        versions of files.  Those can be found in
        <filename>.svn/text-base</filename>.  The benefits of these
        pristine copies are multiple&#x2014;network-free checks for
        local modifications and difference reporting, network-free
        reversion of modified or missing files, more efficient transmission
        of changes to the server&#x2014;but comes at the cost of having
        each versioned file stored at least twice on disk.  These
        days, this seems to be a negligible penalty for most files.
        However, the situation gets uglier as the size of your
        versioned files grows.  Some attention is being given to
        making the presence of the <quote>text-base</quote> an option.
        Ironically though, it is as your versioned files' sizes get
        larger that the existence of the <quote>text-base</quote>
        becomes more crucial&#x2014;who wants to transmit a huge file
        across a network just because they want to commit a tiny
        change to it?</para>
        <para>Similar in purpose to the <quote>text-base</quote> files
        are the property files and their pristine
        <quote>prop-base</quote> copies, located in
        <filename>.svn/props</filename> and
        <filename>.svn/prop-base</filename> respectively.  Since
        directories can have properties, too, there are also
        <filename>.svn/dir-props</filename> and
        <filename>.svn/dir-prop-base</filename> files.</para>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.developer.usingapi">
      <info>
        <title>Using the APIs</title>
      </info>
      <para>Developing applications against the Subversion library APIs
      is fairly straightforward.  Subversion is primarily a set of C
      libraries, with header (.h) files that live in the
      <filename>subversion/include</filename> directory of the source
      tree.  These headers are copied into your system locations (for
      example, <filename>/usr/local/include</filename>) when you build
      and install Subversion itself from source.  These headers
      represent the entirety of the functions and types meant to be
      accessible by users of the Subversion libraries.  The Subversion
      developer community is meticulous about ensuring that the public
      API is well-documented&#x2014;refer directly to the header files
      for that documentation.</para>
      <para>When examining the public header files, the first thing you
      might notice is that Subversion's datatypes and functions are
      namespace protected.  That is, every public Subversion symbol name begins
      with <literal>svn_</literal>, followed by a short code for the
      library in which the symbol is defined (such as
      <literal>wc</literal>, <literal>client</literal>,
      <literal>fs</literal>, etc.), followed by a single underscore
      (<literal>_</literal>) and then the rest of the symbol name.
      Semi-public functions (used among source files of a given
      library but not by code outside that library, and found inside
      the library directories themselves) differ from this naming
      scheme in that instead of a single underscore after the library
      code, they use a double underscore (<literal>__</literal>).
      Functions that are private to a given source file have no
      special prefixing, and are declared <literal>static</literal>.
      Of course, a compiler isn't interested in these naming
      conventions, but they help to clarify the scope of a given
      function or datatype.</para>
      <para>Another good source of information about programming against
      the Subversion APIs is the project's own hacking guidelines,
      which can be found at <uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://subversion.tigris.org/hacking.html">http://subversion.tigris.org/hacking.html</uri>.  This
      document contains useful information which, while aimed at
      developers and would-be developers of Subversion itself, is
      equally applicable to folks developing against Subversion as a
      set of third-party libraries.
      <footnote><para>After all, Subversion uses Subversion's APIs,
          too.</para></footnote>
    </para>
      <!-- =============================================================== -->
      <section xml:id="svn.developer.usingapi.apr">
        <info>
          <title>The Apache Portable Runtime Library</title>
        </info>
        <para>Along with Subversion's own datatypes, you will see many
        references to datatypes that begin with
        <literal>apr_</literal>&#x2014;symbols from the Apache Portable
        Runtime (APR) library.  APR is Apache's portability library,
        originally carved out of its server code as an attempt to
        separate the OS-specific bits from the OS-independent portions
        of the code.  The result was a library that provides a generic
        API for performing operations that differ mildly&#x2014;or
        wildly&#x2014;from OS to OS.  While the Apache HTTP Server was
        obviously the first user of the APR library, the Subversion
        developers immediately recognized the value of using APR as
        well.  This means that there is practically no OS-specific
        code in Subversion itself.  Also, it means that the Subversion
        client compiles and runs anywhere that Apache HTTP Server
        itself does.  Currently this list includes all flavors of
        Unix, Win32, BeOS, OS/2, and Mac OS X.</para>
        <para>In addition to providing consistent implementations of
        system calls that differ across operating systems,
        <footnote><para>Subversion uses ANSI system calls and datatypes as much
            as possible.</para></footnote>
        APR gives Subversion immediate access to many custom
        datatypes, such as dynamic arrays and hash tables.  Subversion
        uses these types extensively.  But
        perhaps the most pervasive APR datatype, found in nearly every
        Subversion API prototype, is the
        apr_pool_t &#x2014; the APR memory pool.
        Subversion uses pools internally for all its memory allocation
        needs (unless an external library requires a different memory
        management mechanism for data passed through its API),
        <footnote><para>Neon and Berkeley DB are examples of such libraries.</para></footnote>
        and while a person coding against the Subversion APIs is
        not required to do the same, they <emphasis>are</emphasis> required to provide
        pools to the API functions that need them.  This means that
        users of the Subversion API must also link against APR, must
        call <function>apr_initialize()</function> to initialize the
        APR subsystem, and then must create and manage pools for use with
        Subversion API calls, typically by using
        <function>svn_pool_create()</function>,
        <function>svn_pool_clear()</function>, and 
        <function>svn_pool_destroy()</function>.</para>
        <sidebar>
          <info>
            <title>Programming with Memory Pools</title>
          </info>
          <para>Almost every developer who has used the C programming
          language has at some point sighed at the daunting task of
          managing memory usage.  Allocating enough memory to use,
          keeping track of those allocations, freeing the memory when
          you no longer need it&#x2014;these tasks can be quite
          complex.  And of course, failure to do those things properly
          can result in a program that crashes itself, or worse,
          crashes the computer.</para>
          <para>Higher-level languages, on the other hand, take the job of
          memory management away from the developer completely.
          <footnote><para>Or at least make it something you only toy with when
              doing extremely tight program optimization.</para></footnote>
          Languages like Java and Python use <firstterm>garbage
          collection</firstterm>, allocating memory for
          objects when needed, and automatically freeing that memory
          when the object is no longer in use.</para>
          <para>APR provides a middle-ground approach called pool-based
          memory management.  It allows the developer to control
          memory usage at a lower resolution&#x2014;per chunk (or
          <quote>pool</quote>) of memory, instead of per allocated
          object.  Rather than using <function>malloc()</function> and
          friends to allocate enough memory for a given object, you
          ask APR to allocate the memory from a memory pool.  When
          you're finished using the objects you've created in the
          pool, you destroy the entire pool, effectively de-allocating the
          memory consumed by <emphasis>all</emphasis> the objects you allocated from it.
          Thus, rather than keeping track of individual objects which need
          to be de-allocated, your program simply considers the
          general lifetimes of those objects, and allocates the
          objects in a pool whose lifetime (the time between the
          pool's creation and its deletion) matches the object's
          needs.</para>
        </sidebar>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.developer.usingapi.urlpath">
        <info>
          <title>URL and Path Requirements</title>
        </info>
        <para>With remote version control operation as the whole point
        of Subversion's existence, it makes sense that some attention
        has been paid to internationalization (i18n) support.  After
        all, while <quote>remote</quote> might mean <quote>across the
        office</quote>, it could just as well mean <quote>across the
        globe.</quote> To facilitate this, all of Subversion's public
        interfaces that accept path arguments expect those paths to be
        canonicalized, and encoded in UTF-8.  This means, for example,
        that any new client binary that drives the libsvn_client
        interface needs to first convert paths from the
        locale-specific encoding to UTF-8 before passing those paths
        to the Subversion libraries, and then re-convert any resultant
        output paths from Subversion back into the locale's encoding
        before using those paths for non-Subversion purposes.
        Fortunately, Subversion provides a suite of functions (see
        <filename>subversion/include/svn_utf.h</filename>) that can be
        used by any program to do these conversions.</para>
        <para>Also, Subversion APIs require all URL parameters to be
        properly URI-encoded.  So, instead of passing
        <uri>file:///home/username/My File.txt</uri> as the URL of a
        file named <literal>My File.txt</literal>, you need to pass
        <uri>file:///home/username/My%20File.txt</uri>.  Again,
        Subversion supplies helper functions that your application can
        use&#x2014;<function>svn_path_uri_encode()</function> and
        <function>svn_path_uri_decode()</function>, for URI encoding
        and decoding, respectively.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.developer.usingapi.otherlangs">
        <info>
          <title>Using Languages Other than C and C++</title>
        </info>
        <para>If you are interested in using the Subversion libraries in
        conjunction with something other than a C program&#x2014;say a
        Python or Perl script&#x2014;Subversion has some support for this
        via the Simplified Wrapper and Interface Generator (SWIG).  The
        SWIG bindings for Subversion are located in
        <filename>subversion/bindings/swig</filename>.  They are still
        maturing, but they are usable.  These bindings allow you
        to call Subversion API functions indirectly, using wrappers that
        translate the datatypes native to your scripting language into
        the datatypes needed by Subversion's C libraries.</para>
        <para>Significant efforts have been made towards creating
        functional SWIG-generated bindings for Python, Perl, and Ruby.
        To some extent, the work done preparing the SWIG interface
        files for these languages is reusable in efforts to generate
        bindings for other languages supported by SWIG (which include
        versions of C#, Guile, Java, MzScheme, OCaml, PHP, and Tcl,
        among others).  However, some extra programming is required to
        compensate for complex APIs that SWIG needs some help
        translating between languages.  For more information on SWIG
        itself, see the project's website at <uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.swig.org/">http://www.swig.org/</uri>.</para>
        <para>Subversion also has language bindings for Java.  The
        JavaJL bindings (located in
        <filename>subversion/bindings/java</filename> in the
        Subversion source tree) aren't SWIG-based, but are instead a
        mixture of javah and hand-coded JNI.  JavaHL most covers
        Subversion client-side APIs, and is specifically targeted at
        implementors of Java-based Subversion clients and IDE
        integrations.</para>
        <para>Subversion's language bindings tend to lack the level of
        developer attention given to the core Subversion modules, but
        can generally be trusted as production-ready.  A number of
        scripts and applications, alternative Subversion GUI clients
        and other third-party tools are successfully using
        Subversion's language bindings today to accomplish their
        Subversion integrations.</para>
        <para>It's worth noting here that there are other options for
        interfacing with Subversion using other languages:  alternative
        bindings for Subversion which aren't provided by the
        Subversion development community at all.  You can find links
        to these alternative bindings on the Subversion project's
        links page (at <uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://subversion.tigris.org/links.html">http://subversion.tigris.org/links.html</uri>), but there
        are a couple of popular ones we feel are especially
        noteworthy.  First, Barry Scott's PySVN bindings (<uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://pysvn.tigris.org/">http://pysvn.tigris.org/</uri>) are a popular option for
        binding with Python.  PySVN boasts of a more Pythonic
        interface than the more C-like APIs provided by Subversion's
        own Python bindings.  For folks looking for a pure Java
        implementation of Subversion, check out SVNKit (<uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://svnkit.com/">http://svnkit.com/</uri>), which is Subversion re-written
        from the ground up in Java.  You should exercise caution here,
        though&#x2014;because SVNKit doesn't use the core Subversion
        libraries, it's behavior is not guaranteed to match that of
        Subversion itself.</para>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.developer.usingapi.codesamples">
        <info>
          <title>Code Samples</title>
        </info>
        <para><xref linkend="svn.developer.layerlib.repos.ex-1"/>
        contains a code segment (written in C) that illustrates some
        of the concepts we've been discussing.  It uses both the
        repository and filesystem interfaces (as can be determined by
        the prefixes <literal>svn_repos_</literal> and
        <literal>svn_fs_</literal> of the function names,
        respectively) to create a new revision in which a directory is
        added.  You can see the use of an APR pool, which is passed
        around for memory allocation purposes.  Also, the code reveals
        a somewhat obscure fact about Subversion error
        handling&#x2014;all Subversion errors must be explicitly
        handled to avoid memory leakage (and in some cases,
        application failure).</para>
        <example xml:id="svn.developer.layerlib.repos.ex-1">
          <info>
            <title>Using the Repository Layer</title>
          </info>
          <programlisting>
/* Convert a Subversion error into a simple boolean error code.
 *
 * NOTE:  Subversion errors must be cleared (using svn_error_clear())
 *        because they are allocated from the global pool, else memory
 *        leaking occurs.
 */
#define INT_ERR(expr)                           \
  do {                                          \
    svn_error_t *__temperr = (expr);            \
    if (__temperr)                              \
      {                                         \
        svn_error_clear(__temperr);             \
        return 1;                               \
      }                                         \
    return 0;                                   \
  } while (0)

/* Create a new directory at the path NEW_DIRECTORY in the Subversion
 * repository located at REPOS_PATH.  Perform all memory allocation in
 * POOL.  This function will create a new revision for the addition of
 * NEW_DIRECTORY.  Return zero if the operation completes
 * successfully, non-zero otherwise.
 */
static int
make_new_directory(const char *repos_path,
                   const char *new_directory,
                   apr_pool_t *pool)
{
  svn_error_t *err;
  svn_repos_t *repos;
  svn_fs_t *fs;
  svn_revnum_t youngest_rev;
  svn_fs_txn_t *txn;
  svn_fs_root_t *txn_root;
  const char *conflict_str;

  /* Open the repository located at REPOS_PATH. 
   */
  INT_ERR(svn_repos_open(&amp;repos, repos_path, pool));

  /* Get a pointer to the filesystem object that is stored in REPOS. 
   */
  fs = svn_repos_fs(repos);

  /* Ask the filesystem to tell us the youngest revision that
   * currently exists. 
   */
  INT_ERR(svn_fs_youngest_rev(&amp;youngest_rev, fs, pool));

  /* Begin a new transaction that is based on YOUNGEST_REV.  We are
   * less likely to have our later commit rejected as conflicting if we
   * always try to make our changes against a copy of the latest snapshot
   * of the filesystem tree. 
   */
  INT_ERR(svn_fs_begin_txn(&amp;txn, fs, youngest_rev, pool));

  /* Now that we have started a new Subversion transaction, get a root
   * object that represents that transaction. 
   */
  INT_ERR(svn_fs_txn_root(&amp;txn_root, txn, pool));
  
  /* Create our new directory under the transaction root, at the path
   * NEW_DIRECTORY. 
   */
  INT_ERR(svn_fs_make_dir(txn_root, new_directory, pool));

  /* Commit the transaction, creating a new revision of the filesystem
   * which includes our added directory path.
   */
  err = svn_repos_fs_commit_txn(&amp;conflict_str, repos, 
                                &amp;youngest_rev, txn, pool);
  if (! err)
    {
      /* No error?  Excellent!  Print a brief report of our success.
       */
      printf("Directory '%s' was successfully added as new revision "
             "'%ld'.\n", new_directory, youngest_rev);
    }
  else if (err-&gt;apr_err == SVN_ERR_FS_CONFLICT)
    {
      /* Uh-oh.  Our commit failed as the result of a conflict
       * (someone else seems to have made changes to the same area 
       * of the filesystem that we tried to modify).  Print an error
       * message.
       */
      printf("A conflict occurred at path '%s' while attempting "
             "to add directory '%s' to the repository at '%s'.\n", 
             conflict_str, new_directory, repos_path);
    }
  else
    {
      /* Some other error has occurred.  Print an error message.
       */
      printf("An error occurred while attempting to add directory '%s' "
             "to the repository at '%s'.\n", 
             new_directory, repos_path);
    }

  INT_ERR(err);
} 
</programlisting>
        </example>
        <para>Note that in <xref linkend="svn.developer.layerlib.repos.ex-1"/>, the code could
        just as easily have committed the transaction using
        <function>svn_fs_commit_txn()</function>.  But the filesystem
        API knows nothing about the repository library's hook
        mechanism.  If you want your Subversion repository to
        automatically perform some set of non-Subversion tasks every
        time you commit a transaction (like, for example, sending an
        email that describes all the changes made in that transaction
        to your developer mailing list), you need to use the
        libsvn_repos-wrapped version of that function, which adds the
        hook triggering functionality&#x2014;in this case,
        <function>svn_repos_fs_commit_txn()</function>.  (For more
        information regarding Subversion's repository hooks, see <xref linkend="svn.reposadmin.create.hooks"/>.)</para>
        <para>Now let's switch languages.  <xref linkend="svn.developer.usingapi.otherlangs.ex-1"/> is a
        sample program that uses Subversion's SWIG Python bindings to
        recursively crawl the youngest repository revision, and print
        the various paths reached during the crawl.</para>
        <example xml:id="svn.developer.usingapi.otherlangs.ex-1">
          <info>
            <title>Using the Repository Layer with Python</title>
          </info>
          <programlisting>
#!/usr/bin/python

"""Crawl a repository, printing versioned object path names."""

import sys
import os.path
import svn.fs, svn.core, svn.repos

def crawl_filesystem_dir(root, directory):
    """Recursively crawl DIRECTORY under ROOT in the filesystem, and return
    a list of all the paths at or below DIRECTORY."""

    # Print the name of this path.
    print directory + "/"
    
    # Get the directory entries for DIRECTORY.
    entries = svn.fs.svn_fs_dir_entries(root, directory)

    # Loop over the entries.
    names = entries.keys()
    for name in names:
        # Calculate the entry's full path.
        full_path = directory + '/' + name

        # If the entry is a directory, recurse.  The recursion will return
        # a list with the entry and all its children, which we will add to
        # our running list of paths.
        if svn.fs.svn_fs_is_dir(root, full_path):
            crawl_filesystem_dir(root, full_path)
        else:
            # Else it's a file, so print its path here.
            print full_path

def crawl_youngest(repos_path):
    """Open the repository at REPOS_PATH, and recursively crawl its
    youngest revision."""
    
    # Open the repository at REPOS_PATH, and get a reference to its
    # versioning filesystem.
    repos_obj = svn.repos.svn_repos_open(repos_path)
    fs_obj = svn.repos.svn_repos_fs(repos_obj)

    # Query the current youngest revision.
    youngest_rev = svn.fs.svn_fs_youngest_rev(fs_obj)
    
    # Open a root object representing the youngest (HEAD) revision.
    root_obj = svn.fs.svn_fs_revision_root(fs_obj, youngest_rev)

    # Do the recursive crawl.
    crawl_filesystem_dir(root_obj, "")
    
if __name__ == "__main__":
    # Check for sane usage.
    if len(sys.argv) != 2:
        sys.stderr.write("Usage: %s REPOS_PATH\n"
                         % (os.path.basename(sys.argv[0])))
        sys.exit(1)

    # Canonicalize the repository path.
    repos_path = svn.core.svn_path_canonicalize(sys.argv[1])

    # Do the real work.
    crawl_youngest(repos_path)
</programlisting>
        </example>
        <para>This same program in C would need to deal with APR's
        memory pool system.  But Python handles memory usage
        automatically, and Subversion's Python bindings adhere to that
        convention.  In C, you'd be working with custom datatypes
        (such as those provided by the APR library) for representing
        the hash of entries and the list of paths, but Python has
        hashes (called <quote>dictionaries</quote>) and lists as
        built-in datatypes, and provides a rich collection of
        functions for operating on those types.  So SWIG (with the
        help of some customizations in Subversion's language bindings
        layer) takes care of mapping those custom datatypes into the
        native datatypes of the target language.  This provides a more
        intuitive interface for users of that language.</para>
        <para>The Subversion Python bindings can be used for working
        copy operations, too.  In the previous section of this
        chapter, we mentioned the <filename>libsvn_client</filename>
        interface, and how it exists for the sole purpose of
        simplifying the process of writing a Subversion client.  <xref linkend="svn.developer.usingapi.otherlangs.ex-2"/> is a brief
        example of how that library can be accessed via the SWIG
        Python bindings to recreate a scaled-down version of the
        <command>svn status</command> command.</para>
        <example xml:id="svn.developer.usingapi.otherlangs.ex-2">
          <info>
            <title>A Python Status Crawler</title>
          </info>
          <programlisting>
#!/usr/bin/env python

"""Crawl a working copy directory, printing status information."""

import sys
import os.path
import getopt
import svn.core, svn.client, svn.wc

def generate_status_code(status):
    """Translate a status value into a single-character status code,
    using the same logic as the Subversion command-line client."""
    code_map = { svn.wc.svn_wc_status_none        : ' ',
                 svn.wc.svn_wc_status_normal      : ' ',
                 svn.wc.svn_wc_status_added       : 'A',
                 svn.wc.svn_wc_status_missing     : '!',
                 svn.wc.svn_wc_status_incomplete  : '!',
                 svn.wc.svn_wc_status_deleted     : 'D',
                 svn.wc.svn_wc_status_replaced    : 'R',
                 svn.wc.svn_wc_status_modified    : 'M',
                 svn.wc.svn_wc_status_merged      : 'G',
                 svn.wc.svn_wc_status_conflicted  : 'C',
                 svn.wc.svn_wc_status_obstructed  : '~',
                 svn.wc.svn_wc_status_ignored     : 'I',
                 svn.wc.svn_wc_status_external    : 'X',
                 svn.wc.svn_wc_status_unversioned : '?',
               }
    return code_map.get(status, '?')

def do_status(wc_path, verbose):
    # Calculate the length of the input working copy path.
    wc_path_len = len(wc_path)

    # Build a client context baton.
    ctx = svn.client.svn_client_ctx_t()

    def _status_callback(path, status, root_path_len=wc_path_len):
        """A callback function for svn_client_status."""

        # Print the path, minus the bit that overlaps with the root of
        # the status crawl
        text_status = generate_status_code(status.text_status)
        prop_status = generate_status_code(status.prop_status)
        print '%s%s  %s' % (text_status, prop_status, path[wc_path_len + 1:])
        
    # Do the status crawl, using _status_callback() as our callback function.
    svn.client.svn_client_status(wc_path, None, _status_callback,
                                 1, verbose, 0, 0, ctx)

def usage_and_exit(errorcode):
    """Print usage message, and exit with ERRORCODE."""
    stream = errorcode and sys.stderr or sys.stdout
    stream.write("""Usage: %s OPTIONS WC-PATH
Options:
  --help, -h    : Show this usage message
  --verbose, -v : Show all statuses, even uninteresting ones
""" % (os.path.basename(sys.argv[0])))
    sys.exit(errorcode)
    
if __name__ == '__main__':
    # Parse command-line options.
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hv", ["help", "verbose"])
    except getopt.GetoptError:
        usage_and_exit(1)
    verbose = 0
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage_and_exit(0)
        if opt in ("-v", "--verbose"):
            verbose = 1
    if len(args) != 1:
        usage_and_exit(2)
            
    # Canonicalize the repository path.
    wc_path = svn.core.svn_path_canonicalize(args[0])

    # Do the real work.
    try:
        do_status(wc_path, verbose)
    except svn.core.SubversionException, e:
        sys.stderr.write("Error (%d): %s\n" % (e[1], e[0]))
        sys.exit(1)
</programlisting>
        </example>
        <para>As was the case in <xref linkend="svn.developer.usingapi.otherlangs.ex-1"/>, this
        program is pool-free and uses, for the most part, normal
        Python data types.  The call to
        <function>svn_client_ctx_t()</function> is deceiving because
        the public Subversion API has no such function&#x2014;this just
        happens to be a case where SWIG's automatic language
        generation bleeds through a little bit (the function is a sort
        of factory function for Python's version of the corresponding
        complex C structure).  Also note that the path passed to this
        program (like the last one) gets run through
        <function>svn_path_canonicalize()</function>, because to
        <emphasis>not</emphasis> do so runs the risk of triggering the
        underlying Subversion C library's assertions about such
        things, which translate into rather immediate and
        unceremonious program abortion.</para>
      </section>
    </section>
  </chapter>
  <!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
  <chapter xml:id="svn.ref">
    <info>
      <title>Subversion Complete Reference</title>
    </info>
    <para>This chapter is intended to be a complete reference to using
    Subversion.  This includes the command line client
    (<command>svn</command>) and all its subcommands, as well as the
    repository administration programs (<command>svnadmin</command>
    and <command>svnlook</command>) and their respective
    subcommands.</para>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.ref.svn">
      <info>
        <title>The Subversion Command Line Client: <command>svn</command></title>
      </info>
      <para>To use the command line client, you type
      <command>svn</command>, the subcommand you wish to use
      <footnote><para>Yes, yes, you don't need a subcommand to use the
      <option>--version</option> option, but we'll get to that in just
      a minute.</para></footnote>, and any options or targets that
      you wish to operate on&#x2014;there is no specific order that the
      subcommand and the options must appear in.  For example, all of
      the following are valid ways to use <command>svn
      status</command>:</para>
      <screen>
$ svn -v status
$ svn status -v 
$ svn status -v myfile
</screen>
      <para>You can find many more examples of how to use most client
      commands in <xref linkend="svn.tour"/> and commands for managing
      properties in <xref linkend="svn.advanced.props"/>.</para>
      <!-- =============================================================== -->
      <section xml:id="svn.ref.svn.sw">
        <info>
          <title><command>svn</command> Options</title>
        </info>
        <para>While Subversion has different options for its
        subcommands, all options are global&#x2014;that is, each
        option is guaranteed to mean the same thing regardless of
        the subcommand you use it with.  For example,
        <option>--verbose</option> (<option>-v</option>) always
        means <quote>verbose output</quote>, regardless of the
        subcommand you use it with.</para>
        <variablelist>
          <varlistentry>
            <term>
              <option>--auto-props</option>
            </term>
            <listitem>
              <para>Enables auto-props, overriding the
              <literal>enable-auto-props</literal> directive in the
              <filename>config</filename> file.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><option>--change</option> (<option>-c</option>)
            <replaceable>ARG</replaceable></term>
            <listitem>
              <para>Used as a means to refer to a specific
              <quote>change</quote> (aka a revision), this option is
              syntactic sugar for <quote>-r ARG-1:ARG</quote>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--config-dir</option>
              <replaceable>DIR</replaceable>
            </term>
            <listitem>
              <para>Instructs Subversion to read configuration
              information from the specified directory instead of the
              default location (<filename>.subversion</filename> in
              the user's home directory).</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--diff-cmd</option>
              <replaceable>CMD</replaceable>
            </term>
            <listitem>
              <para>Specifies an external program to use to show
              differences between files.  When <command>svn
              diff</command> is invoked without this option, it uses
              Subversion's internal diff engine, which provides
              unified diffs by default.  If you want to use an
              external diff program, use <option>--diff-cmd</option>.
              You can pass options to the diff program with the
              <option>--extensions</option> option (more on that later
              in this section).</para>
              <!-- TODO(fitz): Document -u -b -w and - -ignore-eol-style -->
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--diff3-cmd</option>
              <replaceable>CMD</replaceable>
            </term>
            <listitem>
              <para>Specifies an external program to use to merge files.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--dry-run</option>
            </term>
            <listitem>
              <para>Goes through all the motions of running a command,
              but makes no actual changes&#x2014;either on disk or in
              the repository.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--editor-cmd</option>
              <replaceable>CMD</replaceable>
            </term>
            <listitem>
              <para>Specifies an external program to use to edit a log message
              or a property value.  See the <literal>editor-cmd</literal>
              section in <xref linkend="svn.advanced.confarea.opts.config"/>
              for ways to specify a default editor.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--encoding</option>
              <replaceable>ENC</replaceable>
            </term>
            <listitem>
              <para>Tells Subversion that your commit message is encoded
              in the charset provided.  The default is your operating
              system's native locale, and you should specify the
              encoding if your commit message is in any other
              encoding.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><option>--extensions</option> (<option>-x</option>)
          <replaceable>ARGS</replaceable></term>
            <listitem>
              <para>Specifies an argument or arguments that Subversion
              should pass to an external diff command.  This option is
              valid only when used with the <command>svn
              diff</command> or <command>svn merge</command> commands,
              with the
              <option>--diff-cmd</option> option.
              If you wish to pass multiple
              arguments, you must enclose all of them in quotes (for
              example, <command>svn diff --diff-cmd /usr/bin/diff -x
              "-b -E"</command>).</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><option>--file</option> (<option>-F</option>)
            <replaceable>FILENAME</replaceable>
          </term>
            <listitem>
              <para>Uses the contents of the named file for the
              specified subcommand, though different subcommands do
              different things with this content.  For example,
              <command>svn commit</command> uses the content as a
              commit log, whereas <command>svn propset</command> uses
              it as a property value.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--force</option>
            </term>
            <listitem>
              <para>Forces a particular command or operation to run.
              There are some operations that Subversion will prevent
              you from doing in normal usage, but you can pass the
              force option to tell Subversion <quote>I know what I'm
              doing as well as the possible repercussions of doing it,
              so let me at 'em</quote>.  This option is the
              programmatic equivalent of doing your own electrical
              work with the power on&#x2014;if you don't know what
              you're doing, you're likely to get a nasty shock.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--force-log</option>
            </term>
            <listitem>
              <para>Forces a suspicious parameter passed to the
              <option>--message</option> (<option>-m</option>) or
              <option>--file</option> (<option>-F</option>) options to
              be accepted as valid.  By default, Subversion will
              produce an error if parameters to these options look
              like they might instead be targets of the subcommand.
              For example, if you pass a versioned file's path to the
              <option>--file</option> (<option>-F</option>) option,
              Subversion will assume you've made a mistake, that the
              path was instead intended as the target of the
              operation, and that you simply failed to provide some
              other&#x2014;unversioned&#x2014;file as the source of your log
              message.  To assert your intent and override these types
              of errors, pass the <option>--force-log</option> option 
              to subcommands that accept log messages.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><option>--help</option> (<option>-h</option> or
                <option>-?</option>)
          </term>
            <listitem>
              <para>If used with one or more subcommands, shows the
              built-in help text for each subcommand.  If used alone,
              it displays the general client help text.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--ignore-ancestry</option>
            </term>
            <listitem>
              <para>Tells Subversion to ignore ancestry when calculating
              differences (rely on path contents alone).</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--ignore-externals</option>
            </term>
            <listitem>
              <para>Tells Subversion to ignore external definitions and
              the external working copies managed by them.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--incremental</option>
            </term>
            <listitem>
              <para>Prints output in a format suitable for
              concatenation.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--limit</option>
              <replaceable>NUM</replaceable>
            </term>
            <listitem>
              <para>Show only the first <replaceable>NUM</replaceable>
              log messages.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><option>--message</option> (<option>-m</option>)
            <replaceable>MESSAGE</replaceable>
          </term>
            <listitem>
              <para>Indicates that you will specify a either a log
              message or a lock comment on the command line, following
              this option.  For example:</para>
              <screen>
$ svn commit -m "They don't make Sunday."
</screen>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--new</option>
              <replaceable>ARG</replaceable>
            </term>
            <listitem>
              <para>Uses <replaceable>ARG</replaceable> as the newer
              target (for use with <command>svn diff</command>).</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--no-auth-cache</option>
            </term>
            <listitem>
              <para>Prevents caching of authentication information
              (e.g. username and password) in the Subversion
              administrative directories.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--no-auto-props</option>
            </term>
            <listitem>
              <para>Disables auto-props, overriding the
              <literal>enable-auto-props</literal> directive in the
              <filename>config</filename> file.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--no-diff-deleted</option>
            </term>
            <listitem>
              <para>Prevents Subversion from printing differences for
              deleted files.  The default behavior when you remove a
              file is for <command>svn diff</command> to print the
              same differences that you would see if you had left
              the file but removed all the content.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--no-ignore</option>
            </term>
            <listitem>
              <para>Shows files in the status listing that would
              normally be omitted since they match a pattern in the
              <literal>global-ignores</literal> configuration option
              or the <literal>svn:ignore</literal> property.  See <xref linkend="svn.advanced.confarea.opts.config"/> and <xref linkend="svn.advanced.props.special.ignore"/> for more
              information.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--no-unlock</option>
            </term>
            <listitem>
              <para>Don't automatically unlock files (the default commit
              behavior is to unlock all files listed as part of the
              commit).  See <xref linkend="svn.advanced.locking"/> for
              more information.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--non-interactive</option>
            </term>
            <listitem>
              <para>In the case of an authentication failure, or
              insufficient credentials, prevents prompting for
              credentials (e.g. username or password).  This is useful
              if you're running Subversion inside of an automated
              script and it's more appropriate to have Subversion fail
              than to prompt for more information.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><option>--non-recursive</option> (<option>-N</option>)</term>
            <listitem>
              <para>Stops a subcommand from recursing into
              subdirectories.  Most subcommands recurse by default,
              but some subcommands&#x2014;usually those that have the
              potential to remove or undo your local
              modifications&#x2014;do not.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--notice-ancestry</option>
            </term>
            <listitem>
              <para>Pay attention to ancestry when calculating 
              differences.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--old</option>
              <replaceable>ARG</replaceable>
            </term>
            <listitem>
              <para>Uses <replaceable>ARG</replaceable> as the older
              target (for use with <command>svn diff</command>).</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--password</option>
              <replaceable>PASS</replaceable>
            </term>
            <listitem>
              <para>Indicates that you are providing your password for
              authentication on the command line&#x2014;otherwise, if
              it is needed, Subversion will prompt you for
              it.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><option>--quiet</option> (<option>-q</option>)</term>
            <listitem>
              <para>Requests that the client print only essential
              information while performing an operation.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><option>--recursive</option> (<option>-R</option>)</term>
            <listitem>
              <para>Makes a subcommand recurse into subdirectories.
              Most subcommands recurse by default.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--relocate</option>
              <replaceable>FROM TO
          [PATH...]</replaceable>
            </term>
            <listitem>
              <para>Used with the <command>svn switch</command>
              subcommand, changes the location of the repository that
              your working copy references.  This is useful if the
              location of your repository changes and you have an
              existing working copy that you'd like to continue to
              use.  See <command>svn switch</command> for an
              example.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><option>--revision</option> (<option>-r</option>)
            <replaceable>REV</replaceable>
          </term>
            <listitem>
              <para>Indicates that you're going to supply a revision (or
              range of revisions) for a particular operation.  You can
              provide revision numbers, revision keywords or dates (in
              curly braces), as arguments to the revision option.  If
              you wish to provide a range of revisions, you can
              provide two revisions separated by a colon.  For
              example:</para>
              <screen>
$ svn log -r 1729
$ svn log -r 1729:HEAD
$ svn log -r 1729:1744
$ svn log -r {2001-12-04}:{2002-02-17}
$ svn log -r 1729:{2002-02-17}
</screen>
              <para>See <xref linkend="svn.tour.revs.keywords"/> for more
              information.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--revprop</option>
            </term>
            <listitem>
              <para>Operates on a revision property instead of a
              property specific to a file or directory.  This option
              requires that you also pass a revision with the
              <option>--revision</option> (<option>-r</option>)
              option.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><option>--show-updates</option> (<option>-u</option>)</term>
            <listitem>
              <para>Causes the client to display information about
              which files in your working copy are out-of-date.
              This doesn't actually update any of your
              files&#x2014;it just shows you which files will be
              updated if you run <command>svn update</command>.
            </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--stop-on-copy</option>
            </term>
            <listitem>
              <para>Causes a Subversion subcommand which is traversing
              the history of a versioned resource to stop harvesting
              that historical information when a copy&#x2014;that is, a
              location in history where that resource was copied from
              another location in the repository&#x2014;is
              encountered.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--strict</option>
            </term>
            <listitem>
              <para>Causes Subversion to use strict semantics, a notion
              which is rather vague unless talking about specific
              subcommands (namely, <command>svn propget</command>).</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--targets</option>
              <replaceable>FILENAME</replaceable>
            </term>
            <listitem>
              <para>Tells Subversion to get the list of files that you
              wish to operate on from the filename you provide
              instead of listing all the files on the command line.
            </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--username</option>
              <replaceable>NAME</replaceable>
            </term>
            <listitem>
              <para>Indicates that you are providing your username for
              authentication on the command line&#x2014;otherwise, if
              it is needed, Subversion will prompt you for
              it.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><option>--verbose</option> (<option>-v</option>)</term>
            <listitem>
              <para>Requests that the client print out as much
              information as it can while running any subcommand.
              This may result in Subversion printing out additional
              fields, detailed information about every file, or
              additional information regarding its actions.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--version</option>
            </term>
            <listitem>
              <para>Prints the client version info.  This information
              not only includes the version number of the client,
              but also a listing of all repository access modules
              that the client can use to access a Subversion
              repository.  With <option>--quiet</option>
              (<option>-q</option>) it prints only the version number
              in a compact form.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--xml</option>
            </term>
            <listitem>
              <para>Prints output in XML format.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.ref.svn.c">
        <info>
          <title><command>svn</command> Subcommands</title>
        </info>
        <para>Here are the various subcommands:</para>
        <refentry xml:id="svn.ref.svn.c.add">
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>add</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svn add</refname>
            <refpurpose>Add files, directories, or symbolic links.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svn add PATH...</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Schedule files, directories, or symbolic links in your
            working copy for addition to the repository.  They will be
            uploaded and added to the repository on your next commit.
            If you add something and change your mind before
            committing, you can unschedule the addition using
            <command>svn revert</command>.
          </para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>None</para>
          </refsection>
          <refsection>
            <info>
              <title>Changes</title>
            </info>
            <para>Working Copy</para>
          </refsection>
          <refsection>
            <info>
              <title>Accesses Repository</title>
            </info>
            <para>No</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--targets FILENAME
--non-recursive (-N)
--quiet (-q)
--config-dir DIR
--no-ignore
--auto-props
--no-auto-props
--force
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>To add a file to your working copy:</para>
            <screen>
$ svn add foo.c 
A         foo.c
</screen>
            <para>When adding a directory, the default behavior of
            <command>svn add</command> is to recurse:</para>
            <screen>
$ svn add testdir
A         testdir
A         testdir/a
A         testdir/b
A         testdir/c
A         testdir/d
</screen>
            <para>You can add a directory without adding its
            contents:</para>
            <screen>
$ svn add --non-recursive otherdir
A         otherdir
</screen>
            <para>Normally, the command <command>svn add *</command>
            will skip over any directories that are already under
            version control.  Sometimes, however, you may want to add
            every unversioned object in your working copy, including
            those hiding deeper down.  Passing the
            <option>--force</option> option makes <command>svn
            add</command> recurse into versioned directories:
          </para>
            <screen>
$ svn add * --force
A         foo.c
A         somedir/bar.c
A         otherdir/docs/baz.doc
&#x2026;
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svn.c.blame">
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>blame</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svn blame</refname>
            <refpurpose>Show author and revision information in-line
            for the specified files or URLs.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svn blame TARGET[@REV]...</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Show author and revision information in-line for the
            specified files or URLs.  Each line of text is annotated
            at the beginning with the author (username) and the
            revision number for the last change to that line.</para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>praise, annotate, ann</para>
          </refsection>
          <refsection>
            <info>
              <title>Changes</title>
            </info>
            <para>Nothing</para>
          </refsection>
          <refsection>
            <info>
              <title>Accesses Repository</title>
            </info>
            <para>Yes</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--revision (-r) ARG
--verbose (-v)
--incremental
--xml
--extensions (-x) ARG
--force
--username ARG
--password ARG
--no-auth-cache
--non-interactive
--config-dir ARG
</screen>
            <!--

TODO(fitz): doc this:
  - -incremental            : give output suitable for concatenation
  - -xml                    : output in XML
  -x [- -extensions] arg    : Default: '-u'. When Subversion is invoking an
                             external diff program, ARG is simply passed along
                             to the program. But when Subversion is using its
                             default internal diff implementation, or when
                             Subversion is displaying blame annotations, ARG
                             could be any of the following:
                                -u (- -unified):
                                   Output 3 lines of unified context.
                                -b (- -ignore-space-change):
                                   Ignore changes in the amount of white space.
                                -w (- -ignore-all-space):
                                   Ignore all white space.
                                - -ignore-eol-style:
                                   Ignore changes in EOL style
  - -force                  : force operation to run

-->
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>If you want to see blame annotated source for
            <filename>readme.txt</filename> in your test
            repository:</para>
            <screen>
$ svn blame http://svn.red-bean.com/repos/test/readme.txt
     3      sally This is a README file.
     5      harry You should read this.
</screen>
            <para>Even if <command>svn blame</command> says that Harry
            last modified readme.txt in revision 5, you'll have to
            examine exactly what the revision changed to be sure that
            Harry changed the <emphasis>context</emphasis> of the
            line&#x2014;he may have just adjusted the whitespace.
          </para>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svn.c.cat">
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>cat</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svn cat</refname>
            <refpurpose>Output the contents of the specified files or
            URLs.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svn cat TARGET[@REV]...</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Output the contents of the specified files or URLs.
            For listing the contents of directories, see <command>svn
            list</command>.</para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>None</para>
          </refsection>
          <refsection>
            <info>
              <title>Changes</title>
            </info>
            <para>Nothing</para>
          </refsection>
          <refsection>
            <info>
              <title>Accesses Repository</title>
            </info>
            <para>Yes</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--revision (-r) REV
--username USER
--password PASS
--no-auth-cache
--non-interactive
--config-dir DIR
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>If you want to view readme.txt in your repository
            without checking it out:</para>
            <screen>
$ svn cat http://svn.red-bean.com/repos/test/readme.txt
This is a README file.
You should read this.
</screen>
            <tip>
              <para>If your working copy is out of date (or you have
              local modifications) and you want to see the
              <literal>HEAD</literal> revision of a file in your
              working copy, <command>svn cat -r HEAD</command> will
              automatically fetch the <literal>HEAD</literal> revision
              when you give it a path:</para>
            </tip>
            <screen>
$ cat foo.c
This file is in my local working copy 
and has changes that I've made.

$ svn cat -r HEAD foo.c
Latest revision fresh from the repository!
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svn.c.checkout">
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>checkout</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svn checkout</refname>
            <refpurpose>Check out a working copy from a repository.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svn checkout URL[@REV]... [PATH]</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Check out a working copy from a repository.  If
            <replaceable>PATH</replaceable> is omitted, the
            basename of the URL will be used as the destination.
            If multiple URLs are given each will be checked out into a
            subdirectory of <replaceable>PATH</replaceable>, with the
            name of the subdirectory being the basename of the
            URL.</para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>co</para>
          </refsection>
          <refsection>
            <info>
              <title>Changes</title>
            </info>
            <para>Creates a working copy.</para>
          </refsection>
          <refsection>
            <info>
              <title>Accesses Repository</title>
            </info>
            <para>Yes</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--revision (-r) REV
--quiet (-q)
--non-recursive (-N)
--username USER
--password PASS
--no-auth-cache
--non-interactive
--ignore-externals
--config-dir DIR
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>Check out a working copy into a directory called
            <filename>mine</filename>:</para>
            <screen>
$ svn checkout file:///var/svn/repos/test mine
A  mine/a
A  mine/b
Checked out revision 2.
$ ls
mine
</screen>
            <para>Check out two different directories into two separate
            working copies:</para>
            <screen>
$ svn checkout file:///var/svn/repos/test  file:///var/svn/repos/quiz
A  test/a
A  test/b
Checked out revision 2.
A  quiz/l
A  quiz/m
Checked out revision 2.
$ ls
quiz  test
</screen>
            <para>Check out two different directories into two separate
            working copies, but place both into a directory called
            <filename>working-copies</filename>:</para>
            <screen>
$ svn checkout file:///var/svn/repos/test  file:///var/svn/repos/quiz working-copies
A  working-copies/test/a
A  working-copies/test/b
Checked out revision 2.
A  working-copies/quiz/l
A  working-copies/quiz/m
Checked out revision 2.
$ ls
working-copies
</screen>
            <para>If you interrupt a checkout (or something else
            interrupts your checkout, like loss of connectivity, etc.),
            you can restart it either by issuing the
            identical checkout command again, or by updating the
            incomplete working copy:</para>
            <screen>
$ svn checkout file:///var/svn/repos/test test
A  test/a
A  test/b
^C
svn: The operation was interrupted
svn: caught SIGINT

$ svn checkout file:///var/svn/repos/test test
A  test/c
A  test/d
^C
svn: The operation was interrupted
svn: caught SIGINT

$ cd test
$ svn update
A  test/e
A  test/f
Updated to revision 3.
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svn.c.cleanup">
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>cleanup</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svn cleanup</refname>
            <refpurpose>Recursively clean up the working copy.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svn cleanup [PATH...]</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Recursively clean up the working copy, removing
            working copy locks and resuming unfinished operations.
            If you ever get a <quote>working copy locked</quote> error,
            run this command to remove stale locks and get your working copy
            into a usable state again.</para>
            <para>If, for some reason, an <command>svn update</command>
            fails due to a problem running an external diff program
            (e.g. user input or network failure), pass the
            <option>--diff3-cmd</option> to allow cleanup to complete
            any merging with your external diff program.  You can also
            specify any configuration directory with the
            <option>--config-dir</option> option, but you should need
            these options extremely infrequently.</para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>None</para>
          </refsection>
          <refsection>
            <info>
              <title>Changes</title>
            </info>
            <para>Working copy</para>
          </refsection>
          <refsection>
            <info>
              <title>Accesses Repository</title>
            </info>
            <para>No</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--diff3-cmd CMD
--config-dir DIR
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>Well, there's not much to the examples here as
            <command>svn cleanup</command> generates no output.  If
            you pass no <replaceable>PATH</replaceable>,
            <quote><filename>.</filename></quote> is used.</para>
            <screen>
$ svn cleanup

$ svn cleanup /var/svn/working-copy
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svn.c.commit">
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>commit</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svn commit</refname>
            <refpurpose>Send changes from your working copy to the repository.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svn commit [PATH...]</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Send changes from your working copy to the
            repository.  If you do not supply a log message with your
            commit by using either the <option>--file</option> or
            <option>--message</option> option,
            <command>svn</command> will launch your editor for you
            to compose a commit message.  See the
            <literal>editor-cmd</literal> section in <xref linkend="svn.advanced.confarea.opts.config"/>.</para>
            <para><command>svn commit</command> will send any lock
            tokens that it finds and will release locks on all
            <replaceable>PATHS</replaceable> committed (recursively),
            unless <option>--no-unlock</option> is passed.</para>
            <tip>
              <para>If you begin a commit and Subversion launches your
              editor to compose the commit message, you can still
              abort without committing your changes.  If you want to
              cancel your commit, just quit your editor without saving
              your commit message and Subversion will prompt you to
              either abort the commit, continue with no message, or
              edit the message again.</para>
            </tip>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>ci (short for <quote>check in</quote>; not 
            <quote>co</quote>, which is short for 
            <quote>checkout</quote>)</para>
          </refsection>
          <refsection>
            <info>
              <title>Changes</title>
            </info>
            <para>Working copy, repository</para>
          </refsection>
          <refsection>
            <info>
              <title>Accesses Repository</title>
            </info>
            <para>Yes</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--message (-m) TEXT
--file (-F) FILE
--quiet (-q)
--no-unlock
--non-recursive (-N)
--targets FILENAME
--force-log
--username USER
--password PASS
--no-auth-cache
--non-interactive
--encoding ENC
--config-dir DIR
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>Commit a simple modification to a file with the
            commit message on the command line and an implicit
            target of your current directory
            (<quote><filename>.</filename></quote>):</para>
            <screen>
$ svn commit -m "added howto section."
Sending        a
Transmitting file data .
Committed revision 3.
</screen>
            <para>Commit a modification to the file
            <filename>foo.c</filename> (explicitly specified on the
            command line) with the commit message in a file named
            <literal>msg</literal>:</para>
            <screen>
$ svn commit -F msg foo.c
Sending        foo.c
Transmitting file data .
Committed revision 5.
</screen>
            <para>If you want to use a file that's under version
            control for your commit message with
            <option>--file</option>, you need to pass the
            <option>--force-log</option> option:</para>
            <screen>
$ svn commit --file file_under_vc.txt foo.c
svn: The log message file is under version control
svn: Log message file is a versioned file; use '--force-log' to override

$ svn commit --force-log --file file_under_vc.txt foo.c
Sending        foo.c
Transmitting file data .
Committed revision 6.
</screen>
            <para>To commit a file scheduled for deletion:</para>
            <screen>
$ svn commit -m "removed file 'c'."
Deleting       c

Committed revision 7.
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svn.c.copy">
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>copy</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svn copy</refname>
            <refpurpose>Copy a file or directory in a working copy or
            in the repository.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svn copy SRC[@REV]... DST</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Copy one or more files in a working copy or in the repository.
            <replaceable>SRC</replaceable> and
            <replaceable>DST</replaceable> can each be either a
            working copy (WC) path or URL:</para>
            <variablelist>
              <varlistentry>
                <term>WC  -&gt; WC</term>
                <listitem>
                  <para>Copy and schedule an item for
                    addition (with history).</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>WC  -&gt; URL</term>
                <listitem>
                  <para>Immediately commit a copy of WC to URL.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>URL -&gt; WC</term>
                <listitem>
                  <para>Check out URL into WC, and schedule it for
                    addition.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>URL -&gt; URL</term>
                <listitem>
                  <para>Complete server-side copy.  This is
                    usually used to branch and tag.</para>
                </listitem>
              </varlistentry>
            </variablelist>
            <para>When copying multiple sources, they will be added as
            children of <replaceable>DST</replaceable>, which must be
            a directory.</para>
            <para>If no peg revision (ie
            <replaceable>@REV</replaceable>) is supplied, by default
            the <literal>BASE</literal> revision will be used for
            files copied from the working copy, while the
            <literal>HEAD</literal> revision will be used for files
            copied from a URL.</para>
            <note>
              <para>You can only copy files within a single repository.
              Subversion does not support cross-repository copying.</para>
            </note>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>cp</para>
          </refsection>
          <refsection>
            <info>
              <title>Changes</title>
            </info>
            <para>Repository if destination is a URL.</para>
            <para>Working copy if destination is a WC path.</para>
          </refsection>
          <refsection>
            <info>
              <title>Accesses Repository</title>
            </info>
            <para>If source or destination is in the repository, or if needed
            to look up the source revision number.</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--message (-m) TEXT
--file (-F) FILE
--revision (-r) REV
--quiet (-q)
--username USER
--password PASS
--no-auth-cache
--non-interactive
--force-log
--editor-cmd EDITOR
--encoding ENC
--config-dir DIR
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>Copy an item within your working copy (just
            schedules the copy&#x2014;nothing goes into the repository
            until you commit):</para>
            <screen>
$ svn copy foo.txt bar.txt
A         bar.txt
$ svn status
A  +   bar.txt
</screen>
            <para>Copy several files in a working copy into a
            subdirectory:</para>
            <screen>
$ svn cp bat.c baz.c qux.c src
A         src/bat.c
A         src/baz.c
A         src/qux.c
</screen>
            <para>Copy revision 8 of <literal>bat.c</literal> into your
            working copy under a different name:</para>
            <screen>
$ svn cp bat.c ya-old-bat.c
A         ya-old-bat.c
</screen>
            <para>Copy an item in your working copy to a URL in the
            repository (an immediate commit, so you must supply a
            commit message):</para>
            <screen>
$ svn copy near.txt file:///var/svn/repos/test/far-away.txt -m "Remote copy."

Committed revision 8.
</screen>
            <para>Copy an item from the repository to your working
            copy (just schedules the copy&#x2014;nothing goes into the
            repository until you commit):</para>
            <tip>
              <para>This is the recommended way to resurrect a dead
              file in your repository!</para>
            </tip>
            <screen>
$ svn copy file:///var/svn/repos/test/far-away near-here
A         near-here
</screen>
            <para>And finally, copying between two URLs:</para>
            <screen>
$ svn copy file:///var/svn/repos/test/far-away file:///var/svn/repos/test/over-there -m "remote copy."

Committed revision 9.
</screen>
            <tip>
              <para>This is the easiest way to <quote>tag</quote> a
              revision in your repository&#x2014;just <command>svn
              copy</command> that revision (usually
              <literal>HEAD</literal>) into your tags directory.</para>
            </tip>
            <screen>
$ svn copy file:///var/svn/repos/test/trunk file:///var/svn/repos/test/tags/0.6.32-prerelease -m "tag tree"

Committed revision 12.
</screen>
            <para>And don't worry if you forgot to tag&#x2014;you can
            always specify an older revision and tag anytime:</para>
            <screen>
$ svn copy -r 11 file:///var/svn/repos/test/trunk file:///var/svn/repos/test/tags/0.6.32-prerelease -m "Forgot to tag at rev 11"

Committed revision 13.
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svn.c.delete">
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>delete</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svn delete</refname>
            <refpurpose>Delete an item from a working copy
            or the repository.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svn delete PATH...</programlisting>
            <programlisting>svn delete URL...</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Items specified by <replaceable>PATH</replaceable> are scheduled
            for deletion upon the next commit.  Files (and
            directories that have not been committed) are
            immediately removed from the working copy.  The command
            will not remove any unversioned or modified items; use
            the <option>--force</option> option to override this
            behavior.</para>
            <para>Items specified by URL are deleted from
            the repository via an immediate commit.  Multiple URLs are
            committed atomically.</para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>del, remove, rm</para>
          </refsection>
          <refsection>
            <info>
              <title>Changes</title>
            </info>
            <para>Working copy if operating on files, repository if
            operating on URLs</para>
          </refsection>
          <refsection>
            <info>
              <title>Accesses Repository</title>
            </info>
            <para>Only if operating on URLs</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--force
--force-log
--message (-m) TEXT
--file (-F) FILE
--quiet (-q)
--targets FILENAME
--username USER
--password PASS
--no-auth-cache
--non-interactive
--editor-cmd EDITOR
--encoding ENC
--config-dir DIR
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>Using <command>svn</command> to delete a file from
            your working copy deletes your local copy of the file, but
            merely schedules it to be deleted from the repository.
            When you commit, the file is deleted in the
            repository.</para>
            <screen>
$ svn delete myfile
D         myfile

$ svn commit -m "Deleted file 'myfile'."
Deleting       myfile
Transmitting file data .
Committed revision 14.
</screen>
            <para>Deleting a URL, however, is immediate, so you have
            to supply a log message:</para>
            <screen>
$ svn delete -m "Deleting file 'yourfile'" file:///var/svn/repos/test/yourfile

Committed revision 15.
</screen>
            <para>Here's an example of how to force deletion of a file
            that has local mods:</para>
            <screen>
$ svn delete over-there 
svn: Attempting restricted operation for modified resource
svn: Use --force to override this restriction
svn: 'over-there' has local modifications

$ svn delete --force over-there 
D         over-there
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svn.c.diff">
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>diff</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svn diff</refname>
            <refpurpose>Display the differences between two revisions or paths.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>diff [-c M | -r N[:M]] [TARGET[@REV]...]</programlisting>
            <programlisting>diff [-r N[:M]] --old=OLD-TGT[@OLDREV] [--new=NEW-TGT[@NEWREV]] [PATH...]</programlisting>
            <programlisting>diff OLD-URL[@OLDREV] NEW-URL[@NEWREV]</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Display the differences between two paths.  The ways
            you can use <command>svn diff</command> are:</para>
            <para>Use just <command>svn diff'</command>to display local
            modifications in a working copy.</para>
            <para>Display the changes made to
            <replaceable>TARGET</replaceable>s as they are seen in
            <replaceable>REV</replaceable> between two revisions.
            <replaceable>TARGET</replaceable>s may be all working copy
            paths or all <replaceable>URL</replaceable>s.  If
            <replaceable>TARGET</replaceable>s are working copy paths,
            <replaceable>N</replaceable> defaults to
            <literal>BASE</literal> and <replaceable>M</replaceable>
            to the working copy; if <replaceable>URL</replaceable>s,
            <replaceable>N</replaceable> must be specified and
            <replaceable>M</replaceable> defaults to
            <literal>HEAD</literal>.  The <quote>-c M</quote> option
            is equivalent to <quote>-r N:M</quote> where <literal>N =
            M-1</literal>.  Using <quote>-c -M</quote> does the
            reverse: <quote>-r M:N</quote> where <literal>N =
            M-1</literal>.</para>
            <para>Display the differences between
            <replaceable>OLD-TGT</replaceable> as it was seen in
            <replaceable>OLDREV</replaceable> and
            <replaceable>NEW-TGT</replaceable> as it was seen ain
            <replaceable>NEWREV</replaceable>.
            <replaceable>PATH</replaceable>s, if given, are relative
            to <replaceable>OLD-TGT</replaceable> and
            <replaceable>NEW-TGT</replaceable> and restrict the output
            to differences for those paths.
            <replaceable>OLD-TGT</replaceable> and
            <replaceable>NEW-TGT</replaceable> may be working copy
            paths or <replaceable>URL[@REV]</replaceable>.
            <replaceable>NEW-TGT</replaceable> defaults to
            <replaceable>OLD-TGT</replaceable> if not specified.
            <quote>-r N</quote> makes OLDREV default to N, -r N:M
            makes <replaceable>OLDREV</replaceable> default to
            <replaceable>N</replaceable> and
            <replaceable>NEWREV</replaceable> default to
            <replaceable>M</replaceable>.</para>
            <para>Shorthand for <command>svn diff --old=OLD-URL[@OLDREV]
            --new=NEW-URL[@NEWREV]</command></para>
            <para><command>svn diff -r N:M URL</command> is shorthand
            for <command>svn diff -r N:M --old=URL
            --new=URL</command>.</para>
            <para><command>svn diff [-r N[:M]] URL1[@N]
            URL2[@M]</command> is shorthand for <command>svn diff [-r
            N[:M]] --old=URL1 --new=URL2</command>.</para>
            <para>If <replaceable>TARGET</replaceable> is a URL, then
            revs N and M can be given either via the
            <option>--revision</option> or by using
            <quote>@</quote> notation as described earlier.</para>
            <para>If <replaceable>TARGET</replaceable> is a working copy
            path, then the <option>--revision</option> option
            means:</para>
            <variablelist>
              <varlistentry>
                <term>
                  <option>--revision N:M</option>
                </term>
                <listitem>
                  <para>The server compares
                  <replaceable>TARGET</replaceable>@<replaceable>N</replaceable>
                  and
                  <replaceable>TARGET</replaceable>@<replaceable>M</replaceable>.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>
                  <option>--revision N</option>
                </term>
                <listitem>
                  <para>The client compares
                  <replaceable>TARGET</replaceable>@<replaceable>N</replaceable>
                  against working copy.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>(no <option>--revision</option>)</term>
                <listitem>
                  <para>The client compares base and working copies of
                  <replaceable>TARGET</replaceable>.</para>
                </listitem>
              </varlistentry>
            </variablelist>
            <para>If the alternate syntax is used, the server compares
            <replaceable>URL1</replaceable> and
            <replaceable>URL2</replaceable> at revisions
            <replaceable>N</replaceable> and
            <replaceable>M</replaceable> respectively.  If either
            <replaceable>N</replaceable> or
            <replaceable>M</replaceable> are omitted, a value of
            <literal>HEAD</literal> is assumed.</para>
            <para>By default, <command>svn diff</command> ignores the
            ancestry of files and merely compares the contents of the
            two files being compared.  If you use
            <option>--notice-ancestry</option>, the ancestry of the
            paths in question will be taken into consideration when
            comparing revisions (that is, if you run <command>svn
            diff</command> on two files with identical contents but
            different ancestry you will see the entire contents of the
            file as having been removed and added again).</para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>di</para>
          </refsection>
          <refsection>
            <info>
              <title>Changes</title>
            </info>
            <para>Nothing</para>
          </refsection>
          <refsection>
            <info>
              <title>Accesses Repository</title>
            </info>
            <para>For obtaining differences against anything but
            <literal>BASE</literal> revision in your working copy</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--revision (-r) ARG
--change (-c) ARG
--old ARG
--new ARG
--non-recursive (-N)
--diff-cmd CMD
--extensions (-x) "ARGS"
--no-diff-deleted
--notice-ancestry
--summarize
--force
--username USER
--password PASS
--no-auth-cache
--non-interactive
--config-dir DIR

</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>Compare <literal>BASE</literal> and your working copy
            (one of the most popular uses of <command>svn
            diff</command>):</para>
            <screen>
$ svn diff COMMITTERS 
Index: COMMITTERS
===================================================================
--- COMMITTERS	(revision 4404)
+++ COMMITTERS	(working copy)
</screen>
            <para>See what changed in the file
            <literal>COMMITTERS</literal> revision 9115:</para>
            <screen>
$ svn diff -c 9115 COMMITTERS 
Index: COMMITTERS
===================================================================
--- COMMITTERS	(revision 3900)
+++ COMMITTERS	(working copy)
</screen>
            <para>See how your working copy's modifications compare
            against an older revision:</para>
            <screen>
$ svn diff -r 3900 COMMITTERS 
Index: COMMITTERS
===================================================================
--- COMMITTERS	(revision 3900)
+++ COMMITTERS	(working copy)
</screen>
            <para>Compare revision 3000 to revision 3500 using <quote>@</quote>
            syntax:</para>
            <screen>
$ svn diff http://svn.collab.net/repos/svn/trunk/COMMITTERS@3000 http://svn.collab.net/repos/svn/trunk/COMMITTERS@3500
Index: COMMITTERS
===================================================================
--- COMMITTERS	(revision 3000)
+++ COMMITTERS	(revision 3500)
&#x2026;
</screen>
            <para>Compare revision 3000 to revision 3500 using range
            notation (you only pass the one URL in this
            case):</para>
            <screen>
$ svn diff -r 3000:3500 http://svn.collab.net/repos/svn/trunk/COMMITTERS
Index: COMMITTERS
===================================================================
--- COMMITTERS	(revision 3000)
+++ COMMITTERS	(revision 3500)
</screen>
            <para>Compare revision 3000 to revision 3500 of all files in
            <filename>trunk</filename> using range notation:</para>
            <screen>
$ svn diff -r 3000:3500 http://svn.collab.net/repos/svn/trunk
          </screen>
            <para>Compare revision 3000 to revision 3500 of only three
            files in <filename>trunk</filename> using range
            notation:</para>
            <screen>
$ svn diff -r 3000:3500 --old http://svn.collab.net/repos/svn/trunk COMMITTERS README HACKING
          </screen>
            <para>If you have a working copy, you can obtain the
            differences without typing in the long URLs:</para>
            <screen>
$ svn diff -r 3000:3500 COMMITTERS 
Index: COMMITTERS
===================================================================
--- COMMITTERS	(revision 3000)
+++ COMMITTERS	(revision 3500)
</screen>
            <para>Use <option>--diff-cmd</option>
            <replaceable>CMD</replaceable> <option>-x</option> to
            pass arguments directly to the external diff
            program</para>
            <screen>
$ svn diff --diff-cmd /usr/bin/diff -x "-i -b" COMMITTERS 
Index: COMMITTERS
===================================================================
0a1,2
&gt; This is a test
&gt; 
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svn.c.export">
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>export</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svn export</refname>
            <refpurpose>Export a clean directory tree.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svn export [-r REV] URL[@PEGREV] [PATH]</programlisting>
            <programlisting>svn export [-r REV] PATH1[@PEGREV] [PATH2]</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>The first form exports a clean directory tree from the
            repository specified by URL, at revision
            <replaceable>REV</replaceable> if it is given, otherwise
            at <literal>HEAD</literal>, into
            <replaceable>PATH</replaceable>.  If
            <replaceable>PATH</replaceable> is omitted, the last
            component of the <replaceable>URL</replaceable> is used
            for the local directory name.</para>
            <para>The second form exports a clean directory tree from
            the working copy specified by
            <replaceable>PATH1</replaceable> into
            <replaceable>PATH2</replaceable>.  All local changes will
            be preserved, but files not under version control will not
            be copied.</para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>None</para>
          </refsection>
          <refsection>
            <info>
              <title>Changes</title>
            </info>
            <para>Local disk</para>
          </refsection>
          <refsection>
            <info>
              <title>Accesses Repository</title>
            </info>
            <para>Only if exporting from a URL</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--revision (-r) REV
--quiet (-q)
--force
--username USER
--password PASS
--no-auth-cache
--non-interactive
--non-recursive (-N)
--config-dir DIR
--native-eol EOL
--ignore-externals
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>Export from your working copy (doesn't print every
            file and directory):</para>
            <screen>
$ svn export a-wc my-export
Export complete.
</screen>
            <para>Export directly from the repository (prints every
            file and directory):</para>
            <screen>
$ svn export file:///var/svn/repos my-export
A  my-export/test
A  my-export/quiz
&#x2026;
Exported revision 15.
</screen>
            <para>When rolling operating-system-specific release
            packages, it can be useful to export a tree which uses a
            specific EOL character for line endings.  The
            <option>--native-eol</option> option will do this, but it
            only affects files that have <literal>svn:eol-style =
            native</literal> properties attached to them.  For
            example, to export a tree with all CRLF line endings
            (possibly for a Windows .zip file distribution):</para>
            <screen>
$ svn export file:///var/svn/repos my-export --native-eol CRLF
A  my-export/test
A  my-export/quiz
&#x2026;
Exported revision 15.
</screen>
            <para>You can specify <literal>LR</literal>,
            <literal>CR</literal>, or <literal>CRLF</literal> as a
            line ending type with the <option>--native-eol</option>
            option.</para>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svn.c.help">
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>help</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svn help</refname>
            <refpurpose>Help!</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svn help [SUBCOMMAND...]</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>This is your best friend when you're using
            Subversion and this book isn't within reach!</para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>?, h</para>
            <para>The options <option>-?</option>, <option>-h</option>
            and <option>--help</option> have the same effect as using the
            <command>help</command> subcommand.</para>
          </refsection>
          <refsection>
            <info>
              <title>Changes</title>
            </info>
            <para>Nothing</para>
          </refsection>
          <refsection>
            <info>
              <title>Accesses Repository</title>
            </info>
            <para>No</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--config-dir DIR
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svn.c.import">
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>import</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svn import</refname>
            <refpurpose>Commit an unversioned file or tree into the 
            repository.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svn import [PATH] URL</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Recursively commit a copy of
            <replaceable>PATH</replaceable> to
            <replaceable>URL</replaceable>.  If
            <replaceable>PATH</replaceable> is omitted
            <quote><filename>.</filename></quote> is assumed.  Parent
            directories are created in the repository as
            necessary.</para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>None</para>
          </refsection>
          <refsection>
            <info>
              <title>Changes</title>
            </info>
            <para>Repository</para>
          </refsection>
          <refsection>
            <info>
              <title>Accesses Repository</title>
            </info>
            <para>Yes</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--message (-m) TEXT
--file (-F) FILE
--quiet (-q)
--non-recursive (-N)
--username USER
--password PASS
--no-auth-cache
--non-interactive
--force-log
--editor-cmd EDITOR
--encoding ENC
--config-dir DIR
--auto-props
--no-auto-props
--ignore-externals
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>This imports the local directory
            <filename>myproj</filename> into
            <filename>trunk/misc</filename> in your repository.  The
            directory <filename>trunk/misc</filename> need not exist
            before you import into it&#x2014;<command>svn
            import</command> will recursively create directories for
            you.</para>
            <screen>
$ svn import -m "New import" myproj http://svn.red-bean.com/repos/trunk/misc
Adding         myproj/sample.txt
&#x2026;
Transmitting file data .........
Committed revision 16.
</screen>
            <para>Be aware that this will <emphasis>not</emphasis>
            create a directory named <filename>myproj</filename> in
            the repository.  If that's what you want, simply add
            <filename>myproj</filename> to the end of the URL:</para>
            <screen>
$ svn import -m "New import" myproj http://svn.red-bean.com/repos/trunk/misc/myproj
Adding         myproj/sample.txt
&#x2026;
Transmitting file data .........
Committed revision 16.
</screen>
            <para>After importing data, note that the original tree is
            <emphasis>not</emphasis> under version control.  To start
            working, you still need to <command>svn checkout</command>
            a fresh working copy of the tree.</para>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svn.c.info">
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>info</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svn info</refname>
            <refpurpose>Display information about a local or remote 
            item.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svn info [TARGET[@REV]...]</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Print information about the working copy paths or
           URLs specified.  The information shown for both may
           include:</para>
            <itemizedlist>
              <listitem>
                <para>Path</para>
              </listitem>
              <listitem>
                <para>Name</para>
              </listitem>
              <listitem>
                <para>URL</para>
              </listitem>
              <listitem>
                <para>Repository Root</para>
              </listitem>
              <listitem>
                <para>Repository UUID</para>
              </listitem>
              <listitem>
                <para>Revision</para>
              </listitem>
              <listitem>
                <para>Node Kind</para>
              </listitem>
              <listitem>
                <para>Last Changed Author</para>
              </listitem>
              <listitem>
                <para>Last Changed Revision</para>
              </listitem>
              <listitem>
                <para>Last Changed Date</para>
              </listitem>
              <listitem>
                <para>Lock Token</para>
              </listitem>
              <listitem>
                <para>Lock Owner</para>
              </listitem>
              <listitem>
                <para>Lock Created (date)</para>
              </listitem>
              <listitem>
                <para>Lock Expires (date)</para>
              </listitem>
            </itemizedlist>
            <para>Additional kinds of information available only for
            working copy paths are:</para>
            <itemizedlist>
              <listitem>
                <para>Schedule</para>
              </listitem>
              <listitem>
                <para>Copied From URL</para>
              </listitem>
              <listitem>
                <para>Copied From Rev</para>
              </listitem>
              <listitem>
                <para>Text Last Updated</para>
              </listitem>
              <listitem>
                <para>Properties Last Updated</para>
              </listitem>
              <listitem>
                <para>Checksum</para>
              </listitem>
              <listitem>
                <para>Conflict Previous Base File</para>
              </listitem>
              <listitem>
                <para>Conflict Previous Working File</para>
              </listitem>
              <listitem>
                <para>Conflict Current Base File</para>
              </listitem>
              <listitem>
                <para>Conflict Properties File</para>
              </listitem>
            </itemizedlist>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>None</para>
          </refsection>
          <refsection>
            <info>
              <title>Changes</title>
            </info>
            <para>Nothing</para>
          </refsection>
          <refsection>
            <info>
              <title>Accesses Repository</title>
            </info>
            <para>Only if operating on URLs</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--revision (-r) REV
--recursive (-R)
--targets FILENAME
--incremental
--xml
--username USER
--password PASS
--no-auth-cache
--non-interactive
--config-dir DIR
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para><command>svn info</command> will show you all the
            useful information that it has for items in your working
            copy.  It will show information for files:</para>
            <screen>
$ svn info foo.c
Path: foo.c
Name: foo.c
URL: http://svn.red-bean.com/repos/test/foo.c
Repository Root: http://svn.red-bean.com/repos/test
Repository UUID: 5e7d134a-54fb-0310-bd04-b611643e5c25
Revision: 4417
Node Kind: file
Schedule: normal
Last Changed Author: sally
Last Changed Rev: 20
Last Changed Date: 2003-01-13 16:43:13 -0600 (Mon, 13 Jan 2003)
Text Last Updated: 2003-01-16 21:18:16 -0600 (Thu, 16 Jan 2003)
Properties Last Updated: 2003-01-13 21:50:19 -0600 (Mon, 13 Jan 2003)
Checksum: d6aeb60b0662ccceb6bce4bac344cb66
</screen>
            <para>It will also show information for directories:</para>
            <screen>
$ svn info vendors
Path: vendors
URL: http://svn.red-bean.com/repos/test/vendors
Repository Root: http://svn.red-bean.com/repos/test
Repository UUID: 5e7d134a-54fb-0310-bd04-b611643e5c25
Revision: 19
Node Kind: directory
Schedule: normal
Last Changed Author: harry
Last Changed Rev: 19
Last Changed Date: 2003-01-16 23:21:19 -0600 (Thu, 16 Jan 2003)
Properties Last Updated: 2003-01-16 23:39:02 -0600 (Thu, 16 Jan 2003)
</screen>
            <para><command>svn info</command> also acts on URLs (also
             note that the file readme.doc in this example is locked,
             so lock information is also provided):</para>
            <screen>
$ svn info http://svn.red-bean.com/repos/test/readme.doc
Path: readme.doc
Name: readme.doc
URL: http://svn.red-bean.com/repos/test/readme.doc
Repository Root: http://svn.red-bean.com/repos/test
Repository UUID: 5e7d134a-54fb-0310-bd04-b611643e5c25
Revision: 1
Node Kind: file
Schedule: normal
Last Changed Author: sally
Last Changed Rev: 42
Last Changed Date: 2003-01-14 23:21:19 -0600 (Tue, 14 Jan 2003)
Lock Token: opaquelocktoken:14011d4b-54fb-0310-8541-dbd16bd471b2
Lock Owner: harry
Lock Created: 2003-01-15 17:35:12 -0600 (Wed, 15 Jan 2003)
Lock Comment (1 line):
My test lock comment
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svn.c.list">
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>list</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svn list</refname>
            <refpurpose>List directory entries in the repository.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svn list [TARGET[@REV]...]</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>List each <replaceable>TARGET</replaceable> file and
            the contents of each <replaceable>TARGET</replaceable>
            directory as they exist in the repository.  If
            <replaceable>TARGET</replaceable> is a working copy path,
            the corresponding repository URL will be used.</para>
            <para>The default <replaceable>TARGET</replaceable> is
            <quote><filename>.</filename></quote>, meaning the
            repository URL of the current working copy
            directory.</para>
            <para>With <option>--verbose</option>, <command>svn
            list</command> shows the following fields for each
            item:</para>
            <itemizedlist>
              <listitem>
                <para>Revision number of the last
              commit</para>
              </listitem>
              <listitem>
                <para>Author of the last commit</para>
              </listitem>
              <listitem>
                <para>If locked, the letter <quote>O</quote> (See <xref linkend="svn.ref.svn.c.info"/> for details).</para>
              </listitem>
              <listitem>
                <para>Size (in bytes)</para>
              </listitem>
              <listitem>
                <para>Date and time of the last
              commit</para>
              </listitem>
            </itemizedlist>
            <para>With <option>--xml</option>, output is in XML format (with
            a header and an enclosing document element unless
            <option>--incremental</option> is also specified).  All of the
            information is present; the <option>--verbose</option> option
            is not accepted.</para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>ls</para>
          </refsection>
          <refsection>
            <info>
              <title>Changes</title>
            </info>
            <para>Nothing</para>
          </refsection>
          <refsection>
            <info>
              <title>Accesses Repository</title>
            </info>
            <para>Yes</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--revision (-r) REV
--verbose (-v)
--recursive (-R)
--incremental
--xml
--username USER
--password PASS
--no-auth-cache
--non-interactive
--config-dir DIR
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para><command>svn list</command> is most useful if you
            want to see what files a repository has without
            downloading a working copy:</para>
            <screen>
$ svn list http://svn.red-bean.com/repos/test/support
README.txt
INSTALL
examples/
&#x2026;
</screen>
            <para>You can pass the <option>--verbose</option> option for
            additional information, rather like the UNIX command
            <command>ls -l</command>:</para>
            <screen>
$ svn list --verbose file:///var/svn/repos
     16 sally         28361 Jan 16 23:18 README.txt
     27 sally             0 Jan 18 15:27 INSTALL
     24 harry               Jan 18 11:27 examples/
</screen>
            <para>For further details, see <xref linkend="svn.tour.history.browsing.list"/>.</para>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svn.c.lock">
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>lock</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svn lock</refname>
            <refpurpose>Lock working copy paths or URLs in the
              repository, so that no other user can commit changes to
              them.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svn lock TARGET...</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Lock each <replaceable>TARGET</replaceable>.  If any
            <replaceable>TARGET</replaceable> is already locked by
            another user, print a warning and continue locking the
            rest of the <replaceable>TARGET</replaceable>s.  Use
            <option>--force</option> to steal a lock from another user
            or working copy.</para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>None</para>
          </refsection>
          <refsection>
            <info>
              <title>Changes</title>
            </info>
            <para>Working Copy, Repository</para>
          </refsection>
          <refsection>
            <info>
              <title>Accesses Repository</title>
            </info>
            <para>Yes</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--targets FILENAME
--message (-m) TEXT
--file (-F) FILE
--force-log
--encoding ENC
--username USER
--password PASS
--no-auth-cache
--non-interactive
--config-dir DIR
--force
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>Lock two files in your working copy:</para>
            <screen>

$ svn lock tree.jpg house.jpg
'tree.jpg' locked by user 'harry'.
'house.jpg' locked by user 'harry'.
</screen>
            <para>Lock a file in your working copy that is currently
            locked by another user:</para>
            <screen>
$ svn lock tree.jpg
svn: warning: Path '/tree.jpg is already locked by user 'sally in \
     filesystem '/var/svn/repos/db'

$ svn lock --force tree.jpg
'tree.jpg' locked by user 'harry'.
</screen>
            <para>Lock a file without a working copy:</para>
            <screen>
$ svn lock http://svn.red-bean.com/repos/test/tree.jpg
'tree.jpg' locked by user 'harry'.
</screen>
            <para>For further details, see <xref linkend="svn.advanced.locking"/>.</para>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svn.c.log">
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>log</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svn log</refname>
            <refpurpose>Display commit log messages.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svn log [PATH]</programlisting>
            <programlisting>svn log URL [PATH...]</programlisting>
            <programlisting>svn log URL[@REV] [PATH...]</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Shows log messages from the repository.
            If no arguments are supplied, <command>svn
            log</command> shows the log messages for all files and
            directories inside of (and including) the current working
            directory of your working copy.  You can refine the
            results by specifying a path, one or more revisions, or
            any combination of the two.  The default revision range
            for a local path is <literal>BASE:1</literal>.</para>
            <para>If you specify a URL alone, then it prints log
            messages for everything that the URL contains.  If you
            add paths past the URL, only messages for those paths
            under that URL will be printed.  The default revision range
            for a URL is <literal>HEAD:1</literal>.</para>
            <para>With <option>--verbose</option>, <command>svn log</command>
            will also print all affected paths with each log message.
            With <option>--quiet</option>, <command>svn log</command>
            will not print the log message body itself (this is
            compatible with <option>--verbose</option>).</para>
            <para>Each log message is printed just once, even if more
            than one of the affected paths for that revision were
            explicitly requested.  Logs follow copy history by
            default.  Use <option>--stop-on-copy</option> to disable
            this behavior, which can be useful for determining branch
            points.</para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>None</para>
          </refsection>
          <refsection>
            <info>
              <title>Changes</title>
            </info>
            <para>Nothing</para>
          </refsection>
          <refsection>
            <info>
              <title>Accesses Repository</title>
            </info>
            <para>Yes</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--revision (-r) REV
--quiet (-q)
--verbose (-v)
--targets FILENAME
--stop-on-copy
--incremental
--limit NUM
--xml
--username USER
--password PASS
--no-auth-cache
--non-interactive
--config-dir DIR
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>You can see the log messages for all the paths that
            changed in your working copy by running <command>svn
            log</command> from the top:</para>
            <screen>
$ svn log
------------------------------------------------------------------------
r20 | harry | 2003-01-17 22:56:19 -0600 (Fri, 17 Jan 2003) | 1 line

Tweak.
------------------------------------------------------------------------
r17 | sally | 2003-01-16 23:21:19 -0600 (Thu, 16 Jan 2003) | 2 lines
&#x2026;
</screen>
            <para>Examine all log messages for a particular file in
            your working copy:</para>
            <screen>
$ svn log foo.c
------------------------------------------------------------------------
r32 | sally | 2003-01-13 00:43:13 -0600 (Mon, 13 Jan 2003) | 1 line

Added defines.
------------------------------------------------------------------------
r28 | sally | 2003-01-07 21:48:33 -0600 (Tue, 07 Jan 2003) | 3 lines
&#x2026;
</screen>
            <para>If you don't have a working copy handy, you can log
            a URL:</para>
            <screen>
$ svn log http://svn.red-bean.com/repos/test/foo.c
------------------------------------------------------------------------
r32 | sally | 2003-01-13 00:43:13 -0600 (Mon, 13 Jan 2003) | 1 line

Added defines.
------------------------------------------------------------------------
r28 | sally | 2003-01-07 21:48:33 -0600 (Tue, 07 Jan 2003) | 3 lines
&#x2026;
</screen>
            <para>If you want several distinct paths underneath the
            same URL, you can use the <literal>URL [PATH...]</literal>
            syntax.</para>
            <screen>
$ svn log http://svn.red-bean.com/repos/test/ foo.c bar.c
------------------------------------------------------------------------
r32 | sally | 2003-01-13 00:43:13 -0600 (Mon, 13 Jan 2003) | 1 line

Added defines.
------------------------------------------------------------------------
r31 | harry | 2003-01-10 12:25:08 -0600 (Fri, 10 Jan 2003) | 1 line

Added new file bar.c
------------------------------------------------------------------------
r28 | sally | 2003-01-07 21:48:33 -0600 (Tue, 07 Jan 2003) | 3 lines
&#x2026;
</screen>
            <para>When you're concatenating the results of multiple
            calls to the log command, you may want to use the
            <option>--incremental</option> option. <command>svn
            log</command> normally prints out a dashed line at the
            beginning of a log message, after each subsequent log
            message, and following the final log message.  If you
            ran <command>svn log</command> on a range of two
            revisions, you would get this:</para>
            <screen>
$ svn log -r 14:15
------------------------------------------------------------------------
r14 | &#x2026;

------------------------------------------------------------------------
r15 | &#x2026;

------------------------------------------------------------------------
</screen>
            <para>However, if you wanted to gather 2 non-sequential
            log messages into a file, you might do something like
            this:</para>
            <screen>
$ svn log -r 14 &gt; mylog
$ svn log -r 19 &gt;&gt; mylog
$ svn log -r 27 &gt;&gt; mylog
$ cat mylog
------------------------------------------------------------------------
r14 | &#x2026;

------------------------------------------------------------------------
------------------------------------------------------------------------
r19 | &#x2026;

------------------------------------------------------------------------
------------------------------------------------------------------------
r27 | &#x2026;

------------------------------------------------------------------------
</screen>
            <para>You can avoid the clutter of the double dashed lines
            in your output by using the incremental option:</para>
            <screen>
$ svn log --incremental -r 14 &gt; mylog
$ svn log --incremental -r 19 &gt;&gt; mylog
$ svn log --incremental -r 27 &gt;&gt; mylog
$ cat mylog
------------------------------------------------------------------------
r14 | &#x2026;

------------------------------------------------------------------------
r19 | &#x2026;

------------------------------------------------------------------------
r27 | &#x2026;
</screen>
            <para>The <option>--incremental</option> option provides
            similar output control when using the
            <option>--xml</option> option.</para>
            <tip>
              <para>If you run <command>svn log</command> on a specific
              path and provide a specific revision and get no output
              at all</para>
              <screen>
$ svn log -r 20 http://svn.red-bean.com/untouched.txt
------------------------------------------------------------------------
</screen>
              <para>That just means that the path was not modified in
              that revision.  If you log from the top of the
              repository, or know the file that changed in that
              revision, you can specify it explicitly:</para>
              <screen>
$ svn log -r 20 touched.txt 
------------------------------------------------------------------------
r20 | sally | 2003-01-17 22:56:19 -0600 (Fri, 17 Jan 2003) | 1 line

Made a change.
------------------------------------------------------------------------
</screen>
            </tip>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svn.c.merge">
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>merge</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svn merge</refname>
            <refpurpose>Apply the differences between two sources to a
          working copy path.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svn merge [-c M | -r N:M] SOURCE[@REV] [WCPATH]</programlisting>
            <programlisting>svn merge sourceURL1[@N] sourceURL2[@M] [WCPATH]</programlisting>
            <programlisting>svn merge sourceWCPATH1@N sourceWCPATH2@M [WCPATH]</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>In the first and second forms, the source paths (URLs
            in the first form, working copy paths in the second) are
            specified at revisions <replaceable>N</replaceable> and
            <replaceable>M</replaceable>.  These are the two sources
            to be compared.  The revisions default to
            <literal>HEAD</literal> if omitted.</para>
            <para>The <literal>-c M</literal> option is equivalent to
            <literal>-r N:M</literal> where <replaceable>N =
            M-1</replaceable>.  Using <literal>-c -M</literal> does
            the reverse: <literal>-r M:N</literal> where
            <replaceable>N = M-1</replaceable>.</para>
            <para>In the third form, <replaceable>SOURCE</replaceable>
            can be a URL or working copy item, in which case the
            corresponding URL is used.  This URL, at revisions
            <replaceable>N</replaceable> and
            <replaceable>M</replaceable>, defines the two sources to
            be compared.</para>
            <para><replaceable>WCPATH</replaceable> is the working copy
            path that will receive the changes.  If
            <replaceable>WCPATH</replaceable> is omitted, a default
            value of <quote><filename>.</filename></quote> is assumed,
            unless the sources have identical basenames that match a
            file within <quote><filename>.</filename></quote>: in which
            case, the differences will be applied to that file.</para>
            <para>Unlike <command>svn diff</command>, the merge command
            takes the ancestry of a file into consideration when
            performing a merge operation.  This is very important when
            you're merging changes from one branch into another and
            you've renamed a file on one branch but not the other.</para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>None</para>
          </refsection>
          <refsection>
            <info>
              <title>Changes</title>
            </info>
            <para>Working copy</para>
          </refsection>
          <refsection>
            <info>
              <title>Accesses Repository</title>
            </info>
            <para>Only if working with URLs</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--revision (-r) REV
--change (-c) REV
--non-recursive (-N)
--quiet (-q)
--force
--dry-run
--diff3-cmd CMD
--extensions (-x) ARG
--ignore-ancestry
--username USER
--password PASS
--no-auth-cache
--non-interactive
--config-dir DIR
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>Merge a branch back into the trunk (assuming that
            you have a working copy of the trunk, and that the branch
            was created in revision 250):</para>
            <screen>
$ svn merge -r 250:HEAD http://svn.red-bean.com/repos/branches/my-branch
U  myproj/tiny.txt
U  myproj/thhgttg.txt
U  myproj/win.txt
U  myproj/flo.txt
</screen>
            <para>If you branched at revision 23, and you want to
            merge changes on trunk into your branch, you could do
            this from inside the working copy of your branch:</para>
            <screen>
$ svn merge -r 23:30 file:///var/svn/repos/trunk/vendors
U  myproj/thhgttg.txt
&#x2026;
</screen>
            <para>To merge changes to a single file:</para>
            <screen>
$ cd myproj
$ svn merge -r 30:31 thhgttg.txt 
U  thhgttg.txt
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svn.c.mkdir">
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>mkdir</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svn mkdir</refname>
            <refpurpose>Create a new directory under version control.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svn mkdir PATH...</programlisting>
            <programlisting>svn mkdir URL...</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Create a directory with a name given by the final
            component of the <replaceable>PATH</replaceable> or URL.
            A directory specified by a working copy
            <replaceable>PATH</replaceable> is scheduled for addition
            in the working copy.  A directory specified by a URL is
            created in the repository via an immediate commit.
            Multiple directory URLs are committed atomically.  In both
            cases all the intermediate directories must already
            exist.</para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>None</para>
          </refsection>
          <refsection>
            <info>
              <title>Changes</title>
            </info>
            <para>Working copy, repository if operating on a URL</para>
          </refsection>
          <refsection>
            <info>
              <title>Accesses Repository</title>
            </info>
            <para>Only if operating on a URL</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--message (-m) TEXT
--file (-F) FILE
--quiet (-q)
--username USER
--password PASS
--no-auth-cache
--non-interactive
--editor-cmd EDITOR
--encoding ENC
--force-log
--config-dir DIR
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>Create a directory in your working copy:</para>
            <screen>
$ svn mkdir newdir
A         newdir
</screen>
            <para>Create one in the repository (instant commit, so a
            log message is required):</para>
            <screen>
$ svn mkdir -m "Making a new dir." http://svn.red-bean.com/repos/newdir

Committed revision 26.
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svn.c.move">
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>move</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svn move</refname>
            <refpurpose>Move a file or directory.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svn move SRC... DST</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>This command moves files or directories in your
            working copy or in the repository.</para>
            <tip>
              <para>This command is equivalent to an <command>svn
              copy</command> followed by <command>svn
              delete</command>.</para>
            </tip>
            <para>When moving multiple sources, they will be added as
            children of <replaceable>DST</replaceable>, which must be
            a directory.</para>
            <note>
              <para>Subversion does not support moving between working
              copies and URLs.  In addition, you can only move files
              within a single repository&#x2014;Subversion does not
              support cross-repository moving.</para>
            </note>
            <variablelist>
              <varlistentry>
                <term>WC  -&gt; WC</term>
                <listitem>
                  <para>Move and schedule a file or directory for
                  addition (with history).</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>URL -&gt; URL</term>
                <listitem>
                  <para>Complete server-side rename.</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>mv, rename, ren</para>
          </refsection>
          <refsection>
            <info>
              <title>Changes</title>
            </info>
            <para>Working copy, repository if operating on a URL</para>
          </refsection>
          <refsection>
            <info>
              <title>Accesses Repository</title>
            </info>
            <para>Only if operating on a URL</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--message (-m) TEXT
--file (-F) FILE
--revision (-r) REV (<emphasis>Deprecated</emphasis>)
--quiet (-q)
--force
--username USER
--password PASS
--no-auth-cache
--non-interactive
--editor-cmd EDITOR
--encoding ENC
--force-log
--config-dir DIR
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>Move a file in your working copy:</para>
            <screen>
$ svn move foo.c bar.c
A         bar.c
D         foo.c
</screen>
            <para>Move several files in your working copy into a subdirectory:</para>
            <screen>
$ svn move baz.c bat.c qux.c src
A         src/baz.c
D         baz.c
A         src/bat.c
D         bat.c
A         src/qux.c
D         qux.c
</screen>
            <para>Move a file in the repository (an immediate commit,
            so it requires a commit message):</para>
            <screen>
$ svn move -m "Move a file" http://svn.red-bean.com/repos/foo.c \
                            http://svn.red-bean.com/repos/bar.c

Committed revision 27.
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svn.c.propdel">
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>propdel</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svn propdel</refname>
            <refpurpose>Remove a property from an item.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svn propdel PROPNAME [PATH...]</programlisting>
            <programlisting>svn propdel PROPNAME --revprop -r REV [TARGET]</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>This removes properties from files, directories, or
            revisions.  The first form removes versioned properties in
            your working copy, while the second removes unversioned
            remote properties on a repository revision
            (<replaceable>TARGET</replaceable> only determines which
            repository to access).</para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>pdel, pd</para>
          </refsection>
          <refsection>
            <info>
              <title>Changes</title>
            </info>
            <para>Working copy, repository only if operating on a URL</para>
          </refsection>
          <refsection>
            <info>
              <title>Accesses Repository</title>
            </info>
            <para>Only if operating on a URL</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--quiet (-q)
--recursive (-R)
--revision (-r) REV
--revprop
--username USER
--password PASS
--no-auth-cache
--non-interactive
--config-dir DIR
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>Delete a property from a file in your working
            copy</para>
            <screen>
$ svn propdel svn:mime-type  some-script
property 'svn:mime-type' deleted from 'some-script'.
</screen>
            <para>Delete a revision property:</para>
            <screen>
$ svn propdel --revprop -r 26 release-date 
property 'release-date' deleted from repository revision '26'
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svn.c.propedit">
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>propedit</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svn propedit</refname>
            <refpurpose>Edit the property of one or more items under
            version control.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svn propedit PROPNAME PATH...</programlisting>
            <programlisting>svn propedit PROPNAME --revprop -r REV [TARGET]</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Edit one or more properties using your favorite
            editor.  The first form edits versioned properties in
            your working copy, while the second edits unversioned
            remote properties on a repository revision
            (<replaceable>TARGET</replaceable> only determines which
            repository to access).</para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>pedit, pe</para>
          </refsection>
          <refsection>
            <info>
              <title>Changes</title>
            </info>
            <para>Working copy, repository only if operating on a URL</para>
          </refsection>
          <refsection>
            <info>
              <title>Accesses Repository</title>
            </info>
            <para>Only if operating on a URL</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--revision (-r) REV
--revprop
--username USER
--password PASS
--no-auth-cache
--non-interactive
--encoding ENC
--editor-cmd EDITOR
--config-dir DIR
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para><command>svn propedit</command> makes it easy to
            modify properties that have multiple values:</para>
            <screen>
$ svn propedit svn:keywords  foo.c 
    &lt;svn will launch your favorite editor here, with a buffer open
    containing the current contents of the svn:keywords property.  You
    can add multiple values to a property easily here by entering one
    value per line.&gt;
Set new value for property 'svn:keywords' on 'foo.c'
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svn.c.propget">
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>propget</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svn propget</refname>
            <refpurpose>Print the value of a property.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svn propget PROPNAME [TARGET[@REV]...]</programlisting>
            <programlisting>svn propget PROPNAME --revprop -r REV [URL]</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Print the value of a property on files,
            directories, or revisions.  The first form prints the
            versioned property of an item or items in your working
            copy, while the second prints unversioned remote
            property on a repository revision.  See <xref linkend="svn.advanced.props"/> for more information on
            properties.</para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>pget, pg</para>
          </refsection>
          <refsection>
            <info>
              <title>Changes</title>
            </info>
            <para>Working copy, repository only if operating on a URL</para>
          </refsection>
          <refsection>
            <info>
              <title>Accesses Repository</title>
            </info>
            <para>Only if operating on a URL</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--recursive (-R)
--revision (-r) REV
--revprop
--strict
--username USER
--password PASS
--no-auth-cache
--non-interactive
--config-dir DIR
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>Examine a property of a file in your working
            copy:</para>
            <screen>
$ svn propget svn:keywords foo.c
Author
Date
Rev
</screen>
            <para>The same goes for a revision property:</para>
            <screen>
$ svn propget svn:log --revprop -r 20 
Began journal.
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svn.c.proplist">
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>proplist</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svn proplist</refname>
            <refpurpose>List all properties.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svn proplist [TARGET[@REV]...]</programlisting>
            <programlisting>svn proplist --revprop -r REV [TARGET]</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>List all properties on files, directories, or
            revisions.  The first form lists versioned properties in
            your working copy, while the second lists unversioned remote
            properties on a repository revision
            (<replaceable>TARGET</replaceable> only determines which
            repository to access).</para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>plist, pl</para>
          </refsection>
          <refsection>
            <info>
              <title>Changes</title>
            </info>
            <para>Working copy, repository only if operating on a URL</para>
          </refsection>
          <refsection>
            <info>
              <title>Accesses Repository</title>
            </info>
            <para>Only if operating on a URL</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--verbose (-v)
--recursive (-R)
--revision (-r) REV
--quiet (-q)
--revprop
--username USER
--password PASS
--no-auth-cache
--non-interactive
--config-dir DIR
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>You can use proplist to see the properties on an
            item in your working copy:</para>
            <screen>
$ svn proplist foo.c
Properties on 'foo.c':
  svn:mime-type
  svn:keywords
  owner
</screen>
            <para>But with the <option>--verbose</option> flag, svn
            proplist is extremely handy as it also shows you the
            values for the properties:</para>
            <screen>
$ svn proplist --verbose foo.c
Properties on 'foo.c':
  svn:mime-type : text/plain
  svn:keywords : Author Date Rev
  owner : sally
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svn.c.propset">
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>propset</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svn propset</refname>
            <refpurpose>Set PROPNAME to PROPVAL on files, directories, or revisions.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svn propset PROPNAME [PROPVAL | -F VALFILE] PATH...</programlisting>
            <programlisting>svn propset PROPNAME --revprop -r REV [PROPVAL | -F VALFILE] [TARGET]</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Set <replaceable>PROPNAME</replaceable> to
            <replaceable>PROPVAL</replaceable> on files, directories,
            or revisions.  The first example creates a versioned, local
            property change in the working copy, and the second
            creates an unversioned, remote property change on a
            repository revision
            (<replaceable>TARGET</replaceable> only determines which
            repository to access).</para>
            <tip>
              <para>Subversion has a number of <quote>special</quote>
              properties that affect its behavior.  See <xref linkend="svn.ref.properties"/> for more on these
              properties.</para>
            </tip>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>pset, ps</para>
          </refsection>
          <refsection>
            <info>
              <title>Changes</title>
            </info>
            <para>Working copy, repository only if operating on a URL</para>
          </refsection>
          <refsection>
            <info>
              <title>Accesses Repository</title>
            </info>
            <para>Only if operating on a URL</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--file (-F) FILE
--quiet (-q)
--revision (-r) REV
--targets FILENAME
--recursive (-R)
--revprop
--username USER
--password PASS
--no-auth-cache
--non-interactive
--encoding ENC
--force
--config-dir DIR
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>Set the mime type on a file:</para>
            <screen>
$ svn propset svn:mime-type image/jpeg foo.jpg 
property 'svn:mime-type' set on 'foo.jpg'
</screen>
            <para>On a UNIX system, if you want a file to have the
            executable permission set:</para>
            <screen>
$ svn propset svn:executable ON somescript
property 'svn:executable' set on 'somescript'
</screen>
            <para>Perhaps you have an internal policy to set certain
            properties for the benefit of your coworkers:</para>
            <screen>
$ svn propset owner sally foo.c
property 'owner' set on 'foo.c'
</screen>
            <para>If you made a mistake in a log message for a
            particular revision and want to change it, use
            <option>--revprop</option> and set <literal>svn:log</literal>
            to the new log message:</para>
            <screen>
$ svn propset --revprop -r 25 svn:log "Journaled about trip to New York."
property 'svn:log' set on repository revision '25'
</screen>
            <para>Or, if you don't have a working copy, you can
            provide a URL.</para>
            <screen>
$ svn propset --revprop -r 26 svn:log "Document nap." http://svn.red-bean.com/repos
property 'svn:log' set on repository revision '25'
</screen>
            <para>Lastly, you can tell propset to take its input from
            a file.  You could even use this to set the contents of a
            property to something binary:</para>
            <screen>
$ svn propset owner-pic -F sally.jpg moo.c 
property 'owner-pic' set on 'moo.c'
</screen>
            <note>
              <para>By default, you cannot modify revision properties
              in a Subversion repository.  Your repository
              administrator must explicitly enable revision property
              modifications by creating a hook named
              <literal>pre-revprop-change</literal>.  See <xref linkend="svn.reposadmin.create.hooks"/> for more information on
              hook scripts.</para>
            </note>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svn.c.resolved">
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>resolved</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svn resolved</refname>
            <refpurpose>Remove <quote>conflicted</quote> state on
            working copy files or directories.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svn resolved PATH...</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Remove <quote>conflicted</quote> state on working copy
            files or directories.  This routine does not semantically
            resolve conflict markers; it merely removes
            conflict-related artifact files and allows
            <replaceable>PATH</replaceable> to be committed again;
            that is, it tells Subversion that the conflicts have been
            <quote>resolved</quote>.  See <xref linkend="svn.tour.cycle.resolve"/> for an in-depth look at
            resolving conflicts.</para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>None</para>
          </refsection>
          <refsection>
            <info>
              <title>Changes</title>
            </info>
            <para>Working copy</para>
          </refsection>
          <refsection>
            <info>
              <title>Accesses Repository</title>
            </info>
            <para>No</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--targets FILENAME
--recursive (-R)
--quiet (-q)
--config-dir DIR
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>If you get a conflict on an update, your working
            copy will sprout three new files:</para>
            <screen>
$ svn update
C  foo.c
Updated to revision 31.
$ ls
foo.c
foo.c.mine
foo.c.r30
foo.c.r31
</screen>
            <para>Once you've resolved the conflict and
            <filename>foo.c</filename> is ready to be committed, run
            <command>svn resolved</command> to let your working copy
            know you've taken care of everything.</para>
            <warning>
              <para>You <emphasis>can</emphasis> just remove the
              conflict files and commit, but <command>svn
              resolved</command> fixes up some bookkeeping data
              in the working copy administrative area in addition
              to removing the conflict files, so we recommend that
              you use this command.</para>
            </warning>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svn.c.revert">
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>revert</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svn revert</refname>
            <refpurpose>Undo all local edits.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svn revert PATH...</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Reverts any local changes to a file or directory and
            resolves any conflicted states.  <command>svn
            revert</command> will not only revert the contents of an
            item in your working copy, but also any property
            changes.  Finally, you can use it to undo any scheduling
            operations that you may have done (e.g. files scheduled
            for addition or deletion can be
            <quote>unscheduled</quote>).</para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>None</para>
          </refsection>
          <refsection>
            <info>
              <title>Changes</title>
            </info>
            <para>Working copy</para>
          </refsection>
          <refsection>
            <info>
              <title>Accesses Repository</title>
            </info>
            <para>No</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--targets FILENAME
--recursive (-R)
--quiet (-q)
--config-dir DIR
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>Discard changes to a file:</para>
            <screen>
$ svn revert foo.c
Reverted foo.c
</screen>
            <para>If you want to revert a whole directory of files,
            use the <option>--recursive</option> flag:</para>
            <screen>
$ svn revert --recursive .
Reverted newdir/afile
Reverted foo.c
Reverted bar.txt
</screen>
            <para>Lastly, you can undo any scheduling
            operations:</para>
            <screen>
$ svn add mistake.txt whoops
A         mistake.txt
A         whoops
A         whoops/oopsie.c

$ svn revert mistake.txt whoops
Reverted mistake.txt
Reverted whoops

$ svn status
?      mistake.txt
?      whoops
</screen>
            <warning>
              <para><command>svn revert</command> is inherently
              dangerous, since its entire purpose is to throw away
              data&#x2014;namely, your uncommitted changes.  Once
              you've reverted, Subversion provides <emphasis>no
              way</emphasis> to get back those uncommitted
              changes.</para>
              <para>If you provide no targets to <command>svn
              revert</command>, it will do nothing&#x2014;to protect
              you from accidentally losing changes in your working
              copy, <command>svn revert</command> requires you to
              provide at least one target.</para>
            </warning>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svn.c.status">
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>status</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svn status</refname>
            <refpurpose>Print the status of working copy files and directories.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svn status [PATH...]</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Print the status of working copy files and
            directories.  With no arguments, it prints only locally
            modified items (no repository access).  With
            <option>--show-updates</option>, it adds working revision
            and server out-of-date information.  With
            <option>--verbose</option>, it prints full revision
            information on every item.</para>
            <para>The first six columns in the output are each one
            character wide, and each column gives you information
            about different aspects of each working copy item.</para>
            <para>The first column indicates that an item
            was added, deleted, or otherwise changed.</para>
            <variablelist>
              <varlistentry>
                <term>' '</term>
                <listitem>
                  <para>No modifications.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>'A'</term>
                <listitem>
                  <para>Item is scheduled for Addition.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>'D'</term>
                <listitem>
                  <para>Item is scheduled for Deletion.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>'M'</term>
                <listitem>
                  <para>Item has been modified.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>'R'</term>
                <listitem>
                  <para>Item has been replaced in your working copy.
                This means the file was scheduled for deletion, and
                then a new file with the same name was scheduled for
                addition in its place.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>'C'</term>
                <listitem>
                  <para>The contents (as opposed to the properties) of
                  the item conflict with updates received from the
                  repository.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>'X'</term>
                <listitem>
                  <para>Item is present because of an externals definition.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>'I'</term>
                <listitem>
                  <para>Item is being ignored (e.g. with the 
                  <literal>svn:ignore</literal> property).</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>'?'</term>
                <listitem>
                  <para>Item is not under version control.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>'!'</term>
                <listitem>
                  <para>Item is missing (e.g. you moved or deleted it
                  without using <command>svn</command>).  This also
                  indicates that a directory is incomplete (a checkout
                  or update was interrupted).</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>'~'</term>
                <listitem>
                  <para>Item is versioned as one kind of object (file,
                  directory, link), but has been replaced by different
                  kind of object.</para>
                </listitem>
              </varlistentry>
            </variablelist>
            <para>The second column tells the status of a file's or
            directory's properties.</para>
            <variablelist>
              <varlistentry>
                <term>' '</term>
                <listitem>
                  <para>No modifications.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>'M'</term>
                <listitem>
                  <para>Properties for this item have been
                  modified.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>'C'</term>
                <listitem>
                  <para>Properties for this item are in conflict with
                  property updates received from the
                  repository.</para>
                </listitem>
              </varlistentry>
            </variablelist>
            <para>The third column is populated only if the
            working copy directory is locked. (See
            <xref linkend="svn.tour.cleanup"/>.)</para>
            <variablelist>
              <varlistentry>
                <term>' '</term>
                <listitem>
                  <para>Item is not locked.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>'L'</term>
                <listitem>
                  <para>Item is locked.</para>
                </listitem>
              </varlistentry>
            </variablelist>
            <para>The fourth column is populated only if the item is
            scheduled for addition-with-history.</para>
            <variablelist>
              <varlistentry>
                <term>' '</term>
                <listitem>
                  <para>No history scheduled with commit.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>'+'</term>
                <listitem>
                  <para>History scheduled with commit.</para>
                </listitem>
              </varlistentry>
            </variablelist>
            <para>The fifth column is populated only if the item is
            switched relative to its parent (see <xref linkend="svn.branchmerge.switchwc"/>).</para>
            <variablelist>
              <varlistentry>
                <term>' '</term>
                <listitem>
                  <para>Item is a child of its parent directory.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>'S'</term>
                <listitem>
                  <para>Item is switched.</para>
                </listitem>
              </varlistentry>
            </variablelist>
            <para>The sixth column is populated with lock information.</para>
            <variablelist>
              <varlistentry>
                <term>' '</term>
                <listitem>
                  <para>When <option>--show-updates</option> is used,
                the file is not locked.  If
                <option>--show-updates</option> is
                <emphasis>not</emphasis> used, this merely means that
                the file is not locked in this working copy.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>K</term>
                <listitem>
                  <para>File is locked in this working copy.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>O</term>
                <listitem>
                  <para>File is locked either by another user or in
                another working copy.  This only appears when
                <option>--show-updates</option> is used.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>T</term>
                <listitem>
                  <para>File was locked in this working copy, but the
                lock has been <quote>stolen</quote> and is invalid.
                The file is currently locked in the repository.  This
                only appears when <option>--show-updates</option> is
                used.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>B</term>
                <listitem>
                  <para>File was locked in this working copy, but the
                lock has been <quote>broken</quote> and is invalid.
                The file is no longer locked This only appears when
                <option>--show-updates</option> is used.</para>
                </listitem>
              </varlistentry>
            </variablelist>
            <para>The out-of-date information appears in the seventh
            column (only if you pass the
            <option>--show-updates</option> option).</para>
            <variablelist>
              <varlistentry>
                <term>' '</term>
                <listitem>
                  <para>The item in your working copy is up-to-date.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>'*'</term>
                <listitem>
                  <para>A newer revision of the item exists on the
                  server.</para>
                </listitem>
              </varlistentry>
            </variablelist>
            <para>The remaining fields are variable width and
            delimited by spaces.  The working revision is the next
            field if the <option>--show-updates</option> or
            <option>--verbose</option> options are passed.</para>
            <para>If the <option>--verbose</option> option is passed,
            the last committed revision and last committed author
            are displayed next.</para>
            <para>The working copy path is always the final field, so
            it can include spaces.</para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>stat, st</para>
          </refsection>
          <refsection>
            <info>
              <title>Changes</title>
            </info>
            <para>Nothing</para>
          </refsection>
          <refsection>
            <info>
              <title>Accesses Repository</title>
            </info>
            <para>Only if using <option>--show-updates</option></para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--show-updates (-u)
--verbose (-v)
--non-recursive (-N)
--quiet (-q)
--no-ignore
--username USER
--password PASS
--no-auth-cache
--non-interactive
--config-dir DIR
--ignore-externals
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>This is the easiest way to find out what changes you
            have made to your working copy:</para>
            <screen>
$ svn status wc
 M     wc/bar.c
A  +   wc/qax.c
</screen>
            <para>If you want to find out what files in your working
            copy are out-of-date, pass the
            <option>--show-updates</option> option (this will
            <emphasis>not</emphasis> make any changes to your
            working copy).  Here you can see that
            <filename>wc/foo.c</filename> has changed in the
            repository since we last updated our working
            copy:</para>
            <screen>
$ svn status --show-updates wc
 M           965    wc/bar.c
       *     965    wc/foo.c
A  +         965    wc/qax.c
Status against revision:    981
</screen>
            <note>
              <para><option>--show-updates</option><emphasis>only</emphasis> places an asterisk next to
              items that are out of date (that is, items that will be
              updated from the repository if you run <command>svn
              update</command>).  <option>--show-updates</option> does
              <emphasis>not</emphasis> cause the status listing to
              reflect the repository's version of the item (although
              you can see the revision number in the repository by
              passing the <option>--verbose</option> option).</para>
            </note>
            <para>And finally, the most information you can get out of
            the status subcommand:</para>
            <screen>
$ svn status --show-updates --verbose wc
 M           965       938 sally        wc/bar.c
       *     965       922 harry        wc/foo.c
A  +         965       687 harry        wc/qax.c
             965       687 harry        wc/zig.c
Head revision:   981
</screen>
            <para>For many more examples of <command>svn status</command>,
            see <xref linkend="svn.tour.cycle.examine.status"/>.</para>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svn.c.switch">
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>switch</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svn switch</refname>
            <refpurpose>Update working copy to a different URL.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svn switch URL [PATH]</programlisting>
            <programlisting>switch --relocate FROM TO [PATH...]</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>The first variant of this subcommand (without the
            <option>--relocate</option> option) updates your working
            copy to point to a new URL&#x2014;usually a URL which
            shares a common ancestor with your working copy, although
            not necessarily.  This is the Subversion way to move a
            working copy to a new branch.  See <xref linkend="svn.branchmerge.switchwc"/> for an in-depth look
            at switching.</para>
            <para>
            The <option>--relocate</option> option causes <command>svn
            switch</command> to do something different: it updates
            your working copy to point to <emphasis>the
            same</emphasis> repository directory, only at a different
            URL (typically because an administrator has moved the
            repository to another server, or to another URL on the
            same server).</para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>sw</para>
          </refsection>
          <refsection>
            <info>
              <title>Changes</title>
            </info>
            <para>Working copy</para>
          </refsection>
          <refsection>
            <info>
              <title>Accesses Repository</title>
            </info>
            <para>Yes</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--revision (-r) REV
--non-recursive (-N)
--quiet (-q)
--diff3-cmd CMD
--relocate FROM TO
--username USER
--password PASS
--no-auth-cache
--non-interactive
--config-dir DIR
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>If you're currently inside the directory
            <filename>vendors</filename>, which was branched to
            <filename>vendors-with-fix</filename>, and you'd like to
            switch your working copy to that branch:</para>
            <screen>
$ svn switch http://svn.red-bean.com/repos/branches/vendors-with-fix .
U  myproj/foo.txt
U  myproj/bar.txt
U  myproj/baz.c
U  myproj/qux.c
Updated to revision 31.
</screen>
            <para>And to switch back, just provide the URL to the
            location in the repository from which you originally
            checked out your working copy:</para>
            <screen>
$ svn switch http://svn.red-bean.com/repos/trunk/vendors .
U  myproj/foo.txt
U  myproj/bar.txt
U  myproj/baz.c
U  myproj/qux.c
Updated to revision 31.
</screen>
            <tip>
              <para>You can just switch part of your working copy to a
              branch if you don't want to switch your entire working
              copy.</para>
            </tip>
            <para>Sometimes an administrator might change the
            <quote>base location</quote> of your repository&#x2014;in
            other words, the contents of the repository doesn't
            change, but the main URL used to reach the root of the
            repository does.  For example, the hostname may change,
            the URL scheme may change, or any part of the URL which leads to the
            repository itself may change.  Rather than check out a new working
            copy, you can have the <command>svn switch</command>
            command <quote>rewrite</quote> the beginnings of all the
            URLs in your working copy.  Use the
            <option>--relocate</option> option to do the substitution.
            No file contents are changed, nor is the repository
            contacted.  It's similar to running a Perl script over
            your working copy <filename>.svn/</filename> directories
            which runs <command>s/OldRoot/NewRoot/</command>.</para>
            <screen>
$ svn checkout file:///var/svn/repos test
A  test/a
A  test/b
&#x2026;

$ mv repos newlocation
$ cd test/

$ svn update
svn: Unable to open an ra_local session to URL
svn: Unable to open repository 'file:///var/svn/repos'

$ svn switch --relocate file:///var/svn/repos file:///tmp/newlocation .
$ svn update
At revision 3.
</screen>
            <warning>
              <para>Be careful when using the
            <option>--relocate</option> option.  If you mistype the
            argument, you might end up creating nonsensical URLs
            within your working copy that render the whole workspace
            unusable and tricky to fix.  It's also important to
            understand exactly when one should or shouldn't use
            <option>--relocate</option>.  Here's the rule of
            thumb:</para>
              <itemizedlist>
                <listitem>
                  <para>If the working copy needs to reflect a
                  new directory <emphasis>within</emphasis> the
                  repository, then use just <command>svn
                  switch</command>.</para>
                </listitem>
                <listitem>
                  <para>If the working copy still reflects the
                  same repository directory, but the location of the
                  repository itself has changed, then use <command>svn
                  switch --relocate</command>.</para>
                </listitem>
              </itemizedlist>
            </warning>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svn.c.unlock">
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>unlock</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svn unlock</refname>
            <refpurpose>Unlock working copy paths or URLs.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svn unlock TARGET...</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Unlock each <replaceable>TARGET</replaceable>.  If any
            <replaceable>TARGET</replaceable> is either locked by
            another user or no valid lock token exists in the working
            copy, print a warning and continue unlocking the rest of
            the <replaceable>TARGET</replaceable>s.  Use
            <option>--force</option> to break a lock belonging to
            another user or working copy.</para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>None</para>
          </refsection>
          <refsection>
            <info>
              <title>Changes</title>
            </info>
            <para>Working Copy, Repository</para>
          </refsection>
          <refsection>
            <info>
              <title>Accesses Repository</title>
            </info>
            <para>Yes</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--targets FILENAME
--username USER
--password PASS
--no-auth-cache
--non-interactive
--config-dir DIR
--force
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>Unlock two files in your working copy:</para>
            <screen>

$ svn unlock tree.jpg house.jpg
'tree.jpg' unlocked.
'house.jpg' unlocked.
</screen>
            <para>Unlock a file in your working copy that is currently
            locked by another user:</para>
            <screen>
$ svn unlock tree.jpg
svn: 'tree.jpg' is not locked in this working copy
$ svn unlock --force tree.jpg
'tree.jpg' unlocked.
</screen>
            <para>Unlock a file without a working copy:</para>
            <screen>
$ svn unlock http://svn.red-bean.com/repos/test/tree.jpg
'tree.jpg unlocked.
</screen>
            <para>For further details, see <xref linkend="svn.advanced.locking"/>.</para>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svn.c.update">
          <indexterm>
            <primary>svn</primary>
            <secondary>subcommands</secondary>
            <tertiary>update</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svn update</refname>
            <refpurpose>Update your working copy.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svn update [PATH...]</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para><command>svn update</command> brings changes from the
            repository into your working copy.  If no revision is given,
            it brings your working copy up-to-date with the
            <literal>HEAD</literal> revision.  Otherwise, it
            synchronizes the working copy to the revision given by the
            <option>--revision</option> option.  As part of the
            synchronization, <command>svn update</command> also
            removes any stale locks (see <xref linkend="svn.tour.cleanup"/>) found in the
            working copy.</para>
            <para>For each updated item, it prints a line that starts
            with a character reporting the action taken.  These
            characters have the following meaning:</para>
            <variablelist>
              <varlistentry>
                <term>A</term>
                <listitem>
                  <para>Added</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>D</term>
                <listitem>
                  <para>Deleted</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>U</term>
                <listitem>
                  <para>Updated</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>C</term>
                <listitem>
                  <para>Conflicted</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>G</term>
                <listitem>
                  <para>Merged</para>
                </listitem>
              </varlistentry>
            </variablelist>
            <para>A character in the first column signifies an update
            to the actual file, while updates to the file's
            properties are shown in the second column.</para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>up</para>
          </refsection>
          <refsection>
            <info>
              <title>Changes</title>
            </info>
            <para>Working copy</para>
          </refsection>
          <refsection>
            <info>
              <title>Accesses Repository</title>
            </info>
            <para>Yes</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--revision (-r) REV
--non-recursive (-N)
--quiet (-q)
--no-ignore
--incremental
--diff3-cmd CMD
--username USER
--password PASS
--no-auth-cache
--non-interactive
--config-dir DIR
--ignore-externals
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>Pick up repository changes that have happened since
            your last update:</para>
            <screen>
$ svn update
A  newdir/toggle.c
A  newdir/disclose.c
A  newdir/launch.c
D  newdir/README
Updated to revision 32.
</screen>
            <para>You can also <quote>update</quote> your working copy to an older
            revision (Subversion doesn't have the concept of
            <quote>sticky</quote> files like CVS does; see <xref linkend="svn.forcvs"/>):</para>
            <screen>
$ svn update -r30
A  newdir/README
D  newdir/toggle.c
D  newdir/disclose.c
D  newdir/launch.c
U  foo.c
Updated to revision 30.
</screen>
            <tip>
              <para>If you want to examine an older revision of a
              single file, you may want to use <command>svn
              cat</command> instead&#x2014;it won't change your working copy.</para>
            </tip>
          </refsection>
        </refentry>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.ref.svnadmin">
      <info>
        <title>
          <command>svnadmin</command>
        </title>
      </info>
      <para><command>svnadmin</command> is the administrative tool for
      monitoring and repairing your Subversion repository.  For
      detailed information, see <xref linkend="svn.reposadmin.maint.tk.svnadmin"/>.</para>
      <para>Since <command>svnadmin</command> works via direct repository access
      (and thus can only be used on the machine that holds the
      repository), it refers to the repository with a path, not a URL.</para>
      <!-- =============================================================== -->
      <section xml:id="svn.ref.svnadmin.sw">
        <info>
          <title><command>svnadmin</command> Options</title>
        </info>
        <variablelist>
          <varlistentry>
            <term>
              <option>--bdb-log-keep</option>
            </term>
            <listitem>
              <para>(Berkeley DB specific) Disable automatic log removal
              of database log files.  Having these log files around
              can be convenient if you need to restore from a
              catastrophic repository failure.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--bdb-txn-nosync</option>
            </term>
            <listitem>
              <para>(Berkeley DB specific) Disables fsync when
              committing database transactions.  Used with the
              <command>svnadmin create</command> command to create a
              Berkeley DB backed repository with
              <literal>DB_TXN_NOSYNC</literal> enabled (which improves
              speed but has some risks associated with it).</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--bypass-hooks</option>
            </term>
            <listitem>
              <para>Bypass the repository hook system.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--clean-logs</option>
            </term>
            <listitem>
              <para>Removes unused Berkeley DB logs.</para>
            </listitem>
          </varlistentry>
          <!-- TODO config-dir? Is it really used? -->
          <varlistentry>
            <term>
              <option>--force-uuid</option>
            </term>
            <listitem>
              <para>By default, when loading data into repository that
              already contains revisions, <command>svnadmin</command>
              will ignore the <literal>UUID</literal> from the dump
              stream.  This option will cause the repository's
              <literal>UUID</literal> to be set to the
              <literal>UUID</literal> from the stream.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--ignore-uuid</option>
            </term>
            <listitem>
              <para>By default, when loading an empty repository,
              <command>svnadmin</command> will ignore the
              <literal>UUID</literal> from the dump stream.  This
              option will force that UUID to be ignored (useful for
              overriding your configuration file if it has
              <option>--force-uuid</option> set).</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--incremental</option>
            </term>
            <listitem>
              <para>Dump a revision only as a diff against the
              previous revision, instead of the usual
              fulltext.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--parent-dir
          <replaceable>DIR</replaceable></option>
            </term>
            <listitem>
              <para>When loading a dump file, root paths at
              <replaceable>DIR</replaceable> instead of
              <filename>/</filename>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><option>--revision</option> (<option>-r</option>)
          <replaceable>ARG</replaceable></term>
            <listitem>
              <para>Specify a particular revision to operate
              on.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--quiet</option>
            </term>
            <listitem>
              <para>Do not show normal progress&#x2014;show only
              errors.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--use-post-commit-hook</option>
            </term>
            <listitem>
              <para>When loading a dump file, run the repository's
              post-commit hook after finalizing each newly loaded
              revision.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--use-pre-commit-hook</option>
            </term>
            <listitem>
              <para>When loading a dump file, run the repository's
              pre-commit hook before finalizing each newly loaded
              revision.  If the hook fails, abort the commit and
              terminate the load process.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.ref.svnadmin.c">
        <info>
          <title><command>svnadmin</command> Subcommands</title>
        </info>
        <refentry xml:id="svn.ref.svnadmin.c.create">
          <indexterm>
            <primary>svnadmin</primary>
            <secondary>subcommands</secondary>
            <tertiary>create</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnadmin create</refname>
            <refpurpose>Create a new, empty repository.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnadmin create REPOS_PATH</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Create a new, empty repository at the path provided.
              If the provided directory does not exist, it will be
              created for you.<footnote><para>Remember,
              <command>svnadmin</command> works only with local
              <emphasis>paths</emphasis>, not
              <emphasis>URLs</emphasis>.</para></footnote> As of
              Subversion 1.2, <command>svnadmin</command> creates new
              repositories with the <literal>fsfs</literal> filesystem
              backend by default.</para>
            <para>While <command>svnadmin create</command> will create
              the base directory for a new repository, it will not
              create intermediate directories.  For example, if you
              have an empty directory named
              <filename>/var/svn</filename>, creating
              <filename>/var/svn/repos</filename> will work, while
              attempting to create
              <filename>/var/svn/subdirectory/repos</filename> will
              fail with an error.</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--bdb-txn-nosync
--bdb-log-keep
--config-dir DIR
--fs-type TYPE
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>Creating a new repository is just this easy:</para>
            <screen>
$ svnadmin create /var/svn/repos
</screen>
            <para>In Subversion 1.0, a Berkeley DB repository is always
            created.  In Subversion 1.1, a Berkeley DB repository is
            the default repository type, but an FSFS repository can be
            created using the <option>--fs-type</option>
            option:</para>
            <screen>
$ svnadmin create /var/svn/repos --fs-type fsfs
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svnadmin.c.deltify">
          <indexterm>
            <primary>svnadmin</primary>
            <secondary>subcommands</secondary>
            <tertiary>deltify</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnadmin deltify</refname>
            <refpurpose>Deltify changed paths in a revision range.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnadmin deltify [-r LOWER[:UPPER]] REPOS_PATH</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para><command>svnadmin deltify</command> exists in
            current versions of Subversion only for historical reasons.
            This command is deprecated and no longer needed.</para>
            <para>It dates from a time when Subversion offered
            administrators greater control over compression strategies
            in the repository.  This turned out to be a lot of
            complexity for <emphasis>very</emphasis> little gain, and
            this <quote>feature</quote> was deprecated.</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--revision (-r) REV
--quiet (-q)
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svnadmin.c.dump">
          <indexterm>
            <primary>svnadmin</primary>
            <secondary>subcommands</secondary>
            <tertiary>dump</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnadmin dump</refname>
            <refpurpose>Dump the contents of filesystem to stdout.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnadmin dump REPOS_PATH [-r LOWER[:UPPER]] [--incremental]</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Dump the contents of filesystem to stdout in a
            <quote>dumpfile</quote> portable format, sending feedback
            to stderr.  Dump revisions
            <replaceable>LOWER</replaceable> rev through
            <replaceable>UPPER</replaceable> rev.  If no revisions are
            given, dump all revision trees.  If only
            <replaceable>LOWER</replaceable> is given, dump that one
            revision tree.  See <xref linkend="svn.reposadmin.maint.migrate"/>
            for a practical use.</para>
            <para>By default, the Subversion dumpfile stream contains a
            single revision (the first revision in the requested
            revision range) in which every file and directory in the
            repository in that revision is presented as if that whole
            tree was added at once, followed by other revisions (the
            remainder of the revisions in the requested range) which
            contain only the files and directories which were modified
            in those revisions.  For a modified file, the complete
            fulltext representation of its contents, as well as all of
            its properties, are presented in the dumpfile; for a
            directory, all of its properties are presented.</para>
            <para>There are two useful options which modify the dumpfile
            generator's behavior.  The first is the
            <option>--incremental</option> option, which simply causes
            that first revision in the dumpfile stream to contain only
            the files and directories modified in that revision,
            instead of being presented as the addition of a new tree,
            and in exactly the same way that every other revision in
            the dumpfile is presented.  This is useful for generating
            a relatively small dumpfile to be loaded into another
            repository which already has the files and directories
            that exist in the original repository.</para>
            <para>The second useful option is <option>--deltas</option>.
            This option causes <command>svnadmin dump</command> to,
            instead of emitting fulltext representations of file
            contents and property lists, emit only deltas of those
            items against their previous versions.  This reduces (in
            some cases, drastically) the size of the dumpfile that
            <command>svnadmin dump</command> creates.  There are, however,
            disadvantages to using this option&#x2014;deltified
            dumpfiles are more CPU intensive to create, cannot be
            operated on by <command>svndumpfilter</command>, and tend
            not to compress as well as their non-deltified counterparts
            when using third-party tools like <command>gzip</command>
            and <command>bzip2</command>.</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--revision (-r) REV
--incremental
--quiet (-q)
--deltas
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>Dump your whole repository:</para>
            <screen>
$ svnadmin dump /var/svn/repos
SVN-fs-dump-format-version: 1
Revision-number: 0
* Dumped revision 0.
Prop-content-length: 56
Content-length: 56
&#x2026;
</screen>
            <para>Incrementally dump a single transaction from your
            repository:</para>
            <screen>
$ svnadmin dump /var/svn/repos -r 21 --incremental 
* Dumped revision 21.
SVN-fs-dump-format-version: 1
Revision-number: 21
Prop-content-length: 101
Content-length: 101
&#x2026;
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svnadmin.c.help">
          <indexterm>
            <primary>svnadmin</primary>
            <secondary>subcommands</secondary>
            <tertiary>help</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnadmin help</refname>
            <refpurpose>Help!</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnadmin help [SUBCOMMAND...]</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>This subcommand is useful when you're trapped on a
            desert island with neither a net connection nor a copy of
            this book.</para>
            <!-- although marginally less useful than, say, a cooler
            full of beer. -->
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>?, h</para>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svnadmin.c.hotcopy">
          <indexterm>
            <primary>svnadmin</primary>
            <secondary>subcommands</secondary>
            <tertiary>hotcopy</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnadmin hotcopy</refname>
            <refpurpose>Make a hot copy of a repository.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnadmin hotcopy REPOS_PATH NEW_REPOS_PATH</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>This subcommand makes a full <quote>hot</quote> backup
            of your repository, including all hooks, configuration
            files, and, of course, database files.  If you pass the
            <option>--clean-logs</option> option,
            <command>svnadmin</command> will perform a hotcopy of your
            repository, and then remove unused Berkeley DB logs from
            the original repository.  You can run this command at any
            time and make a safe copy of the repository, regardless of
            whether other processes are using the repository.</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--clean-logs
</screen>
            <warning>
              <para>As described in <xref linkend="svn.reposadmin.basics.backends.bdb"/>, hot-copied
              Berkeley DB repositories are <emphasis>not</emphasis>
              portable across operating systems, nor will they work on
              machines with a different <quote>endianness</quote> than
              the machine where they were created.</para>
            </warning>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svnadmin.c.list-dblogs">
          <indexterm>
            <primary>svnadmin</primary>
            <secondary>subcommands</secondary>
            <tertiary>list-dblogs</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnadmin list-dblogs</refname>
            <refpurpose>Ask
          Berkeley DB which log files exist for a given Subversion
          repository (applies only to repositories using the
          <literal>bdb</literal> backend).</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnadmin list-dblogs REPOS_PATH</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Berkeley DB creates logs of all changes to the
            repository, which allow it to recover in the face of
            catastrophe.  Unless you enable
            <literal>DB_LOG_AUTOREMOVE</literal>, the log files
            accumulate, although most are no longer used and can be
            deleted to reclaim disk space.  See <xref linkend="svn.reposadmin.maint.diskspace"/> for more
            information.</para>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svnadmin.c.list-unused-dblogs">
          <indexterm>
            <primary>svnadmin</primary>
            <secondary>subcommands</secondary>
            <tertiary>list-unused-dblogs</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnadmin list-unused-dblogs</refname>
            <refpurpose>Ask Berkeley DB which log files can be safely
          deleted (applies only to repositories using the
          <literal>bdb</literal> backend).</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnadmin list-unused-dblogs REPOS_PATH</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Berkeley DB creates logs of all changes to the
            repository, which allow it to recover in the face of
            catastrophe.  Unless you enable
            <literal>DB_LOG_AUTOREMOVE</literal>, the log files
            accumulate, although most are no longer used and can be
            deleted to reclaim disk space.  See <xref linkend="svn.reposadmin.maint.diskspace"/> for more
            information.</para>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>Remove all unused log files from a repository:</para>
            <screen>
$ svnadmin list-unused-dblogs /var/svn/repos
/var/svn/repos/log.0000000031
/var/svn/repos/log.0000000032
/var/svn/repos/log.0000000033

$ svnadmin list-unused-dblogs /var/svn/repos | xargs rm
## disk space reclaimed!
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svnadmin.c.load">
          <indexterm>
            <primary>svnadmin</primary>
            <secondary>subcommands</secondary>
            <tertiary>load</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnadmin load</refname>
            <refpurpose>Read a
            <quote>dumpfile</quote>-formatted stream from
            stdin.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnadmin load REPOS_PATH</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Read a <quote>dumpfile</quote>-formatted stream from
            stdin, committing new revisions into the repository's
            filesystem.  Send progress feedback to stdout.</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--quiet (-q)
--ignore-uuid
--force-uuid
--use-pre-commit-hook
--use-post-commit-hook
--parent-dir
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Example</title>
            </info>
            <para>This shows the beginning of loading a repository from
            a backup file (made, of course, with <command>svnadmin
            dump</command>):</para>
            <screen>
$ svnadmin load /var/svn/restored &lt; repos-backup
&lt;&lt;&lt; Started new txn, based on original revision 1
     * adding path : test ... done.
     * adding path : test/a ... done.
&#x2026;
</screen>
            <para>Or if you want to load into a subdirectory:</para>
            <screen>
$ svnadmin load --parent-dir new/subdir/for/project /var/svn/restored &lt; repos-backup
&lt;&lt;&lt; Started new txn, based on original revision 1
     * adding path : test ... done.
     * adding path : test/a ... done.
&#x2026;
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svnadmin.c.lslocks">
          <indexterm>
            <primary>svnadmin</primary>
            <secondary>subcommands</secondary>
            <tertiary>lslocks</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnadmin lslocks</refname>
            <refpurpose>Print descriptions of all locks.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnadmin lslocks REPOS_PATH</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Print descriptions of all locks in a repository.</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <para>None</para>
          </refsection>
          <refsection>
            <info>
              <title>Example</title>
            </info>
            <para>This lists the one locked file in the repository at
            <filename>/var/svn/repos</filename>:</para>
            <screen>
$ svnadmin lslocks /var/svn/repos
Path: /tree.jpg
UUID Token: opaquelocktoken:ab00ddf0-6afb-0310-9cd0-dda813329753
Owner: harry
Created: 2005-07-08 17:27:36 -0500 (Fri, 08 Jul 2005)
Expires: 
Comment (1 line):
Rework the uppermost branches on the bald cypress in the foreground.
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svnadmin.c.lstxns">
          <indexterm>
            <primary>svnadmin</primary>
            <secondary>subcommands</secondary>
            <tertiary>lstxns</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnadmin lstxns</refname>
            <refpurpose>Print the names of all uncommitted transactions.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnadmin lstxns REPOS_PATH</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Print the names of all uncommitted transactions.  See
            <xref linkend="svn.reposadmin.maint.diskspace.deadtxns"/>
            for information on how uncommitted transactions are
            created and what you should do with them.</para>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>List all outstanding transactions in a
            repository.</para>
            <screen>
$ svnadmin lstxns /var/svn/repos/ 
1w
1x
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svnadmin.c.recover">
          <indexterm>
            <primary>svnadmin</primary>
            <secondary>subcommands</secondary>
            <tertiary>recover</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnadmin recover</refname>
            <refpurpose>Bring a repository database back into a
          consistent state (applies only to repositories using the
          <literal>bdb</literal> backend).  In addition, if
          <filename>repos/conf/passwd</filename> does not exist, it
          will create a default password file .</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnadmin recover REPOS_PATH</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Run this command if you get an error indicating that
            your repository needs to be recovered.</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--wait
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>Recover a hung repository:</para>
            <screen>
$ svnadmin recover /var/svn/repos/ 
Repository lock acquired.
Please wait; recovering the repository may take some time...

Recovery completed.
The latest repos revision is 34.
</screen>
            <para>Recovering the database requires an exclusive lock on
            the repository. (This is a <quote>database lock</quote>;
            see <xref linkend="svn.advanced.locking.meanings"/>.)
            If another process is accessing the repository,
            then <command>svnadmin recover</command> will error:</para>
            <screen>
$ svnadmin recover /var/svn/repos
svn: Failed to get exclusive repository access; perhaps another process
such as httpd, svnserve or svn has it open?

$
</screen>
            <para>The <option>--wait</option> option, however, will
            cause <command>svnadmin recover</command> to wait
            indefinitely for other processes to disconnect:</para>
            <screen>
$ svnadmin recover /var/svn/repos --wait
Waiting on repository lock; perhaps another process has it open?

### time goes by&#x2026;

Repository lock acquired.
Please wait; recovering the repository may take some time...

Recovery completed.
The latest repos revision is 34.
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svnadmin.c.rmlocks">
          <indexterm>
            <primary>svnadmin</primary>
            <secondary>subcommands</secondary>
            <tertiary>rmlocks</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnadmin rmlocks</refname>
            <refpurpose>Unconditionally remove one or more locks from a
          repository.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnadmin rmlocks REPOS_PATH LOCKED_PATH...</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Remove lock from each <replaceable>LOCKED_PATH</replaceable>.</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <para>None</para>
          </refsection>
          <refsection>
            <info>
              <title>Example</title>
            </info>
            <para>This deletes the locks on
            <filename>tree.jpg</filename> and
            <filename>house.jpg</filename> in the repository at
            <filename>/var/svn/repos</filename></para>
            <screen>
$ svnadmin rmlocks /var/svn/repos tree.jpg house.jpg
Removed lock on '/tree.jpg.
Removed lock on '/house.jpg.
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svnadmin.c.rmtxns">
          <indexterm>
            <primary>svnadmin</primary>
            <secondary>subcommands</secondary>
            <tertiary>rmtxns</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnadmin rmtxns</refname>
            <refpurpose>Delete transactions from a repository.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnadmin rmtxns REPOS_PATH TXN_NAME...</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Delete outstanding transactions from a repository.
            This is covered in detail in <xref linkend="svn.reposadmin.maint.diskspace.deadtxns"/>.</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--quiet (-q)
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>Remove named transactions:</para>
            <screen>
$ svnadmin rmtxns /var/svn/repos/ 1w 1x
</screen>
            <para>Fortunately, the output of <command>lstxns</command>
            works great as the input for <command>rmtxns</command>:</para>
            <screen>
$ svnadmin rmtxns /var/svn/repos/  `svnadmin lstxns /var/svn/repos/`
</screen>
            <para>Which will remove all uncommitted transactions from
            your repository.</para>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svnadmin.c.setlog">
          <indexterm>
            <primary>svnadmin</primary>
            <secondary>subcommands</secondary>
            <tertiary>setlog</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnadmin setlog</refname>
            <refpurpose>Set the log-message on a revision.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnadmin setlog REPOS_PATH -r REVISION FILE</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Set the log-message on revision REVISION to the
            contents of FILE.</para>
            <para>This is similar to using <command>svn propset
            --revprop</command> to set the <literal>svn:log</literal> property
            on a revision, except that you can also use the option
            <option>--bypass-hooks</option> to avoid running any pre- or
            post-commit hooks, which is useful if the modification of
            revision properties has not been enabled in the pre-revprop-change
            hook.</para>
            <warning>
              <para>Revision properties are not under version control,
              so this command will permanently overwrite the previous
              log message.</para>
            </warning>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--revision (-r) REV
--bypass-hooks
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>Set the log message for revision 19 to the contents of
            the file <filename>msg</filename>:</para>
            <screen>
$ svnadmin setlog /var/svn/repos/ -r 19 msg
</screen>
          </refsection>
        </refentry>
        <!-- this could use a lot more explanation.  When should I use
      it?  What do I do if it fails? -->
        <refentry xml:id="svn.ref.svnadmin.c.verify">
          <indexterm>
            <primary>svnadmin</primary>
            <secondary>subcommands</secondary>
            <tertiary>verify</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnadmin verify</refname>
            <refpurpose>Verify the data stored in the repository.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnadmin verify REPOS_PATH</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Run this command if you wish to verify the integrity
            of your repository.  This basically iterates through all
            revisions in the repository by internally dumping all
            revisions and discarding the output&#x2014;it's a good idea
            to run this on a regular basis to guard against latent
            hard disk failures and <quote>bitrot</quote>.  If this
            command fails&#x2014;which it will do at the first sign of
            a problem&#x2014;that means that your repository has at
            least one corrupted revision and you should restore the
            corrupted revision from a backup (you did make a backup,
            didn't you?).</para>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>Verify a hung repository:</para>
            <screen>
$ svnadmin verify /var/svn/repos/ 
* Verified revision 1729.
</screen>
          </refsection>
        </refentry>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.ref.svnlook">
      <info>
        <title>
          <command>svnlook</command>
        </title>
      </info>
      <para><command>svnlook</command> is a command-line utility for
      examining different aspects of a Subversion repository.  It
      does not make any changes to the repository&#x2014;it's just
      used for <quote>peeking</quote>.
      <command>svnlook</command> is typically used by the
      repository hooks, but a repository administrator might find it
      useful for diagnostic purposes.</para>
      <para>Since <command>svnlook</command> works via direct repository access
      (and thus can only be used on the machine that holds the
      repository), it refers to the repository with a path, not a URL.</para>
      <para>If no revision or transaction is specified,
      <command>svnlook</command> defaults to the youngest (most
      recent) revision of the repository.</para>
      <!-- =============================================================== -->
      <section xml:id="svn.ref.svnlook.sw">
        <info>
          <title><command>svnlook</command> Options</title>
        </info>
        <para>Options in <command>svnlook</command> are global, just
        like in <command>svn</command> and
        <command>svnadmin</command>; however, most options only
        apply to one subcommand since the functionality of
        <command>svnlook</command> is (intentionally) limited in
        scope.</para>
        <variablelist>
          <varlistentry>
            <term>
              <option>--no-diff-deleted</option>
            </term>
            <listitem>
              <para>Prevents <command>svnlook diff</command> from printing
              differences for deleted files.  The default behavior
              when a file is deleted in a transaction/revision is
              to print the same differences that you would see if
              you had left the file but removed all the content.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--no-diff-added</option>
            </term>
            <listitem>
              <para>Prevents <command>svnlook diff</command> from printing
            differences for added files.  The default behavior when
            you add a file is to print the same differences that you
            would see if you had added the entire contents of an
            existing (empty) file.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><option>--revision</option>
            (<option>-r</option>)</term>
            <listitem>
              <para>Specify a particular revision number that you wish
              to examine.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--revprop</option>
            </term>
            <listitem>
              <para>Operates on a revision property instead of a
              property specific to a file or directory.  This option
              requires that you also pass a revision with the
              <option>--revision</option> (<option>-r</option>)
              option.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><option>--transaction</option>
            (<option>-t</option>)</term>
            <listitem>
              <para>Specify a particular transaction ID that you wish to
              examine.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--show-ids</option>
            </term>
            <listitem>
              <para>Show the filesystem node revision IDs for each path in the filesystem
              tree.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.ref.svnlook.c">
        <info>
          <title><command>svnlook</command> Subcommands</title>
        </info>
        <refentry xml:id="svn.ref.svnlook.c.author">
          <indexterm>
            <primary>svnlook</primary>
            <secondary>subcommands</secondary>
            <tertiary>author</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnlook author</refname>
            <refpurpose>Print the author.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnlook author REPOS_PATH</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Print the author of a revision or transaction in
            the repository.</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--revision (-r) REV
--transaction (-t)
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para><command>svnlook author</command> is handy, but not
          very exciting:</para>
            <screen>
$ svnlook author -r 40 /var/svn/repos 
sally
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svnlook.c.cat">
          <indexterm>
            <primary>svnlook</primary>
            <secondary>subcommands</secondary>
            <tertiary>cat</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnlook cat</refname>
            <refpurpose>Print the contents of a file.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnlook cat REPOS_PATH PATH_IN_REPOS</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Print the contents of a file.</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--revision (-r) REV
--transaction (-t)
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>This shows the contents of a file in transaction
            <literal>ax8</literal>, located at 
            <filename>/trunk/README</filename>:</para>
            <screen>
$ svnlook cat -t ax8 /var/svn/repos /trunk/README

               Subversion, a version control system.
               =====================================

$LastChangedDate: 2003-07-17 10:45:25 -0500 (Thu, 17 Jul 2003) $

Contents:

     I. A FEW POINTERS
    II. DOCUMENTATION
   III. PARTICIPATING IN THE SUBVERSION COMMUNITY
&#x2026;
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svnlook.c.changed">
          <indexterm>
            <primary>svnlook</primary>
            <secondary>subcommands</secondary>
            <tertiary>changed</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnlook changed</refname>
            <refpurpose>Print the paths that were changed.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnlook changed REPOS_PATH</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Print the paths that were changed in a particular
            revision or transaction, as well as <quote>svn
            update-style</quote> status letters in the first two
            columns:</para>
            <variablelist>
              <varlistentry>
                <term>'<literal>A </literal>'</term>
                <listitem>
                  <para>Item added to repository.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>'<literal>D </literal>'</term>
                <listitem>
                  <para>Item deleted from repository.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>'<literal>U </literal>'</term>
                <listitem>
                  <para>File contents changed.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>'<literal> U</literal>'</term>
                <listitem>
                  <para>Properties of item changed.  Note the leading space.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>'<literal>UU</literal>'</term>
                <listitem>
                  <para>File contents and properties changed.</para>
                </listitem>
              </varlistentry>
            </variablelist>
            <para>Files and directories can be distinguished, as directory
            paths are displayed with a trailing '<literal>/</literal>'
            character.</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--revision (-r) REV
--transaction (-t)
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>This shows a list of all the changed files and
            directories in revision 39 of a test repository.  Note
            that the first changed item is a directory, as evidenced
            by the trailing <literal>/</literal>:</para>
            <screen>
$ svnlook changed -r 39 /var/svn/repos
A   trunk/vendors/deli/
A   trunk/vendors/deli/chips.txt
A   trunk/vendors/deli/sandwich.txt
A   trunk/vendors/deli/pickle.txt
U   trunk/vendors/baker/bagel.txt
 U  trunk/vendors/baker/croissant.txt
UU  trunk/vendors/baker/pretzel.txt
D   trunk/vendors/baker/baguette.txt
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svnlook.c.date">
          <indexterm>
            <primary>svnlook</primary>
            <secondary>subcommands</secondary>
            <tertiary>date</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnlook date</refname>
            <refpurpose>Print the datestamp.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnlook date REPOS_PATH</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Print the datestamp of a revision or transaction in
            a repository.</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--revision (-r) REV
--transaction (-t)
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>This shows the date of revision 40 of a test
            repository:</para>
            <screen>
$ svnlook date -r 40 /var/svn/repos/
2003-02-22 17:44:49 -0600 (Sat, 22 Feb 2003)
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svnlook.c.diff">
          <indexterm>
            <primary>svnlook</primary>
            <secondary>subcommands</secondary>
            <tertiary>diff</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnlook diff</refname>
            <refpurpose>Print differences of changed files and properties.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnlook diff REPOS_PATH</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Print GNU-style differences of changed files and
            properties in a repository.</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--revision (-r) REV
--transaction (-t)
--no-diff-added
--no-diff-deleted
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>This shows a newly added (empty) file, a deleted
            file, and a copied file:</para>
            <screen>
$ svnlook diff -r 40 /var/svn/repos/
Copied: egg.txt (from rev 39, trunk/vendors/deli/pickle.txt)

Added: trunk/vendors/deli/soda.txt
==============================================================================

Modified: trunk/vendors/deli/sandwich.txt
==============================================================================
--- trunk/vendors/deli/sandwich.txt	(original)
+++ trunk/vendors/deli/sandwich.txt	2003-02-22 17:45:04.000000000 -0600
@@ -0,0 +1 @@
+Don't forget the mayo!

Modified: trunk/vendors/deli/logo.jpg
==============================================================================
(Binary files differ)

Deleted: trunk/vendors/deli/chips.txt
==============================================================================

Deleted: trunk/vendors/deli/pickle.txt
==============================================================================
</screen>
            <para>If a file has a non-textual
            <literal>svn:mime-type</literal> property, then the
            differences are not explicitly shown.</para>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svnlook.c.dirs-changed">
          <indexterm>
            <primary>svnlook</primary>
            <secondary>subcommands</secondary>
            <tertiary>dirs-changed</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnlook dirs-changed</refname>
            <refpurpose>Print the directories that were themselves changed.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnlook dirs-changed REPOS_PATH</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Print the directories that were themselves changed
            (property edits) or whose file children were
            changed.</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--revision (-r) REV
--transaction (-t)
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>This shows the directories that changed in
            revision 40 in our sample repository:</para>
            <screen>
$ svnlook dirs-changed -r 40 /var/svn/repos
trunk/vendors/deli/
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svnlook.c.help">
          <indexterm>
            <primary>svnlook</primary>
            <secondary>subcommands</secondary>
            <tertiary>help</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnlook help</refname>
            <refpurpose>Help!</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>Also svnlook -h and svnlook -?.</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Displays the help message for svnlook.  This
            command, like its brother <command>svn help</command>, is
            also your friend, even though you never call it anymore
            and forgot to invite it to your last party.</para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>?, h</para>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svnlook.c.history">
          <indexterm>
            <primary>svnlook</primary>
            <secondary>subcommands</secondary>
            <tertiary>history</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnlook history</refname>
            <refpurpose>Print information about the history of a path in
            the repository (or the root directory if no path is
            supplied).</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnlook history REPOS_PATH [PATH_IN_REPOS]</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Print information about the history of a path in
            the repository (or the root directory if no path is
            supplied).</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--revision (-r) REV
--show-ids
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>This shows the history output for the path
            <filename>/tags/1.0</filename> as of revision 20 in our
            sample repository.</para>
            <screen>
$ svnlook history -r 20 /var/svn/repos /tags/1.0 --show-ids
REVISION   PATH &lt;ID&gt;
--------   ---------
      19   /tags/1.0 &lt;1.2.12&gt;
      17   /branches/1.0-rc2 &lt;1.1.10&gt;
      16   /branches/1.0-rc2 &lt;1.1.x&gt;
      14   /trunk &lt;1.0.q&gt;
      13   /trunk &lt;1.0.o&gt;
      11   /trunk &lt;1.0.k&gt;
       9   /trunk &lt;1.0.g&gt;
       8   /trunk &lt;1.0.e&gt;
       7   /trunk &lt;1.0.b&gt;
       6   /trunk &lt;1.0.9&gt;
       5   /trunk &lt;1.0.7&gt;
       4   /trunk &lt;1.0.6&gt;
       2   /trunk &lt;1.0.3&gt;
       1   /trunk &lt;1.0.2&gt;
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svnlook.c.info">
          <indexterm>
            <primary>svnlook</primary>
            <secondary>subcommands</secondary>
            <tertiary>info</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnlook info</refname>
            <refpurpose>Print the author, datestamp, log message size,
            and log message.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnlook info REPOS_PATH</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Print the author, datestamp, log message size (in bytes)
            and log message, followed by a newline character.</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--revision (-r) REV
--transaction (-t)
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>This shows the info output for revision 40 in our
            sample repository.</para>
            <screen>
$ svnlook info -r 40 /var/svn/repos
sally
2003-02-22 17:44:49 -0600 (Sat, 22 Feb 2003)
16
Rearrange lunch.
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svnlook.c.lock">
          <indexterm>
            <primary>svnlook</primary>
            <secondary>subcommands</secondary>
            <tertiary>lock</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnlook lock</refname>
            <refpurpose>If a lock exists on a path in the repository,
            describe it.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnlook lock REPOS_PATH PATH_IN_REPOS</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Print all information available for the lock at
              <replaceable>PATH_IN_REPOS</replaceable>.  If
              <replaceable>PATH_IN_REPOS</replaceable> is not locked,
              print nothing.</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <para>None</para>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>This describes the lock on the file
            <filename>tree.jpg</filename>.</para>
            <screen>
$ svnlook lock /var/svn/repos tree.jpg
UUID Token: opaquelocktoken:ab00ddf0-6afb-0310-9cd0-dda813329753
Owner: harry
Created: 2005-07-08 17:27:36 -0500 (Fri, 08 Jul 2005)
Expires: 
Comment (1 line):
Rework the uppermost branches on the bald cypress in the foreground.
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svnlook.c.log">
          <indexterm>
            <primary>svnlook</primary>
            <secondary>subcommands</secondary>
            <tertiary>log</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnlook log</refname>
            <refpurpose>Print the log message, followed by a newline 
            character.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnlook log REPOS_PATH</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Print the log message.</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--revision (-r) REV
--transaction (-t)
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>This shows the log output for revision 40 in our sample
            repository:</para>
            <screen>
$ svnlook log /var/svn/repos/
Rearrange lunch.
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svnlook.c.propget">
          <indexterm>
            <primary>svnlook</primary>
            <secondary>subcommands</secondary>
            <tertiary>propget</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnlook propget</refname>
            <refpurpose>Print the raw value of a property on a path in
            the repository.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnlook propget REPOS_PATH PROPNAME [PATH_IN_REPOS]</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>List the value of a property on a path in the
            repository.</para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>pg, pget</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--revision (-r) REV
--transaction (-t)
--revprop
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>This shows the value of the <quote>seasonings</quote> property
            on the file <filename>/trunk/sandwich</filename> in the
            <literal>HEAD</literal> revision:</para>
            <screen>
$ svnlook pg /var/svn/repos seasonings /trunk/sandwich
mustard
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svnlook.c.proplist">
          <indexterm>
            <primary>svnlook</primary>
            <secondary>subcommands</secondary>
            <tertiary>proplist</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnlook proplist</refname>
            <refpurpose>Print the names and values of versioned file and
            directory properties.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnlook proplist REPOS_PATH [PATH_IN_REPOS]</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>List the properties of a path in the repository.  With
            <option>--verbose</option>, show the property values too.</para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>pl, plist</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--revision (-r) REV
--transaction (-t)
--verbose (-v)
--revprop
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>This shows the names of properties set on the file
            <filename>/trunk/README</filename> in the
            <literal>HEAD</literal> revision:</para>
            <screen>
$ svnlook proplist /var/svn/repos /trunk/README
  original-author
  svn:mime-type
</screen>
            <para>This is the same command as in the previous example,
            but this time showing the property values as well:</para>
            <screen>
$ svnlook --verbose proplist /var/svn/repos /trunk/README
  original-author : fitz
  svn:mime-type : text/plain
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svnlook.c.tree">
          <indexterm>
            <primary>svnlook</primary>
            <secondary>subcommands</secondary>
            <tertiary>tree</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnlook tree</refname>
            <refpurpose>Print the tree.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnlook tree REPOS_PATH [PATH_IN_REPOS]</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Print the tree, starting at
            <replaceable>PATH_IN_REPOS</replaceable> (if supplied, at
            the root of the tree otherwise), optionally showing node
            revision IDs.</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--revision (-r) REV
--transaction (-t)
--show-ids
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>This shows the tree output (with node-IDs) for revision
            40 in our sample repository:</para>
            <screen>
$ svnlook tree -r 40 /var/svn/repos --show-ids
/ &lt;0.0.2j&gt;
 trunk/ &lt;p.0.2j&gt;
  vendors/ &lt;q.0.2j&gt;
   deli/ &lt;1g.0.2j&gt;
    egg.txt &lt;1i.e.2j&gt;
    soda.txt &lt;1k.0.2j&gt;
    sandwich.txt &lt;1j.0.2j&gt;
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svnlook.c.uuid">
          <indexterm>
            <primary>svnlook</primary>
            <secondary>subcommands</secondary>
            <tertiary>uuid</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnlook uuid</refname>
            <refpurpose>Print the repository's
          <literal>UUID</literal>.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnlook uuid REPOS_PATH</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Print the <literal>UUID</literal> for the repository.
            the UUID is the repository's
            <emphasis>u</emphasis>niversal <emphasis>u</emphasis>nique
            <emphasis>id</emphasis>entifier.  The Subversion client
            uses this identifier to differentiate between one
            repository and another.</para>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <screen>
$ svnlook uuid /var/svn/repos
e7fe1b91-8cd5-0310-98dd-2f12e793c5e8
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svnlook.c.youngest">
          <indexterm>
            <primary>svnlook</primary>
            <secondary>subcommands</secondary>
            <tertiary>youngest</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnlook youngest</refname>
            <refpurpose>Print the youngest revision number.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnlook youngest REPOS_PATH</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Print the youngest revision number of a repository.</para>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>This shows the youngest revision of our sample
          repository:</para>
            <screen>
$ svnlook youngest /var/svn/repos/ 
42
</screen>
          </refsection>
        </refentry>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.ref.svnsync">
      <info>
        <title>
          <command>svnsync</command>
        </title>
      </info>
      <para><command>svnsync</command> is the Subversion remote
      repository mirroring tool.  Put simply, it allows you to replay
      the revisions of one repository into another one.</para>
      <para>In any mirroring scenario, there are two repositories: the
      source repository, and the mirror (or <quote>sink</quote>)
      repository.  The source repository is the repository from which
      <command>svnsync</command> pulls revisions.  The mirror
      repository is the destination for the revisions pulled from the
      source repository.  Each of the repositories may be local or
      remote&#x2014;they are only ever addressed by their URLs.</para>
      <para>The <command>svnsync</command> process requires only read
      access to the source repository; it never attempts to modify it.
      But obviously, <command>svnsync</command> requires both read and
      write access to the mirror repository.</para>
      <warning>
        <para><command>svnsync</command> is very sensitive to changes
        made in the mirror repository that weren't made as part of a
        mirroring operation.  To prevent this from happening, it's
        best if the <command>svnsync</command> process is the only
        process permitted to modify the mirror repository.</para>
      </warning>
      <!-- =============================================================== -->
      <section xml:id="svn.ref.svnsync.sw">
        <info>
          <title><command>svnsync</command> Options</title>
        </info>
        <variablelist>
          <varlistentry>
            <term>
              <option>--config-dir</option>
              <replaceable>DIR</replaceable>
            </term>
            <listitem>
              <para>Instructs Subversion to read configuration
              information from the specified directory instead of the
              default location (<filename>.subversion</filename> in
              the user's home directory).</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--no-auth-cache</option>
            </term>
            <listitem>
              <para>Prevents caching of authentication information
              (e.g. username and password) in the Subversion
              administrative directories.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--non-interactive</option>
            </term>
            <listitem>
              <para>In the case of an authentication failure, or
              insufficient credentials, prevents prompting for
              credentials (e.g. username or password).  This is useful
              if you're running Subversion inside of an automated
              script and it's more appropriate to have Subversion fail
              than to prompt for more information.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--password</option>
              <replaceable>PASS</replaceable>
            </term>
            <listitem>
              <para>Indicates that you are providing your password for
              authentication on the command line&#x2014;otherwise, if
              it is needed, Subversion will prompt you for
              it.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--username</option>
              <replaceable>NAME</replaceable>
            </term>
            <listitem>
              <para>Indicates that you are providing your username for
              authentication on the command line&#x2014;otherwise, if
              it is needed, Subversion will prompt you for
              it.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.ref.svnsync.c">
        <info>
          <title><command>svnsync</command> Subcommands</title>
        </info>
        <para>Here are the various subcommands:</para>
        <refentry xml:id="svn.ref.svnsync.c.copy-revprops">
          <indexterm>
            <primary>svnsync</primary>
            <secondary>subcommands</secondary>
            <tertiary>copy-revprops</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnsync copy-revprops</refname>
            <refpurpose>Copy all revision properties for a given
            revision from the source repository to the mirror
            repository.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnsync copy-revprops DEST_URL REV</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>Because Subversion revision properties can be changed
            at any time, it's possible that the properties for some
            revision might be changed after that revision has already
            been synchronized to another repository.  Because the
            <command>svnsync synchronize</command> command operates
            only on the range of revisions that have not yet been
            synchronized, it won't notice a revision property change
            outside that range.  Left as is, this causes a deviation
            in the values of that revision's properties between the
            source and mirror repositories.  <command>svnsync
            copy-revprops</command> is the answer to this problem.
            Use it to re-synchronize the revision properties for a
            particular revision.</para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>None</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--non-interactive
--no-auth-cache
--username NAME
--password PASS
--config-dir DIR
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>Re-synchronize revision properties for a single revision:</para>
            <screen>
$ svnsync copy-revprops file:///var/svn/repos-mirror 6
Copied properties for revision 6.
$
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svnsync.c.init">
          <indexterm>
            <primary>svnsync</primary>
            <secondary>subcommands</secondary>
            <tertiary>initialize</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnsync initialize</refname>
            <refpurpose>Initialize a destination repository for
            synchronization from another repository.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnsync initialize DEST_URL SOURCE_URL</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para><command>svnsync initialize</command> verifies that a
            repository meets the requirements of a new mirror
            repository&#x2014;that it has no previous existing version
            history, and that it allows revision property
            modifications&#x2014;and records the initial administrative
            information which associates the mirror repository with
            the source repository.  This is the first
            <command>svnsync</command> operation you run on a would-be
            mirror repository.</para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>init</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--non-interactive
--no-auth-cache
--username NAME
--password PASS
--config-dir DIR
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>Fail to initialize a mirror repository due to
            inability to modify revision properties:</para>
            <screen>
$ svnsync initialize file:///var/svn/repos-mirror http://svn.example.com/repos
svnsync: Repository has not been enabled to accept revision propchanges;
ask the administrator to create a pre-revprop-change hook
$
</screen>
            <para>Initialize a repository as a mirror, having already
            created a pre-revprop-change hook which permits all revision
            property changes:</para>
            <screen>
$ svnsync initialize file:///var/svn/repos-mirror http://svn.example.com/repos
Copied properties for revision 0.
$
</screen>
          </refsection>
        </refentry>
        <refentry xml:id="svn.ref.svnsync.c.sync">
          <indexterm>
            <primary>svnsync</primary>
            <secondary>subcommands</secondary>
            <tertiary>synchronize</tertiary>
          </indexterm>
          <refnamediv>
            <refname>svnsync synchronize</refname>
            <refpurpose>Transfer all pending revisions from the source
            repository to the mirror repository.</refpurpose>
          </refnamediv>
          <refsection>
            <info>
              <title>Synopsis</title>
            </info>
            <programlisting>svnsync synchronize DEST_URL</programlisting>
          </refsection>
          <refsection>
            <info>
              <title>Description</title>
            </info>
            <para>The <command>svnsync synchronize</command> command
            does all the heavy lifting of a repository mirroring
            operation.  After consulting with the mirror repository to
            see which revisions have already been copied into it, it
            then begins copying any not-yet-mirrored revisions from
            the source repository.</para>
            <para><command>svnsync synchronize</command> can be
            gracefully cancelled and restarted.</para>
          </refsection>
          <refsection>
            <info>
              <title>Alternate Names</title>
            </info>
            <para>sync</para>
          </refsection>
          <refsection>
            <info>
              <title>Options</title>
            </info>
            <screen>
--non-interactive
--no-auth-cache
--username NAME
--password PASS
--config-dir DIR
</screen>
          </refsection>
          <refsection>
            <info>
              <title>Examples</title>
            </info>
            <para>Copy unsynchronized revisions from the source
            repository to the mirror repository:</para>
            <screen>
$ svnsync synchronize file:///var/svn/repos-mirror
Committed revision 1.
Copied properties for revision 1.
Committed revision 2.
Copied properties for revision 2.
Committed revision 3.
Copied properties for revision 3.
&#x2026;
Committed revision 45.
Copied properties for revision 45.
Committed revision 46.
Copied properties for revision 46.
Committed revision 47.
Copied properties for revision 47.
$
</screen>
          </refsection>
        </refentry>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.ref.svnserve">
      <info>
        <title>
          <command>svnserve</command>
        </title>
      </info>
      <para><command>svnserve</command> allows access to Subversion
      repositories using Subversion's custom network protocol.</para>
      <para>You can run <command>svnserve</command> as a standalone
      server process (for clients that are using the
      <literal>svn://</literal> access method); you can have a daemon
      such as <command>inetd</command> or <command>xinetd</command>
      launch it for you on demand (also for
      <literal>svn://</literal>), or you can have
      <command>sshd</command> launch it on demand for the
      <literal>svn+ssh://</literal> access method.</para>
      <para>Regardless of the access method, once the client has
      selected a repository by transmitting its URL,
      <command>svnserve</command> reads a file named
      <filename>conf/svnserve.conf</filename> in the repository
      directory to determine repository-specific settings such as
      what authentication database to use and what authorization
      policies to apply.  See <xref linkend="svn.serverconfig.svnserve"/> for details of the
      <filename>svnserve.conf</filename> file.</para>
      <!-- =============================================================== -->
      <section xml:id="svn.ref.svnserve.sw">
        <info>
          <title><command>svnserve</command> Options</title>
        </info>
        <para>Unlike the previous commands we've
        described, <command>svnserve</command> has no
        subcommands&#x2014;<command>svnserve</command> is controlled
        exclusively by options.</para>
        <variablelist>
          <varlistentry>
            <term><option>--daemon</option> (<option>-d</option>)</term>
            <listitem>
              <para>Causes <command>svnserve</command> to run in daemon
              mode.  <command>svnserve</command> backgrounds itself
              and accepts and serves TCP/IP connections on the svn
              port (3690, by default).</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><option>--listen-port</option>=<replaceable>PORT</replaceable></term>
            <listitem>
              <para>Causes svnserve to listen on
              <replaceable>PORT</replaceable> when run in daemon mode.
              (FreeBSD daemons only listen on tcp6 by default&#x2014;this
              option tells them to also listen on tcp4.)</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><option>--listen-host</option>=<replaceable>HOST</replaceable></term>
            <listitem>
              <para>Causes <command>svnserve</command> to listen on the
              interface specified by <replaceable>HOST</replaceable>,
              which may be either a hostname or an IP address.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--foreground</option>
            </term>
            <listitem>
              <para>When used together with <option>-d</option>, this
              option causes <command>svnserve</command> to stay in the
              foreground.  This option is mainly useful for
              debugging.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><option>--inetd</option> (<option>-i</option>)</term>
            <listitem>
              <para>Causes <command>svnserve</command> to use the
              stdin/stdout file descriptors, as is appropriate for a
              daemon running out of <command>inetd</command>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><option>--help</option> (<option>-h</option>)</term>
            <listitem>
              <para>Displays a usage summary and exits.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--version</option>
            </term>
            <listitem>
              <para>Displays version information, a list of repository
            back-end modules available, and exits.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><option>--root</option>=<replaceable>ROOT</replaceable>
          (<option>-r</option>=<replaceable>ROOT</replaceable>)</term>
            <listitem>
              <para>Sets the virtual root for repositories served by
              <command>svnserve</command>.  The pathname in URLs
              provided by the client will be interpreted relative to
              this root, and will not be allowed to escape this
              root.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><option>--tunnel</option> (<option>-t</option>)</term>
            <listitem>
              <para>Causes <command>svnserve</command> to run in tunnel
              mode, which is just like the <command>inetd</command>
              mode of operation (both modes serve one connection over
              stdin/stdout, then exit), except that the connection is
              considered to be pre-authenticated with the username of
              the current uid.  This flag is automatically passed for
              you by the client when running over a tunnel agent such
              as <command>ssh</command>.  That means there's rarely
              any need for <emphasis>you</emphasis> to pass this
              option to <command>svnserve</command>.  So if you find
              yourself typing <literal>svnserve --tunnel</literal> on
              the command line, and wondering what to do next, see
              <xref linkend="svn.serverconfig.svnserve.sshauth"/>.
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>--tunnel-user NAME</option>
            </term>
            <listitem>
              <para>Used in conjunction with the <option>--tunnel</option>
              option; tells svnserve to assume that
              <replaceable>NAME</replaceable> is the authenticated
              user, rather than the UID of the svnserve
              process.  Useful for users wishing to share a single
              system account over SSH, but maintaining separate commit
              identities.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><option>--threads</option> (<option>-T</option>)</term>
            <listitem>
              <para>When running in daemon mode, causes
              <command>svnserve</command> to spawn a thread instead of
              a process for each connection (e.g. for when running on
              Windows).  The <command>svnserve</command> process still
              backgrounds itself at startup time.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term><option>--listen-once</option> (<option>-X</option>)</term>
            <listitem>
              <para>Causes <command>svnserve</command> to accept one
              connection on the svn port, serve it, and exit.  This
              option is mainly useful for debugging.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.ref.svnversion">
      <info>
        <title>
          <command>svnversion</command>
        </title>
      </info>
      <refentry xml:id="svn.ref.svnversion.re">
        <indexterm>
          <primary>svnversion</primary>
        </indexterm>
        <refnamediv>
          <refname>svnversion</refname>
          <refpurpose>Summarize the local revision(s) of a working
                    copy.</refpurpose>
        </refnamediv>
        <refsection xml:id="svn.ref.svnversion.re.syn">
          <info>
            <title>Synopsis</title>
          </info>
          <programlisting>svnversion [OPTIONS] [WC_PATH [TRAIL_URL]]</programlisting>
        </refsection>
        <refsection xml:id="svn.ref.svnversion.re.desc">
          <info>
            <title>Description</title>
          </info>
          <para><command>svnversion</command> is a program for
          summarizing the revision mixture of a working copy.  The
          resultant revision number, or revision range, is written to
          standard output.</para>
          <para>It's common to use this output in your build process
          when defining the version number of your program.</para>
          <para><replaceable>TRAIL_URL</replaceable>, if present, is the
          trailing portion of the URL used to determine if
          <replaceable>WC_PATH</replaceable> itself is switched
          (detection of switches within
          <replaceable>WC_PATH</replaceable> does not rely on
          <replaceable>TRAIL_URL</replaceable>).</para>
          <para>When <replaceable>WC_PATH</replaceable> is not defined,
          the current directory will be used as the working copy path.
          <replaceable>TRAIL_URL</replaceable> cannot be defined if
          <replaceable>WC_PATH</replaceable> is not explicitly
          given.</para>
        </refsection>
        <refsection xml:id="svn.ref.svnversion.re.sw">
          <info>
            <title>Options</title>
          </info>
          <para>Like <command>svnserve</command>,
          <command>svnversion</command> has no subcommands, it only
          has options.</para>
          <variablelist>
            <varlistentry>
              <term><option>--no-newline</option> (<option>-n</option>)</term>
              <listitem>
                <para>Omit the usual trailing newline from the output.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><option>--committed</option> (<option>-c</option>)</term>
              <listitem>
                <para>Use the last-changed revisions rather than the
              current (i.e., highest locally available) revisions.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term><option>--help</option> (<option>-h</option>)</term>
              <listitem>
                <para>Print a help summary.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <option>--version</option>
              </term>
              <listitem>
                <para>Print the version of <command>svnversion</command>
              and exit with no error.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </refsection>
        <refsection xml:id="svn.ref.svnversion.re.examples">
          <info>
            <title>Examples</title>
          </info>
          <para>If the working copy is all at the same revision (for
          example, immediately after an update), then that revision is
          printed out:</para>
          <screen>
$ svnversion
4168
</screen>
          <para>You can add <replaceable>TRAIL_URL</replaceable> to make
          sure that the working copy is not switched from what you
          expect.  Note that the <replaceable>WC_PATH</replaceable>
          is required in this command:</para>
          <screen>
$ svnversion . /var/svn/trunk
4168
</screen>
          <para>For a mixed-revision working copy, the range of
          revisions present is printed:</para>
          <screen>
$ svnversion
4123:4168
</screen>
          <para>If the working copy contains modifications, a trailing
          "M" is added:</para>
          <screen>
$ svnversion
4168M
</screen>
          <para>If the working copy is switched, a trailing "S" is
          added:</para>
          <screen>
$ svnversion
4168S
</screen>
          <para>Thus, here is a mixed-revision, switched working copy
          containing some local modifications:</para>
          <screen>
$ svnversion
4212:4168MS
</screen>
          <para>If invoked on a directory that is not a working copy,
          <command>svnversion</command> assumes it is an exported
          working copy and prints "exported":</para>
          <screen>
$ svnversion
exported
</screen>
        </refsection>
      </refentry>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.ref.mod_dav_svn">
      <info>
        <title>
          <command>mod_dav_svn</command>
        </title>
      </info>
      <refentry xml:id="svn.ref.mod_dav_svn.conf">
        <refnamediv>
          <refname><literal>mod_dav_svn</literal> Configuration
        Directives</refname>
          <refpurpose>Apache configuration
        directives for serving Subversion repositories through Apache
        HTTP Server.</refpurpose>
        </refnamediv>
        <refsection xml:id="svn.ref.mod_dav_svn.conf.desc">
          <info>
            <title>Description</title>
          </info>
          <para>This section briefly describes each of the Subversion
          Apache configuration directives.  For an in-depth
          description of configuring Apache with Subversion, see <xref linkend="svn.serverconfig.httpd"/>.)</para>
        </refsection>
        <refsection xml:id="svn.ref.mod_dav_svn.conf.directives">
          <info>
            <title>Directives</title>
          </info>
          <variablelist>
            <varlistentry>
              <term>
                <literal>DAV svn</literal>
              </term>
              <listitem>
                <para>This directive must be included in any
                <literal>Directory</literal> or
                <literal>Location</literal> block for a Subversion
                repository.  It tells httpd to use the Subversion
                backend for mod_dav to handle all requests.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <literal>SVNAutoversioning On</literal>
              </term>
              <listitem>
                <para>This directive allows write requests from WebDAV
                clients to result in automatic commits.  A generic log
                message is auto-generated and attached to each
                revision.  If you enable Autoversioning, you'll likely
                want to set <literal>ModMimeUsePathInfo On</literal>
                so that <literal>mod_mime</literal> can set
                <literal>svn:mime-type</literal> to the correct
                mime-type automatically (as best as
                <literal>mod_mime</literal> is able to, of course).
                For more information, see <xref linkend="svn.webdav"/></para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <literal>SVNPath</literal>
              </term>
              <listitem>
                <para>This directive specifies the location in the
                filesystem for a Subversion repository's files.  In a
                configuration block for a Subversion repository,
                either this directive or
                <literal>SVNParentPath</literal> must be present, but
                not both.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <literal>SVNSpecialURI</literal>
              </term>
              <listitem>
                <para>Specifies the URI component (namespace) for
                special Subversion resources.  The default is
                <quote><literal>!svn</literal></quote>, and most
                administrators will never use this directive.  Only
                set this if there is a pressing need to have a file
                named <filename>!svn</filename> in your repository.  If
                you change this on a server already in use, it will
                break all of the outstanding working copies and your
                users will hunt you down with pitchforks and flaming
                torches.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <literal>SVNReposName</literal>
              </term>
              <listitem>
                <para>Specifies the name of a Subversion repository for
                use in <literal>HTTP GET</literal> responses.  This
                value will be prepended to the title of all directory
                listings (which are served when you navigate to a
                Subversion repository with a web browser).  This
                directive is optional.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <literal>SVNIndexXSLT</literal>
              </term>
              <listitem>
                <para>Specifies the URI of an XSL transformation for
                directory indexes.  This directive is optional.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <literal>SVNParentPath</literal>
              </term>
              <listitem>
                <para>Specifies the location in the filesystem of a
                parent directory whose child directories are
                Subversion repositories.  In a configuration block for
                a Subversion repository, either this directive or
                <literal>SVNPath</literal> must be present, but not
                both.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>
                <literal>SVNPathAuthz</literal>
              </term>
              <listitem>
                <para>Control path-based authorization by enabling or
                disabling subrequests.  See <xref linkend="svn.serverconfig.httpd.authz.pathauthzoff"/> for details.</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </refsection>
      </refentry>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.ref.properties">
      <info>
        <title>Subversion properties</title>
      </info>
      <para>Subversion allows users to invent arbitrarily-named
      versioned properties on files and directories, as well as
      unversioned properties on revisions.  The only restriction is on
      properties whose names begin with <literal>svn:</literal> (those
      are reserved for Subversion's own use).  While these properties
      may be set by users to control Subversion's behavior, users may
      not invent new <literal>svn:</literal> properties.</para>
      <section xml:id="svn.ref.properties.versioned-props">
        <info>
          <title>Versioned Properties</title>
        </info>
        <variablelist>
          <varlistentry>
            <term>
              <literal>svn:executable</literal>
            </term>
            <listitem>
              <para>If present on a file, the client will make the
              file executable in Unix-hosted working copies.  See
              <xref linkend="svn.advanced.props.special.executable"/>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>svn:mime-type</literal>
            </term>
            <listitem>
              <para>If present on a file, the value indicates the
              file's mime-type.  This allows the client to decide
              whether line-based contextual merging is safe to
              perform during updates, and can also affect how the
              file behaves when fetched via web browser.  See
              <xref linkend="svn.advanced.props.special.mime-type"/>. </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>svn:ignore</literal>
            </term>
            <listitem>
              <para>If present on a directory, the value is a list of
              <emphasis>unversioned</emphasis> file patterns to be ignored
              by <command>svn status</command> and other
              subcommands.  See
              <xref linkend="svn.advanced.props.special.ignore"/></para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>svn:keywords</literal>
            </term>
            <listitem>
              <para>If present on a file, the value tells the client
              how to expand particular keywords within the file.
              See
              <xref linkend="svn.advanced.props.special.keywords"/>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>svn:eol-style</literal>
            </term>
            <listitem>
              <para>If present on a file, the value tells the client how
              to manipulate the file's line-endings in the working
              copy, and in exported trees.  See <xref linkend="svn.advanced.props.special.eol-style"/> and
              <xref linkend="svn.ref.svn.c.export"/>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>svn:externals</literal>
            </term>
            <listitem>
              <para>If present on a directory, the value is a
              multi-line list of other paths and URLs the client
              should check out.  See
              <xref linkend="svn.advanced.externals"/>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>svn:special</literal>
            </term>
            <listitem>
              <para>If present on a file, indicates that the file is not
              an ordinary file, but a symbolic link or other special
              object<footnote><para>As of this writing, symbolic links
              are indeed the only <quote>special</quote> objects.  But
              there might be more in future releases of
              Subversion.</para></footnote>.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>svn:needs-lock</literal>
            </term>
            <listitem>
              <para>If present on a file, tells the client to make the
              file read-only in the working copy, as a reminder that
              the file should be locked before editing begins.  See
              <xref linkend="svn.advanced.locking.lock-communication"/>.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
      <section xml:id="svn.ref.properties.unversioned-props">
        <info>
          <title>Unversioned Properties</title>
        </info>
        <variablelist>
          <varlistentry>
            <term>
              <literal>svn:author</literal>
            </term>
            <listitem>
              <para>If present, contains the authenticated username of
              the person who created the revision.  (If not present,
              then the revision was committed anonymously.)</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>svn:date</literal>
            </term>
            <listitem>
              <para>Contains the UTC time the revision was created, in
              ISO 8601 format.  The value comes from the
              <emphasis>server</emphasis> machine's clock, not the
              client's.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>svn:log</literal>
            </term>
            <listitem>
              <para>Contains the log message describing the
              revision.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <literal>svn:autoversioned</literal>
            </term>
            <listitem>
              <para>If present, the revision was created via the
              autoversioning feature.  See
              <xref linkend="svn.webdav.autoversioning"/>.</para>
            </listitem>
          </varlistentry>
        </variablelist>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.ref.reposhooks">
      <info>
        <title>Repository Hooks</title>
      </info>
      <!-- =============================================================== -->
      <refentry xml:id="svn.ref.reposhooks.start-commit">
        <indexterm>
          <primary>repository</primary>
          <secondary>hooks</secondary>
          <tertiary>start-commit</tertiary>
        </indexterm>
        <refnamediv>
          <refname>start-commit</refname>
          <refpurpose>Notification of the beginning of a commit.</refpurpose>
        </refnamediv>
        <refsection>
          <info>
            <title>Description</title>
          </info>
          <para>The start-commit hook is run before the commit
          transaction is even created.  It is typically used to
          decide if the user has commit privileges at all.</para>
          <para>If the start-commit hook program returns a non-zero exit
          value, the commit is stopped before the commit transaction
          is even created, and anything printed to stderr is
          marshalled back to the client.</para>
        </refsection>
        <refsection>
          <info>
            <title>Input Parameter(s)</title>
          </info>
          <para>The command-line arguments passed to the hook program,
          in order, are:</para>
          <orderedlist inheritnum="ignore" continuation="restarts">
            <listitem>
              <para>repository path</para>
            </listitem>
            <listitem>
              <para>authenticated username attempting the commit</para>
            </listitem>
          </orderedlist>
        </refsection>
        <refsection>
          <info>
            <title>Common Uses</title>
          </info>
          <para>access control</para>
        </refsection>
        <!-- TODO(fitz): 1.5 Give a good example here of what we might use
        start-commit for (eg lock out commits temporarily for some reason).  -->
      </refentry>
      <!-- =============================================================== -->
      <refentry xml:id="svn.ref.reposhooks.pre-commit">
        <indexterm>
          <primary>repository</primary>
          <secondary>hooks</secondary>
          <tertiary>pre-commit</tertiary>
        </indexterm>
        <refnamediv>
          <refname>pre-commit</refname>
          <refpurpose>Notification just prior to commit completion.</refpurpose>
        </refnamediv>
        <refsection>
          <info>
            <title>Description</title>
          </info>
          <para>The pre-commit hook is run just before a commit
          transaction is promoted to a new revision.  Typically,
          this hook is used to protect against commits that are
          disallowed due to content or location (for example, your
          site might require that all commits to a certain branch
          include a ticket number from the bug tracker, or that the
          incoming log message is non-empty).</para>
          <para>If the pre-commit hook program returns a non-zero exit
          value, the commit is aborted, the commit transaction is
          removed, and anything printed to stderr is marshalled back
          to the client.</para>
        </refsection>
        <refsection>
          <info>
            <title>Input Parameter(s)</title>
          </info>
          <para>The command-line arguments passed to the hook program,
          in order, are:</para>
          <orderedlist inheritnum="ignore" continuation="restarts">
            <listitem>
              <para>repository path</para>
            </listitem>
            <listitem>
              <para>commit transaction name</para>
            </listitem>
          </orderedlist>
        </refsection>
        <refsection>
          <info>
            <title>Common Uses</title>
          </info>
          <para>change validation and control</para>
        </refsection>
      </refentry>
      <!-- =============================================================== -->
      <refentry xml:id="svn.ref.reposhooks.post-commit">
        <indexterm>
          <primary>repository</primary>
          <secondary>hooks</secondary>
          <tertiary>post-commit</tertiary>
        </indexterm>
        <refnamediv>
          <refname>post-commit</refname>
          <refpurpose>Notification of a successful commit.</refpurpose>
        </refnamediv>
        <refsection>
          <info>
            <title>Description</title>
          </info>
          <para>The post-commit hook is run after the transaction is
          committed, and a new revision created.  Most people use
          this hook to send out descriptive emails about the commit
          or to notify some other tool (such as an issue tracker)
          that a commit has happened.  Some configurations also use
          this hook to trigger backup processes.</para>
          <para>The output from, and exit value returned by the
          post-commit hook program are ignored.</para>
        </refsection>
        <refsection>
          <info>
            <title>Input Parameter(s)</title>
          </info>
          <para>The command-line arguments passed to the hook program,
          in order, are:</para>
          <orderedlist inheritnum="ignore" continuation="restarts">
            <listitem>
              <para>repository path</para>
            </listitem>
            <listitem>
              <para>revision number created by the commit</para>
            </listitem>
          </orderedlist>
        </refsection>
        <refsection>
          <info>
            <title>Common Uses</title>
          </info>
          <para>commit notification, tool integration</para>
        </refsection>
      </refentry>
      <!-- =============================================================== -->
      <refentry xml:id="svn.ref.reposhooks.pre-revprop-change">
        <indexterm>
          <primary>repository</primary>
          <secondary>hooks</secondary>
          <tertiary>pre-revprop-change</tertiary>
        </indexterm>
        <refnamediv>
          <refname>pre-revprop-change</refname>
          <refpurpose>Notification of a revision property change
          attempt.</refpurpose>
        </refnamediv>
        <refsection>
          <info>
            <title>Description</title>
          </info>
          <para>The pre-revprop-change hook is run immediately prior to
          the modification of a revision property when performed
          outside the scope of a normal commit.  Unlike the other
          hooks, the default state of this one is to deny the proposed
          action.  The hook must actually exist and return a zero
          exit value before a revision property modification can
          happen.</para>
          <para>If the pre-revprop-change hook doesn't exist, isn't
          executable, or returns a non-zero exit value, no change to
          the property will be made, and anything printed to stderr is
          marshalled back to the client.</para>
        </refsection>
        <refsection>
          <info>
            <title>Input Parameter(s)</title>
          </info>
          <para>The command-line arguments passed to the hook program,
          in order, are:</para>
          <orderedlist inheritnum="ignore" continuation="restarts">
            <listitem>
              <para>repository path</para>
            </listitem>
            <listitem>
              <para>revision whose property is about to be modified</para>
            </listitem>
            <listitem>
              <para>authenticated username attempting the propchange</para>
            </listitem>
            <listitem>
              <para>name of the property changed</para>
            </listitem>
            <listitem>
              <para>change description: <literal>A</literal> (added),
              <literal>D</literal> (deleted), or <literal>M</literal>
              (modified)</para>
            </listitem>
          </orderedlist>
          <para>Additionally, Subversion passes to the hook program via
          standard input the proposed value of the property.</para>
        </refsection>
        <refsection>
          <info>
            <title>Common Uses</title>
          </info>
          <para>access control, change validation and control</para>
        </refsection>
      </refentry>
      <!-- =============================================================== -->
      <refentry xml:id="svn.ref.reposhooks.post-revprop-change">
        <indexterm>
          <primary>repository</primary>
          <secondary>hooks</secondary>
          <tertiary>post-revprop-change</tertiary>
        </indexterm>
        <refnamediv>
          <refname>post-revprop-change</refname>
          <refpurpose>Notification of a successful revision property 
          change.</refpurpose>
        </refnamediv>
        <refsection>
          <info>
            <title>Description</title>
          </info>
          <para>The post-revprop-change hook is run immediately after to
          the modification of a revision property when performed
          outside the scope of a normal commit.  As can be derived
          from the description of its counterpart, the
          pre-revprop-change hook, this hook will not run at all
          unless the pre-revprop-change hook is implemented.  It is
          typically used to send email notification of the property
          change.</para>
          <para>The output from, and exit value returned by, the
          post-revprop-change hook program are ignored.</para>
        </refsection>
        <refsection>
          <info>
            <title>Input Parameter(s)</title>
          </info>
          <para>The command-line arguments passed to the hook program,
          in order, are:</para>
          <orderedlist inheritnum="ignore" continuation="restarts">
            <listitem>
              <para>repository path</para>
            </listitem>
            <listitem>
              <para>revision whose property was modified</para>
            </listitem>
            <listitem>
              <para>authenticated username of the person making the change</para>
            </listitem>
            <listitem>
              <para>name of the property changed</para>
            </listitem>
            <listitem>
              <para>change description: <literal>A</literal> (added),
              <literal>D</literal> (deleted), or <literal>M</literal>
              (modified)</para>
            </listitem>
          </orderedlist>
          <para>Additionally, Subversion passes to the hook program, via
          standard input, the previous value of the property.</para>
        </refsection>
        <refsection>
          <info>
            <title>Common Uses</title>
          </info>
          <para>propchange notification</para>
        </refsection>
      </refentry>
      <!-- =============================================================== -->
      <refentry xml:id="svn.ref.reposhooks.pre-lock">
        <indexterm>
          <primary>repository</primary>
          <secondary>hooks</secondary>
          <tertiary>pre-lock</tertiary>
        </indexterm>
        <refnamediv>
          <refname>pre-lock</refname>
          <refpurpose>Notification of a path lock attempt.</refpurpose>
        </refnamediv>
        <refsection>
          <info>
            <title>Description</title>
          </info>
          <para>The pre-lock hook runs whenever someone attempts to lock
          a path.  It can be used to prevent locks altogether, or to
          create a more complex policy specifying exactly which users
          are allowed to lock particular paths.  If the hook notices a
          pre-existing lock, then it can also decide whether a user is
          allowed to <quote>steal</quote> the existing lock.</para>
          <para>If the pre-lock hook program returns a non-zero exit
          value, the lock action is aborted and anything printed to
          stderr is marshalled back to the client.</para>
        </refsection>
        <refsection>
          <info>
            <title>Input Parameter(s)</title>
          </info>
          <para>The command-line arguments passed to the hook program,
          in order, are:</para>
          <orderedlist inheritnum="ignore" continuation="restarts">
            <listitem>
              <para>repository path</para>
            </listitem>
            <listitem>
              <para>versioned path which is to be locked</para>
            </listitem>
            <listitem>
              <para>authenticated username of the person attempting the 
              lock</para>
            </listitem>
          </orderedlist>
        </refsection>
        <refsection>
          <info>
            <title>Common Uses</title>
          </info>
          <para>access control</para>
        </refsection>
      </refentry>
      <!-- =============================================================== -->
      <refentry xml:id="svn.ref.reposhooks.post-lock">
        <indexterm>
          <primary>repository</primary>
          <secondary>hooks</secondary>
          <tertiary>post-lock</tertiary>
        </indexterm>
        <refnamediv>
          <refname>post-lock</refname>
          <refpurpose>Notification of a successful path lock.</refpurpose>
        </refnamediv>
        <refsection>
          <info>
            <title>Description</title>
          </info>
          <para>The post-lock hook runs after one or more paths has been
          locked.  It is typically used to send email notification of
          the lock event.</para>
          <para>The output from and exit value returned by the post-lock
          hook program are ignored.</para>
        </refsection>
        <refsection>
          <info>
            <title>Input Parameter(s)</title>
          </info>
          <para>The command-line arguments passed to the hook program,
          in order, are:</para>
          <orderedlist inheritnum="ignore" continuation="restarts">
            <listitem>
              <para>repository path</para>
            </listitem>
            <listitem>
              <para>authenticated username of the person who locked the 
              paths</para>
            </listitem>
          </orderedlist>
          <para>Additionally, the list of paths locked is passed to the
          hook program via standard input, one path per line.</para>
        </refsection>
        <refsection>
          <info>
            <title>Common Uses</title>
          </info>
          <para>lock notification</para>
        </refsection>
      </refentry>
      <!-- =============================================================== -->
      <refentry xml:id="svn.ref.reposhooks.pre-unlock">
        <indexterm>
          <primary>repository</primary>
          <secondary>hooks</secondary>
          <tertiary>pre-unlock</tertiary>
        </indexterm>
        <refnamediv>
          <refname>pre-unlock</refname>
          <refpurpose>Notification of a path unlock attempt.</refpurpose>
        </refnamediv>
        <refsection>
          <info>
            <title>Description</title>
          </info>
          <para>The pre-unlock hook runs whenever someone attempts to
          remove a lock on a file.  It can be used to create policies
          that specify which users are allowed to unlock particular
          paths.  It's particularly important for determining policies
          about lock breakage.  If user A locks a file, is user B
          allowed to break the lock?  What if the lock is more than a
          week old?  These sorts of things can be decided and enforced
          by the hook.</para>
          <para>If the pre-unlock hook program returns a non-zero exit
          value, the unlock action is aborted and anything printed to
          stderr is marshalled back to the client.</para>
        </refsection>
        <refsection>
          <info>
            <title>Input Parameter(s)</title>
          </info>
          <para>The command-line arguments passed to the hook program,
          in order, are:</para>
          <orderedlist inheritnum="ignore" continuation="restarts">
            <listitem>
              <para>repository path</para>
            </listitem>
            <listitem>
              <para>versioned path which is to be locked</para>
            </listitem>
            <listitem>
              <para>authenticated username of the person attempting the 
              lock</para>
            </listitem>
          </orderedlist>
        </refsection>
        <refsection>
          <info>
            <title>Common Uses</title>
          </info>
          <para>access control</para>
        </refsection>
      </refentry>
      <!-- =============================================================== -->
      <refentry xml:id="svn.ref.reposhooks.post-unlock">
        <indexterm>
          <primary>repository</primary>
          <secondary>hooks</secondary>
          <tertiary>post-unlock</tertiary>
        </indexterm>
        <refnamediv>
          <refname>post-unlock</refname>
          <refpurpose>Notification of a successful path unlock.</refpurpose>
        </refnamediv>
        <refsection>
          <info>
            <title>Description</title>
          </info>
          <para>The post-unlock hook runs after one or more paths has
          been unlocked.  It is typically used to send email
          notification of the unlock event.</para>
          <para>The output from and exit value returned by, the
          post-unlock hook program are ignored.</para>
        </refsection>
        <refsection>
          <info>
            <title>Input Parameter(s)</title>
          </info>
          <para>The command-line arguments passed to the hook program,
          in order, are:</para>
          <orderedlist inheritnum="ignore" continuation="restarts">
            <listitem>
              <para>repository path</para>
            </listitem>
            <listitem>
              <para>authenticated username of the person who unlocked the 
              paths</para>
            </listitem>
          </orderedlist>
          <para>Additionally, the list of paths unlocked is passed to the
          hook program via standard input, one path per line.</para>
        </refsection>
        <refsection>
          <info>
            <title>Common Uses</title>
          </info>
          <para>unlock notification</para>
        </refsection>
      </refentry>
    </section>
  </chapter>
  <!--
local variables: 
sgml-parent-document: ("book.xml" "chapter")
end:
-->
  <appendix xml:id="svn.intro">
    <info>
      <title>Subversion Quick-Start Guide</title>
    </info>
    <para>If you're eager to get Subversion up and running (and you
    enjoy learning by experimentation), this chapter will show you how
    to create a repository, import code, and then check it back out
    again as a working copy.  Along the way, we give links to the
    relevant chapters of this book.</para>
    <warning>
      <para>If you're new to the entire concept of version control or to
    the <quote>copy-modify-merge</quote> model used by both CVS and
    Subversion, then you should read <xref linkend="svn.basic"/>
    before going any further.</para>
    </warning>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.intro.install">
      <info>
        <title>Installing Subversion</title>
      </info>
      <para>Subversion is built on a portability layer called
      APR&#x2014;the Apache Portable Runtime library.  The APR library
      provides all the interfaces that Subversion needs to function on
      different operating systems: disk access, network access, memory
      management, and so on.  While Subversion is able to use Apache
      as one of its network server programs, its dependence on APR
      <emphasis>does not</emphasis> mean that Apache is a required
      component.  APR is a standalone library useable by any
      application.  It does mean, however, that like Apache,
      Subversion clients and servers run on any operating system that
      the Apache httpd server runs on: Windows, Linux, all flavors of
      BSD, Mac OS X, Netware, and others.</para>
      <para>The easiest way to get Subversion is to download a binary
      package built for your operating system.  Subversion's website
      (<uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://subversion.tigris.org">http://subversion.tigris.org</uri>) often has these
      packages available for download, posted by volunteers.  The site
      usually contains graphical installer packages for users of
      Microsoft operating systems.  If you run a Unix-like operating
      system, you can use your system's native package distribution
      system (RPMs, DEBs, the ports tree, etc.) to get
      Subversion.</para>
      <para>Alternately, you can build Subversion directly from source
      code, though it's not always an easy task. (If you're not
      experienced at building open source software packages, you're
      probably better off downloading a binary distribution instead!)
      From the Subversion website, download the latest source-code
      release.  After unpacking it, follow the instructions in
      the <filename>INSTALL</filename> file to build it.  Note that a
      released source package may not contain everything you need to
      build a command-line client capable of talking to a remote
      repository.  Starting with Subversion 1.4 and later, the
      libraries Subversion depends on (apr, apr-util, and neon) are
      distributed in a separate source package suffixed
      with <filename>-deps</filename>.  These libraries are now common
      enough that they may already be installed on your system.  If
      not, you'll need to unpack the dependency package into the same
      directory where you unpacked the main Subversion source.
      Regardless, it's possible that you may want to fetch other
      optional dependencies such as Berkeley DB and possibly Apache
      httpd.  If you want to do a complete build, make sure you have
      all of the packages documented in
      the <filename>INSTALL</filename> file.</para>
      <para>If you're one of those folks that likes to use bleeding-edge
      software, you can also get the Subversion source code from the
      Subversion repository in which it lives.  Obviously, you'll need
      to already have a Subversion client on hand to do this.  But
      once you do, you can check out a working copy of the Subversion source
      repository from <uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://svn.collab.net/repos/svn/trunk/">http://svn.collab.net/repos/svn/trunk/</uri>:
      <footnote><para>Note that the URL checked out in the example above
          ends not with <literal>svn</literal>, but with a
          subdirectory thereof called <literal>trunk</literal>.  See
          our discussion of Subversion's branching and tagging model
          for the reasoning behind this.</para></footnote></para>
      <screen>
$ svn checkout http://svn.collab.net/repos/svn/trunk subversion
A    subversion/HACKING
A    subversion/INSTALL
A    subversion/README
A    subversion/autogen.sh
A    subversion/build.conf
&#x2026;
</screen>
      <para>The above command will create a working copy of the latest
      (unreleased) Subversion source code into a subdirectory
      named <filename>subversion</filename> in your current working
      directory.  You can adjust that last argument as you see fit.
      Regardless of what you call the new working copy directory,
      though, after this operation completes, you will now have the
      Subversion source code.  Of course, you will still need to fetch
      a few helper libraries (apr, apr-util, etc.)&#x2014;see
      the <filename>INSTALL</filename> file in the top level of the
      working copy for details.</para>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.intro.quickstart">
      <info>
        <title>High-speed Tutorial</title>
      </info>
      <blockquote>
        <para>
          <quote>Please make sure your seat backs are in their full,
        upright position, and that your tray tables are stored.
        Flight attendants, prepare for take-off&#x2026;.</quote>
        </para>
      </blockquote>
      <para>What follows is a quick tutorial that walks you through some
      basic Subversion configuration and operation.  When you finish
      it, you should have a basic understanding of Subversion's
      typical usage.</para>
      <note>
        <para>The examples used in this appendix assume that you have
        <command>svn</command>, the Subversion command-line client,
        and <command>svnadmin</command>, the administrative tool,
        ready to go on a Unix-like operating system.  (This tutorial
        also works at the Windows commandline prompt, assuming you
        make some obvious tweaks.)  We also assume you are using
        Subversion 1.2 or later (run <command>svn --version</command>
        to check.)</para>
      </note>
      <para>Subversion stores all versioned data in a central
      repository.  To begin, create a new repository:</para>
      <screen>
$ svnadmin create /var/svn/repos
$ ls /var/svn/repos
conf/  dav/  db/  format  hooks/  locks/  README.txt
</screen>
      <para>This command creates a new directory
      <filename>/var/svn/repos</filename> which contains a Subversion
      repository.  This new directory contains (among other things) a
      collection of database files.  You won't see your versioned
      files if you peek inside.  For more information about repository
      creation and maintenance, see
      <xref linkend="svn.reposadmin"/>.</para>
      <para>Subversion has no concept of a <quote>project</quote>.  The
      repository is just a virtual versioned filesystem, a large tree
      that can hold anything you wish.  Some administrators prefer to
      store only one project in a repository, and others prefer to
      store multiple projects in a repository by placing them into
      separate directories.  The merits of each approach are discussed
      in <xref linkend="svn.reposadmin.projects.chooselayout"/>.
      Either way, the repository only manages files and directories,
      so it's up to humans to interpret particular directories
      as <quote>projects</quote>.  So while you might see references
      to projects throughout this book, keep in mind that we're only
      ever talking about some directory (or collection of directories)
      in the repository.</para>
      <para>In this example, we assume that you already have some sort
      of project (a collection of files and directories) that you wish
      to import into your newly created Subversion repository.  Begin
      by organizing your data into a single directory
      called <filename>myproject</filename> (or whatever you wish).
      For reasons that will be clear later (see
      <xref linkend="svn.branchmerge"/>), your project's tree
      structure should contain three top-level directories
      named <filename>branches</filename>,
      <filename>tags</filename>, and
      <filename>trunk</filename>.  The <filename>trunk</filename>
      directory should contain all of your data,
      while <filename>branches</filename>
      and <filename>tags</filename> directories are empty:</para>
      <screen>
/tmp/myproject/branches/
/tmp/myproject/tags/
/tmp/myproject/trunk/
                     foo.c
                     bar.c
                     Makefile
                     &#x2026;
</screen>
      <para>The <filename>branches</filename>, <filename>tags</filename>,
      and <filename>trunk</filename> subdirectories aren't actually
      required by Subversion.  They're merely a popular convention
      that you'll most likely want to use later on.</para>
      <para>Once you have your tree of data ready to go, import it into
      the repository with the <command>svn import</command> command
      (see <xref linkend="svn.tour.importing"/>):</para>
      <screen>
$ svn import /tmp/myproject file:///var/svn/repos/myproject -m "initial import"
Adding         /tmp/myproject/branches
Adding         /tmp/myproject/tags
Adding         /tmp/myproject/trunk
Adding         /tmp/myproject/trunk/foo.c
Adding         /tmp/myproject/trunk/bar.c
Adding         /tmp/myproject/trunk/Makefile
&#x2026;
Committed revision 1.
$ 
</screen>
      <para>Now the repository contains this tree of data.  As mentioned
      earlier, you won't see your files by directly peeking into the
      repository;  they're all stored within a database.  But the
      repository's imaginary filesystem now contains a top-level
      directory named <filename>myproject</filename>, which in turn
      contains your data.</para>
      <para>Note that the original <filename>/tmp/myproject</filename>
      directory is unchanged; Subversion is unaware of it.  (In fact,
      you can even delete that directory if you wish.)  In order to
      start manipulating repository data, you need to create a new
      <quote>working copy</quote> of the data, a sort of private
      workspace.  Ask Subversion to <quote>check out</quote> a working
      copy of the <filename>myproject/trunk</filename> directory in
      the repository:</para>
      <screen>
$ svn checkout file:///var/svn/repos/myproject/trunk myproject
A  myproject/foo.c
A  myproject/bar.c
A  myproject/Makefile
&#x2026;
Checked out revision 1.
</screen>
      <para>Now you have a personal copy of part of the repository in a
      new directory named <filename>myproject</filename>.  You can edit
      the files in your working copy and then commit those changes
      back into the repository.</para>
      <itemizedlist>
        <listitem>
          <para>Enter your working copy and edit a file's
          contents.</para>
        </listitem>
        <listitem>
          <para>Run <command>svn diff</command> to see unified diff
          output of your changes.</para>
        </listitem>
        <listitem>
          <para>Run <command>svn commit</command> to commit the new
          version of your file to the repository.</para>
        </listitem>
        <listitem>
          <para>Run <command>svn update</command> to bring your working
          copy <quote>up-to-date</quote> with the repository.</para>
        </listitem>
      </itemizedlist>
      <para>For a full tour of all the things you can do with your
      working copy, read <xref linkend="svn.tour"/>.</para>
      <para>At this point, you have the option of making your repository
      available to others over a network.  See <xref linkend="svn.serverconfig"/> to learn about the different sorts of
      server processes available and how to configure them.</para>
      <!-- ### TODO: Let's make this into a full tutorial, rather than
             simply referring off to other sections. ### -->
    </section>
  </appendix>
  <!--
local variables: 
sgml-parent-document: ("book.xml" "appendix")
end:
-->
  <appendix xml:id="svn.forcvs">
    <info>
      <title>Subversion for CVS Users</title>
    </info>
    <para>This appendix is a guide for CVS users new to Subversion.
    It's essentially a list of differences between the two systems
    as <quote>viewed from 10,000 feet</quote>.  For each section, we
    provide backreferences to relevant chapters when
    possible.</para>
    <para>Although the goal of Subversion is to take over the current
    and future CVS user base, some new features and design changes
    were required to fix certain <quote>broken</quote> behaviors
    that CVS had.  This means that, as a CVS user, you may need to
    break habits&#x2014;ones that you forgot were odd to begin
    with.</para>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.forcvs.revnums">
      <info>
        <title>Revision Numbers Are Different Now</title>
      </info>
      <para>In CVS, revision numbers are per-file.  This is because CVS
      stores its data in RCS files; each file has a corresponding RCS
      file in the repository, and the repository is roughly laid out
      according to the structure of your project tree.</para>
      <para>In Subversion, the repository looks like a single
      filesystem.  Each commit results in an entirely new filesystem
      tree; in essence, the repository is an array of trees.  Each of
      these trees is labeled with a single revision number.  When
      someone talks about <quote>revision 54</quote>, they're talking
      about a particular tree (and indirectly, the way the filesystem
      looked after the 54th commit).</para>
      <para>Technically, it's not valid to talk about <quote>revision 5
      of <filename>foo.c</filename></quote>.  Instead, one would say
      <quote><filename>foo.c</filename> as it appears in revision
      5</quote>.  Also, be careful when making assumptions about the
      evolution of a file.  In CVS, revisions 5 and 6 of
      <filename>foo.c</filename> are always different.  In Subversion,
      it's most likely that <filename>foo.c</filename> did
      <emphasis>not</emphasis> change between revisions 5 and
      6.</para>
      <para>Similarly, in CVS a tag or branch is an annotation on the
      file, or on the version information for that individual file,
      whereas in Subversion a tag or branch is a copy of an entire
      tree (by convention, into the <filename>/branches</filename>
      or <filename>/tags</filename> directories that appear at the top
      level of the repository, beside <filename>/trunk</filename>). In
      the repository as a whole, many versions of each file may be
      visible: the latest version on each branch, every tagged
      version, and of course the latest version on the trunk
      itself. So, to refine the terms even further, one would often
      say <quote><filename>foo.c</filename> as it appears in
      <filename>/branches/REL1</filename> in revision
      5.</quote></para>
      <para>For more details on this topic, see <xref linkend="svn.basic.in-action.revs"/>.</para>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.forcvs.directories">
      <info>
        <title>Directory Versions</title>
      </info>
      <para>Subversion tracks tree structures, not just file contents.
      It's one of the biggest reasons Subversion was written to
      replace CVS.</para>
      <para>Here's what this means to you, as a former CVS user:</para>
      <itemizedlist>
        <listitem>
          <para>The <command>svn add</command> and <command>svn
          delete</command> commands work on directories now, just as
          they work on files.  So do <command>svn copy</command> and
          <command>svn move</command>.  However, these commands do
          <emphasis>not</emphasis> cause any kind of immediate change
          in the repository.  Instead, the working items are simply
          <quote>scheduled</quote> for addition or deletion.  No
          repository changes happen until you run <command>svn
          commit</command>.</para>
        </listitem>
        <listitem>
          <para>Directories aren't dumb containers anymore; they have
          revision numbers like files.  (Or more properly, it's
          correct to talk about <quote>directory
          <filename>foo/</filename> in revision 5</quote>.)</para>
        </listitem>
      </itemizedlist>
      <para>Let's talk more about that last point.  Directory versioning
      is a hard problem; because we want to allow mixed-revision
      working copies, there are some limitations on how far we can
      abuse this model.</para>
      <para>From a theoretical point of view, we define <quote>revision
      5 of directory <filename>foo</filename></quote> to mean a
      specific collection of directory-entries and properties.  Now
      suppose we start adding and removing files from
      <filename>foo</filename>, and then commit.  It would be a lie
      to say that we still have revision 5 of
      <filename>foo</filename>.  However, if we bumped
      <filename>foo</filename>'s revision number after the commit,
      that would be a lie too; there may be other changes to
      <filename>foo</filename> we haven't yet received, because we
      haven't updated yet.</para>
      <para>Subversion deals with this problem by quietly tracking
      committed adds and deletes in the <filename>.svn</filename>
      area.  When you eventually run <command>svn update</command>,
      all accounts are settled with the repository, and the
      directory's new revision number is set correctly.
      <emphasis>Therefore, only after an update is it truly safe to
      say that you have a <quote>perfect</quote> revision of a
      directory.</emphasis> Most of the time, your working copy will
      contain <quote>imperfect</quote> directory revisions.</para>
      <para>Similarly, a problem arises if you attempt to commit
      property changes on a directory.  Normally, the commit would
      bump the working directory's local revision number.  But again,
      that would be a lie, because there may be adds or deletes that
      the directory doesn't yet have, because no update has happened.
      <emphasis>Therefore, you are not allowed to commit
      property-changes on a directory unless the directory is
      up-to-date.</emphasis></para>
      <para>For more discussion about the limitations of directory
      versioning, see <xref linkend="svn.basic.in-action.mixedrevs"/>.</para>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.forcvs.disconnected">
      <info>
        <title>More Disconnected Operations</title>
      </info>
      <para>In recent years, disk space has become outrageously cheap
      and abundant, but network bandwidth has not.  Therefore, the
      Subversion working copy has been optimized around the scarcer
      resource.</para>
      <para>The <filename>.svn</filename> administrative directory
      serves the same purpose as the <filename>CVS</filename>
      directory, except that it also stores read-only,
      <quote>pristine</quote> copies of your files.  This allows you
      to do many things off-line:</para>
      <variablelist>
        <varlistentry>
          <term>
            <command>svn status</command>
          </term>
          <listitem>
            <para>Shows you any local changes you've made (see <xref linkend="svn.tour.cycle.examine.status"/>)</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <command>svn diff</command>
          </term>
          <listitem>
            <para>Shows you the details of your changes (see <xref linkend="svn.tour.cycle.examine.diff"/>)</para>
          </listitem>
        </varlistentry>
        <varlistentry>
          <term>
            <command>svn revert</command>
          </term>
          <listitem>
            <para>Removes your local changes (see <xref linkend="svn.tour.cycle.revert"/>)</para>
          </listitem>
        </varlistentry>
      </variablelist>
      <para>Also, the cached pristine files allow the Subversion client
      to send differences when committing, which CVS cannot do.</para>
      <para>The last subcommand in the list is new; it will not only
      remove local changes, but it will un-schedule operations such as
      adds and deletes.  It's the preferred way to revert a file;
      running <command>rm file; svn update</command> will still work, but
      it blurs the purpose of updating.  And, while we're on this
      subject&#x2026;

    </para>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.forcvs.status-vs-update">
      <info>
        <title>Distinction Between Status and Update</title>
      </info>
      <para>In Subversion, we've tried to erase a lot of the confusion
      between the <command>cvs status</command> and
      <command>cvs update</command> commands.</para>
      <para>The <command>cvs status</command> command has two purposes:
      first, to show the user any local modifications in the working
      copy, and second, to show the user which files are out-of-date.
      Unfortunately, because of CVS's hard-to-read status output, many
      CVS users don't take advantage of this command at all.  Instead,
      they've developed a habit of running <command>cvs
      update</command> or <command>cvs -n update</command> to quickly
      see their changes.  If users forget to use
      the <option>-n</option> option, this has the side effect of
      merging repository changes they may not be ready to deal
      with.</para>
      <para>With Subversion, we've tried to remove this muddle by making
      the output of <command>svn status</command> easy to read for
      both humans and parsers.  Also, <command>svn update</command>
      only prints information about files that are updated,
      <emphasis>not</emphasis> local modifications.</para>
      <section xml:id="svn.forcvs.status-vs-update.status">
        <info>
          <title>Status</title>
        </info>
        <para><command>svn status</command> prints all files that have
        local modifications.  By default, the repository is not
        contacted.  While this subcommand accepts a fair number of
        options, the following are the most commonly used ones:</para>
        <variablelist>
          <varlistentry>
            <term>
              <option>-u</option>
            </term>
            <listitem>
              <para>Contact the repository to determine, and then display,
              out-of-dateness information.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>-v</option>
            </term>
            <listitem>
              <para>Show <emphasis>all</emphasis> entries under
              version control.</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>
              <option>-N</option>
            </term>
            <listitem>
              <para>Run non-recursively (do not descend into
              subdirectories).</para>
            </listitem>
          </varlistentry>
        </variablelist>
        <para>The <command>status</command> command has two output
        formats.  In the default <quote>short</quote> format, local
        modifications look like this:</para>
        <screen>
$ svn status
M      foo.c
M      bar/baz.c
</screen>
        <para>If you specify the <option>--show-updates</option>
        (<option>-u</option>) option, a longer output format is
        used:</para>
        <screen>
$ svn status -u
M            1047   foo.c
       *     1045   faces.html
       *            bloo.png
M            1050   bar/baz.c
Status against revision:   1066
</screen>
        <para>In this case, two new columns appear.  The second column
        contains an asterisk if the file or directory is out-of-date.
        The third column shows the working-copy's revision number of the
        item.  In the example above, the asterisk indicates that
        <filename>faces.html</filename> would be patched if we updated,
        and that <filename>bloo.png</filename> is a newly added file in
        the repository.  (The absence of any revision number next to
        <filename>bloo.png</filename> means that it doesn't yet exist in
        the working copy.)</para>
        <!-- ###TODO describe -v here as well as -uv. -u and -v use
           different <quote>long</quote> formats and need to be
           documented separately.  Moreover, as you can combine -u and
           -v, it needs to be explained what each of them does.  As -u is
           much more important than -v, and the example following that
           paragraph *is* about -u, not -v, my patch concentrated on
           that. -->
        <para>At this point, you should take a quick look at the list of
        all possible status codes in
        <xref linkend="svn.ref.svn.c.status"/>.  Here are a few of the
        more common status codes you'll see:</para>
        <screen>
A    Resource is scheduled for Addition
D    Resource is scheduled for Deletion
M    Resource has local Modifications
C    Resource has Conflicts (changes have not been completely merged
       between the repository and working copy version)
X    Resource is eXternal to this working copy (may come from another
       repository).  See <xref linkend="svn.advanced.externals"/>
?    Resource is not under version control
!    Resource is missing or incomplete (removed by another tool than
       Subversion)
</screen>
        <para>For a more detailed discussion of <command>svn
        status</command>, see <xref linkend="svn.tour.cycle.examine.status"/>.</para>
      </section>
      <section xml:id="svn.forcvs.status-vs-update.update">
        <info>
          <title>Update</title>
        </info>
        <para><command>svn update</command> updates your working copy,
        and only prints information about files that it updates.</para>
        <para>Subversion has combined the CVS <literal>P</literal> and
        <literal>U</literal> codes into just <literal>U</literal>.  When
        a merge or conflict occurs, Subversion simply prints
        <literal>G</literal> or <literal>C</literal>, rather than a
        whole sentence about it.</para>
        <para>For a more detailed discussion of <command>svn
        update</command>, see <xref linkend="svn.tour.cycle.update"/>.</para>
      </section>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.forcvs.branches-and-tags">
      <info>
        <title>Branches and Tags</title>
      </info>
      <para>Subversion doesn't distinguish between filesystem space and
      <quote>branch</quote> space; branches and tags are ordinary
      directories within the filesystem.  This is probably the single
      biggest mental hurdle a CVS user will need to climb.  Read all
      about it in <xref linkend="svn.branchmerge"/>.</para>
      <warning>
        <para>Since Subversion treats branches and tags as ordinary
        directories, always remember to check out the
        <literal>trunk</literal>
        (<literal>http://svn.example.com/repos/calc/trunk/</literal>)
        of your project, and not the project itself
        (<literal>http://svn.example.com/repos/calc/</literal>).  If
        you make the mistake of checking out the project itself,
        you'll wind up with a working copy that contains a copy of
        your project for every branch and tag you
        have.<footnote><para>That is, providing you don't run out of
        disk space before your checkout
        finishes.</para></footnote></para>
      </warning>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.forcvs.properties">
      <info>
        <title>Metadata Properties</title>
      </info>
      <para>A new feature of Subversion is that you can attach arbitrary
      metadata (or <quote>properties</quote>) to files and
      directories.  Properties are arbitrary name/value pairs
      associated with files and directories in your working
      copy.</para>
      <para>To set or get a property name, use the <command>svn
      propset</command> and <command>svn propget</command>
      subcommands.  To list all properties on an object, use
      <command>svn proplist</command>.</para>
      <para>For more information, see <xref linkend="svn.advanced.props"/>.</para>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.forcvs.conflicts">
      <info>
        <title>Conflict Resolution</title>
      </info>
      <para>CVS marks conflicts with in-line <quote>conflict
      markers</quote>, and prints a <literal>C</literal> during an
      update.  Historically, this has caused problems, because CVS
      isn't doing enough.  Many users forget about (or don't see) the
      <literal>C</literal> after it whizzes by on their terminal.
      They often forget that the conflict-markers are even present,
      and then accidentally commit files containing
      conflict-markers.</para>
      <para>Subversion solves this problem by making conflicts more
      tangible.  It remembers that a file is in a state of conflict,
      and won't allow you to commit your changes until you run
      <command>svn resolved</command>.  See <xref linkend="svn.tour.cycle.resolve"/> for more details.</para>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.forcvs.binary-and-trans">
      <info>
        <title>Binary Files and Translation</title>
      </info>
      <para>In the most general sense, Subversion handles binary files
      more gracefully than CVS does.  Because CVS uses RCS, it can
      only store successive full copies of a changing binary file.
      Subversion, however, expresses differences between files using a
      binary-differencing algorithm, regardless of whether they
      contain textual or binary data.  That means that all files are
      stored differentially (compressed) in the repository.</para>
      <para>CVS users have to mark binary files with
      <option>-kb</option> flags, to prevent data from being garbled
      (due to keyword expansion and line-ending translations).  They
      sometimes forget to do this.</para>
      <para>Subversion takes the more paranoid route&#x2014;first, it never
      performs any kind of keyword or line-ending translation unless
      you explicitly ask it do so (see <xref linkend="svn.advanced.props.special.keywords"/> and <xref linkend="svn.advanced.props.special.eol-style"/> for more details).  By default,
      Subversion treats all file data as literal byte strings, and
      files are always stored in the repository in an untranslated
      state.</para>
      <para>Second, Subversion maintains an internal notion of whether a
      file is <quote>text</quote> or <quote>binary</quote> data, but
      this notion is <emphasis>only</emphasis> extant in the working
      copy.  During an <command>svn update</command>, Subversion will
      perform contextual merges on locally modified text files, but
      will not attempt to do so for binary files.</para>
      <para>To determine whether a contextual merge is possible,
      Subversion examines the <literal>svn:mime-type</literal>
      property.  If the file has no <literal>svn:mime-type</literal>
      property, or has a mime-type that is textual (e.g.
      <literal>text/*</literal>),
      Subversion assumes it is text.  Otherwise, Subversion assumes
      the file is binary.  Subversion also helps users by running a
      binary-detection algorithm in the <command>svn import</command>
      and <command>svn add</command> commands.  These commands will
      make a good guess and then (possibly) set a binary
      <literal>svn:mime-type</literal> property on the file being
      added.  (If Subversion guesses wrong, the user can always remove
      or hand-edit the property.)</para>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.forcvs.modules">
      <info>
        <title>Versioned Modules</title>
      </info>
      <para>Unlike CVS, a Subversion working copy is aware that it has
      checked out a module.  That means that if somebody changes the
      definition of a module (e.g. adds or removes components), then a
      call to <command>svn update</command> will update the working
      copy appropriately, adding and removing components.</para>
      <para>Subversion defines modules as a list of directories within a
      directory property:  see <xref linkend="svn.advanced.externals"/>.</para>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.forcvs.auth">
      <info>
        <title>Authentication</title>
      </info>
      <para>With CVS's pserver, you are required to <quote>login</quote>
      to the server before any read or write operation&#x2014;you
      sometimes even have to login for anonymous operations.  With a
      Subversion repository using Apache <command>httpd</command> or
      <command>svnserve</command> as the server, you don't provide
      any authentication credentials at the outset&#x2014;if an
      operation that you perform requires authentication, the server
      will challenge you for your credentials (whether those
      credentials are username and password, a client certificate, or
      even both).  So if your repository is world-readable, you will
      not be required to authenticate at all for read
      operations.</para>
      <para>As with CVS, Subversion still caches your credentials on
      disk (in your <filename>~/.subversion/auth/</filename>
      directory) unless you tell it not to by using the
      <option>--no-auth-cache</option> option.</para>
      <para>The exception to this behavior, however, is in the case of
      accessing an <command>svnserve</command> server over an SSH
      tunnel, using the <literal>svn+ssh://</literal> URL scheme.  In
      that case, the <command>ssh</command> program unconditionally
      demands authentication just to start the tunnel.</para>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.forcvs.convert">
      <info>
        <title>Converting a Repository from CVS to Subversion</title>
      </info>
      <para>Perhaps the most important way to familiarize CVS users with
      Subversion is to let them continue to work on their projects
      using the new system.  And while that can be somewhat
      accomplished using a flat import into a Subversion repository of
      an exported CVS repository, the more thorough solution involves
      transferring not just the latest snapshot of their data, but all
      the history behind it as well, from one system to another.  This
      is an extremely difficult problem to solve that involves
      deducing changesets in the absence of atomicity, and translating
      between the systems' completely orthogonal branching policies,
      among other complications.  Still, there are a handful of tools
      claiming to at least partially support the ability to convert
      existing CVS repositories into Subversion ones.</para>
      <para>The most popular (and likely the most mature) conversion
      tool is cvs2svn (<uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://cvs2svn.tigris.org/">http://cvs2svn.tigris.org/</uri>), a
      Python script originally created by members of Subversion's own
      development community.  This tool is meant to run exactly
      once:  it scans your CVS repository multiple times and attempts
      to deduce commits, branches, and tags as best it can.  When it
      finishes, the result is a either a Subversion repository or a
      portable Subversion dumpfile representing your code's history.
      See the website for detailed instructions and caveats.</para>
    </section>
  </appendix>
  <!--
local variables: 
sgml-parent-document: ("book.xml" "appendix")
end:
-->
  <appendix xml:id="svn.webdav">
    <info>
      <title>WebDAV and Autoversioning</title>
    </info>
    <para>WebDAV is an extension to HTTP, and is growing more and more
    popular as a standard for file-sharing.  Today's operating systems
    are becoming extremely Web-aware, and many now have built-in
    support for mounting <quote>shares</quote> exported by WebDAV
    servers.</para>
    <para>If you use Apache as your Subversion network server, then to
    some extent you are also running a WebDAV server.  This appendix
    gives some background on the nature of this protocol, how
    Subversion uses it, and how well Subversion interoperates with
    other software that is WebDAV-aware.</para>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.webdav.basic">
      <info>
        <title>What is WebDAV?</title>
      </info>
      <para><firstterm>DAV</firstterm> stands for <quote>Distributed
      Authoring and Versioning</quote>.  RFC 2518 defines a set of
      concepts and accompanying extension methods to HTTP 1.1 that
      make the web into a more universal read/write medium.  The basic
      idea is that a WebDAV-compliant web server can act like a
      generic file server; clients can <quote>mount</quote> shared
      folders over HTTP that behave much like other network
      filesystems (such as NFS or SMB.)</para>
      <para>The tragedy, though, is that despite the acronym, the RFC
      specification doesn't actually describe any sort of version
      control.  Basic WebDAV clients and servers assume only one
      version of each file or directory exists, and can be repeatedly
      overwritten.</para>
      <para>Because RFC 2518 left out versioning concepts, another
      committee was left with the responsibility of writing RFC 3253 a
      few years later.  The new RFC adds versioning concepts to
      WebDAV, placing the <quote>V</quote> back in <quote>DAV</quote>
      &#x2014; hence the term <quote>DeltaV</quote>.  WebDAV/DeltaV
      clients and servers are often called just <quote>DeltaV</quote>
      programs, since DeltaV implies the existence of basic
      WebDAV.</para>
      <para>The original WebDAV standard has been widely successful.
      Every modern computer operating system has a general WebDAV
      client built-in (details to follow), and a number of popular
      standalone applications are also able to speak WebDAV&#x2014;
      Microsoft Office, Dreamweaver, and Photoshop to name a few.  On
      the server end, the Apache webserver has been able to provide
      WebDAV services since 1998 and is considered the de-facto
      open-source standard.  There are several other commercial WebDAV
      servers available, including Microsoft's own IIS.</para>
      <para>DeltaV, unfortunately, has not been so successful.  It's
      very difficult to find any DeltaV clients or servers.  The few
      that do exist are relatively unknown commercial products, and
      thus it's very difficult to test interoperability.  It's not
      entirely clear as to why DeltaV has remained stagnant.  Some
      argue that the specification is just too complex, others argue
      that while WebDAV's features have mass appeal (even the least
      technical users appreciate network file-sharing), version
      control features aren't interesting or necessary for most users.
      Finally, some have argued that DeltaV remains unpopular because
      there's still no open-source server product which
      implements it well.</para>
      <para>When Subversion was still in its design phase, it seemed
      like a great idea to use Apache as a network server.  It already
      had a module to provide WebDAV services.  DeltaV was a
      relatively new specification.  The hope was that the Subversion
      server module (<command>mod_dav_svn</command>) would eventually
      evolve into an open-source DeltaV reference implementation.
      Unfortunately, DeltaV has a very specific versioning model that
      doesn't quite line up with Subversion's model.  Some concepts
      were mappable, others were not.</para>
      <para>What does this mean, then?</para>
      <para>First, the Subversion client is not a fully-implemented
      DeltaV client.  It needs certain types of things from the server
      that DeltaV itself cannot provide, and thus is largely dependent
      on a number of Subversion-specific
      HTTP <literal>REPORT</literal> requests that
      only <command>mod_dav_svn</command> understands.</para>
      <para>Second, <command>mod_dav_svn</command> is not a
      fully-realized DeltaV server.  Many portions of the DeltaV
      specification were irrelevant to Subversion, and thus left
      unimplemented.</para>
      <para>There is still some debate in the developer community as to
      whether or not it's worthwhile to remedy either of these
      situations.  It's fairly unrealistic to change Subversion's
      design to match DeltaV, so there's probably no way the client
      can ever learn to get everything it needs from a general DeltaV
      server.  On the other hand,
      <command>mod_dav_svn</command> <emphasis>could</emphasis> be
      further developed to implement all of DeltaV, but it's hard to
      find motivation to do so&#x2014;there are almost no DeltaV
      clients to interoperate with.</para>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.webdav.autoversioning">
      <info>
        <title>Autoversioning</title>
      </info>
      <para>While the Subversion client is not a full DeltaV client, nor
      the Subversion server a full DeltaV server, there's still a
      glimmer of WebDAV interoperability to be happy about:  it's
      called autoversioning.</para>
      <para>Autoversioning is an optional feature defined in the DeltaV
      standard.  A typical DeltaV server will reject an ignorant
      WebDAV client attempting to do a <literal>PUT</literal> to a
      file that's under version control.  To change a
      version-controlled file, the server expects a series of proper
      versioning requests: something like
      <literal>MKACTIVITY</literal>, <literal>CHECKOUT</literal>,
      <literal>PUT</literal>, <literal>CHECKIN</literal>.  But if the
      DeltaV server supports autoversioning, then write-requests from
      basic WebDAV clients are accepted.  The server behaves as if the
      client <emphasis>had</emphasis> issued the proper series of
      versioning requests, performing a commit under the hood.  In
      other words, it allows a DeltaV server to interoperate with
      ordinary WebDAV clients that don't understand versioning.</para>
      <para>Because so many operating systems already have integrated
      WebDAV clients, the use case for this feature can be incredibly
      appealing to administrators working with non-technical users:
      imagine an office of ordinary users running Microsoft Windows or
      Mac OS.  Each user <quote>mounts</quote> the Subversion
      repository, which appears to be an ordinary network folder.
      They use the shared folder as they always do: open files, edit
      them, save them.  Meanwhile, the server is automatically
      versioning everything.  Any administrator (or knowledgeable
      user) can still use a Subversion client to search history and
      retrieve older versions of data.</para>
      <para>This scenario isn't fiction: it's real and it works, as of
      Subversion 1.2 and later.  To activate autoversioning in
      <command>mod_dav_svn</command>, use
      the <literal>SVNAutoversioning</literal> directive within
      the <filename>httpd.conf</filename> Location block, like
      so:</para>
      <screen>
&lt;Location /repos&gt;
  DAV svn
  SVNPath /var/svn/repository
  SVNAutoversioning on
&lt;/Location&gt;
</screen>
      <para>When SVNAutoversioning is active, write requests from WebDAV
      clients result in automatic commits.  A generic log message is
      auto-generated and attached to each revision.</para>
      <para>Before activating this feature, however, understand what
      you're getting into.  WebDAV clients tend to do
      <emphasis>many</emphasis> write requests, resulting in a huge
      number of automatically committed revisions.  For example, when
      saving data, many clients will do a <literal>PUT</literal> of a
      0-byte file (as a way of reserving a name) followed by another
      <literal>PUT</literal> with the real file data.  The single
      file-write results in two separate commits.  Also consider that
      many applications auto-save every few minutes, resulting in even
      more commits.</para>
      <para>If you have a post-commit hook program that sends email, you
      may want to disable email generation either altogether, or on
      certain sections of the repository; it depends on whether you
      think the influx of emails will still prove to be valuable
      notifications or not.  Also, a smart post-commit hook program
      can distinguish between a transaction created via autoversioning
      and one created through a normal <command>svn commit</command>.
      The trick is to look for a revision property
      named <literal>svn:autoversioned</literal>.  If present, the
      commit was made by a generic WebDAV client.</para>
      <para>Another feature that may be a useful complement
      for <literal>SVNAutoversioning</literal> comes from
      Apache's <literal>mod_mime</literal> module.  If a WebDAV client
      adds a new file to the repository, there's no opportunity for
      the user to set the the <literal>svn:mime-type</literal>
      property.  This might cause the file to appear as generic icon
      when viewed within a WebDAV shared folder, not having an
      association with any application.  One remedy is to have a
      sysadmin (or other Subversion-knowledgeable person) check out a
      working copy and manually set
      the <literal>svn:mime-type</literal> property on necessary
      files. But there's potentially no end to such cleanup tasks.
      Instead, you can use the <literal>ModMimeUsePathInfo</literal>
      directive in your Subversion <literal>&lt;Location&gt;</literal>
      block:</para>
      <screen>
&lt;Location /repos&gt;
  DAV svn
  SVNPath /var/svn/repository
  SVNAutoversioning on

  ModMimeUsePathInfo on

&lt;/Location&gt;
</screen>
      <para>This directive allows <literal>mod_mime</literal> to attempt
      automatic deduction of the mime-type on new files that enter the
      repository via autoversioning.  The module looks at the file's
      named extension and possibly the contents as well; if the file
      matches some common patterns, then the the
      file's <literal>svn:mime-type</literal> property will be set
      automatically.</para>
    </section>
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <!-- ================================================================= -->
    <section xml:id="svn.webdav.clients">
      <info>
        <title>Client Interoperability</title>
      </info>
      <para>All WebDAV clients fall into one of three
      categories&#x2014;standalone applications, file-explorer
      extensions, or filesystem implementations.  These categories
      broadly define the types of WebDAV functionality available to
      users.  <xref linkend="svn.webdav.clients.tbl-1"/> gives our
      categorization and a quick description of some common pieces of
      WebDAV-enabled software.  More details about these software
      offerings, as well as their general category, can be found in
      the sections that follow.</para>
      <table xml:id="svn.webdav.clients.tbl-1">
        <info>
          <title>Common WebDAV Clients</title>
        </info>
        <tgroup cols="6">
          <thead>
            <row>
              <entry>Software</entry>
              <entry>Type</entry>
              <entry>Windows</entry>
              <entry>Mac</entry>
              <entry>Linux</entry>
              <entry>Description</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>Adobe Photoshop</entry>
              <entry>Standalone WebDAV application</entry>
              <entry>X</entry>
              <entry/>
              <entry/>
              <entry>Image editing software, allowing direct opening
              from, and writing to, WebDAV URLs</entry>
            </row>
            <row>
              <entry>Cadaver</entry>
              <entry>Standalone WebDAV application</entry>
              <entry/>
              <entry>X</entry>
              <entry>X</entry>
              <entry>Command-line WebDAV client supporting file
              transfer, tree, and locking operations</entry>
            </row>
            <row>
              <entry>DAV Explorer</entry>
              <entry>Standalone WebDAV application</entry>
              <entry>X</entry>
              <entry>X</entry>
              <entry>X</entry>
              <entry>Java GUI tool for exploring WebDAV shares</entry>
            </row>
            <row>
              <entry>Macromedia Dreamweaver</entry>
              <entry>Standalone WebDAV application</entry>
              <entry>X</entry>
              <entry/>
              <entry/>
              <entry>Web production software able to directly read from
              and write to WebDAV URLs</entry>
            </row>
            <row>
              <entry>Microsoft Office</entry>
              <entry>Standalone WebDAV application</entry>
              <entry>X</entry>
              <entry/>
              <entry/>
              <entry>Office productivity suite with several components
              able to directly read from and write to WebDAV
              URLs</entry>
            </row>
            <row>
              <entry>Microsoft Web Folders</entry>
              <entry>File-explorer WebDAV extension</entry>
              <entry>X</entry>
              <entry/>
              <entry/>
              <entry>GUI file explorer program able to perform tree
              operations on a WebDAV share</entry>
            </row>
            <row>
              <entry>GNOME Nautilus</entry>
              <entry>File-explorer WebDAV extension</entry>
              <entry/>
              <entry/>
              <entry>X</entry>
              <entry>GUI file explorer able to perform tree
              operations on a WebDAV share</entry>
            </row>
            <row>
              <entry>KDE Konqueror</entry>
              <entry>File-explorer WebDAV extension</entry>
              <entry/>
              <entry/>
              <entry>X</entry>
              <entry>GUI file explorer able to perform tree
              operations on a WebDAV share</entry>
            </row>
            <row>
              <entry>Mac OS X</entry>
              <entry>WebDAV filesystem implementation</entry>
              <entry/>
              <entry>X</entry>
              <entry/>
              <entry>Operating system has built-in support for mounting
              WebDAV shares.</entry>
            </row>
            <row>
              <entry>Novell NetDrive</entry>
              <entry>WebDAV filesystem implementation</entry>
              <entry>X</entry>
              <entry/>
              <entry/>
              <entry>Drive-mapping program for assigning Windows drive
              letters to a mounted remote WebDAV share</entry>
            </row>
            <row>
              <entry>SRT WebDrive</entry>
              <entry>WebDAV filesystem implementation</entry>
              <entry>X</entry>
              <entry/>
              <entry/>
              <entry>File transfer software which, among other things,
              allows the assignment of Windows drive letters to a
              mounted remote WebDAV share</entry>
            </row>
            <row>
              <entry>davfs2</entry>
              <entry>WebDAV filesystem implementation</entry>
              <entry/>
              <entry/>
              <entry>X</entry>
              <entry>Linux file system driver that allows you to mount a
              WebDAV share</entry>
            </row>
          </tbody>
        </tgroup>
      </table>
      <!-- =============================================================== -->
      <section xml:id="svn.webdav.clients.standalone">
        <info>
          <title>Standalone WebDAV applications</title>
        </info>
        <para>A WebDAV application is a program which speakes WebDAV
        protocols with a WebDAV server.  We'll cover some of the most
        popular programs with this kind of WebDAV support.</para>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.webdav.clients.standalone.windows">
          <info>
            <title>Microsoft Office, Dreamweaver, Photoshop</title>
          </info>
          <para>On Windows, there are several well-known applications
          that contain integrated WebDAV client functionality, such as
          Microsoft's Office,
          <footnote><para>WebDAV support was removed from Microsoft Access for
              some reason, but exists in the rest of the Office
              suite.</para></footnote>
          Adobe's Photoshop, and Macromedia's Dreamweaver programs.
          They're able to directly open and save to URLs, and tend to
          make heavy use of WebDAV locks when editing a file.</para>
          <para>Note that while many of these programs also exist for
          the Mac OS X, they do not appear to support WebDAV directly
          on that platform.  In fact, on Mac OS X, the
          <guimenu>File-&gt;Open</guimenu> dialog box doesn't allow
          one to type a path or URL at all.  It's likely that the
          WebDAV features were deliberately left out of Macintosh
          versions of these programs, since OS X already provides such
          excellent low-level filesystem support for WebDAV.</para>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.webdav.clients.standalone.free">
          <info>
            <title>Cadaver, DAV Explorer</title>
          </info>
          <para>Cadaver is a bare-bones Unix commandline program for
          browsing and changing WebDAV shares.  Like the Subversion
          client, it uses the neon HTTP library&#x2014;not
          surprisingly, since both neon and cadaver are written by the
          same author.  Cadaver is free software (GPL license) and is
          available at
          <uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.webdav.org/cadaver/">http://www.webdav.org/cadaver/</uri>.</para>
          <para>Using cadaver is similar to using a commandline FTP
          program, and thus it's extremely useful for basic WebDAV
          debugging.  It can be used to upload or download files in a
          pinch, and also to examine properties, and to copy, move,
          lock or unlock files:</para>
          <screen>
$ cadaver http://host/repos
dav:/repos/&gt; ls
Listing collection `/repos/': succeeded.
Coll: &gt; foobar                                 0  May 10 16:19
      &gt; playwright.el                       2864  May  4 16:18
      &gt; proofbypoem.txt                     1461  May  5 15:09
      &gt; westcoast.jpg                      66737  May  5 15:09

dav:/repos/&gt; put README
Uploading README to `/repos/README':
Progress: [=============================&gt;] 100.0% of 357 bytes succeeded.

dav:/repos/&gt; get proofbypoem.txt
Downloading `/repos/proofbypoem.txt' to proofbypoem.txt:
Progress: [=============================&gt;] 100.0% of 1461 bytes succeeded.
</screen>
          <para>DAV Explorer is another standalone WebDAV client, written
          in Java.  It's under a free Apache-like license and is
          available at <uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.ics.uci.edu/~webdav/">http://www.ics.uci.edu/~webdav/</uri>.
          DAV Explorer does everything cadaver does, but has the
          advantages of being portable and being a more user-friendly GUI
          application.  It's also one of the first clients to support
          the new WebDAV Access Control Protocol (RFC 3744).</para>
          <para>Of course, DAV Explorer's ACL support is useless in this
          case, since <command>mod_dav_svn</command> doesn't support
          it.  The fact that both Cadaver and DAV Explorer support
          some limited DeltaV commands isn't particularly useful
          either, since they don't allow <literal>MKACTIVITY</literal>
          requests.  But it's not relevant anyway; we're assuming all
          of these clients are operating against an autoversioning
          repository.</para>
        </section>
      </section>
      <!-- =============================================================== -->
      <section xml:id="svn.webdav.clients.file-explorer-extensions">
        <info>
          <title>File-explorer WebDAV extensions</title>
        </info>
        <para>Some popular file explorer GUI programs support WebDAV
        extensions which allow a user to browse a DAV share as if it
        was just another directory on the local computer, and to
        perform basic tree editing operations on the items in that
        share.  For example, Windows Explorer is able to browse a
        WebDAV server as a <quote>network place</quote>.  Users can
        drag files to and from the desktop, or can rename, copy, or
        delete files in the usual way.  But because it's only a
        feature of the file-explorer, the DAV share isn't visible to
        ordinary applications.  All DAV interaction must happen
        through the explorer interface.</para>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.webdav.clients.file-explorer-extensions.windows">
          <info>
            <title>Microsoft Web Folders</title>
          </info>
          <para>Microsoft was one of the original backers of the WebDAV
          specification, and first started shipping a client in Windows
          98, known as <quote>Web Folders</quote>.  This client was also
          shipped in Windows NT4 and 2000.</para>
          <para>The original Web Folders client was an extension to
          Explorer, the main GUI program used to browse filesystems.  It
          works well enough.  In Windows 98, the feature might need to
          be explicitly installed if Web Folders aren't already visible
          inside <quote>My Computer</quote>.  In Windows 2000, simply
          add a new <quote>network place</quote>, enter the URL, and the
          WebDAV share will pop up for browsing.</para>
          <para>With the release of Windows XP, Microsoft started shipping
          a new implementation of Web Folders, known as the <quote>WebDAV
          mini-redirector</quote>.  The new implementation is a
          filesystem-level client, allowing WebDAV shares to be mounted
          as drive letters.  Unfortunately, this implementation is
          incredibly buggy.  The client usually tries to convert http
          URLs (<literal>http://host/repos</literal>) into UNC share
          notation (<literal>\\host\repos</literal>); it also often
          tries to use Windows Domain authentication to respond to
          basic-auth HTTP challenges, sending usernames as
          <literal>HOST\username</literal>.  These interoperability
          problems are severe and documented in numerous places around
          the web, to the frustration of many users.  Even Greg Stein,
          the original author of Apache's WebDAV module, recommends
          against trying to use XP Web Folders against an Apache
          server.</para>
          <para>It turns out that the original
          <quote>Explorer-only</quote> Web Folders implementation isn't
          dead in XP, it's just buried.  It's still possible to find it
          by using this technique:</para>
          <orderedlist inheritnum="ignore" continuation="restarts">
            <listitem>
              <para>Go to 'Network Places'.</para>
            </listitem>
            <listitem>
              <para>Add a new network place.</para>
            </listitem>
            <listitem>
              <para>When prompted, enter the URL of the repository, but
              <emphasis>include a port number</emphasis> in the URL.
              For example, <literal>http://host/repos</literal> would be
              entered as <literal>http://host:80/repos</literal> instead.
            </para>
            </listitem>
            <listitem>
              <para>Respond to any authentication prompts.</para>
            </listitem>
          </orderedlist>
          <para>There are a number of other rumored workarounds to the
          problems, but none of them seem to work on all versions and
          patchlevels of Windows XP.  In our tests, only the previous
          algorithm seems to work consistently on every system.  The
          general consensus of the WebDAV community is that you should
          avoid the new Web Folders implementation and use the old one
          instead, and that if you need a real filesystem-level
          client for Windows XP, then use a third-party program like
          WebDrive or NetDrive.</para>
          <para>A final tip: if you're attempting to use XP Web Folders,
          make sure you have the absolute latest version from
          Microsoft.  For example, Microsoft released a bug-fixed
          version in January 2005, available at
          <uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://support.microsoft.com/?kbid=892211">http://support.microsoft.com/?kbid=892211</uri>.
          In particular, this release is known to fix a bug whereby
          browsing a DAV share shows an unexpected infinite
          recursion.</para>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.webdav.clients.file-explorer-extensions.linux-de">
          <info>
            <title>Nautilus, Konqueror</title>
          </info>
          <para>Nautilus is the official file manager/browser for the
          GNOME desktop (<uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.gnome.org">http://www.gnome.org</uri>), and
          Konqueror is the manager/browser for the KDE desktop (<uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.kde.org">http://www.kde.org</uri>).  Both of these applications have
          an explorer-level WebDAV client built-in, and operate just
          fine against an autoversioning repository.</para>
          <para>In GNOME's Nautilus, from the <guimenu>File
          menu</guimenu>, select <guimenuitem>Open
          location</guimenuitem> and enter the URL.  The repository
          should then be displayed like any other filesystem.</para>
          <para>In KDE's Konqueror, you need to use the
          <literal>webdav://</literal> scheme when entering the URL in
          the location bar.  If you enter
          an <literal>http://</literal> URL, Konqueror will behave
          like an ordinary web browser.  You'll likely see the generic
          HTML directory listing produced
          by <command>mod_dav_svn</command>.  By entering
          <literal>webdav://host/repos</literal> instead of
          <literal>http://host/repos</literal>, Konqueror becomes a
          WebDAV client and displays the repository as a
          filesystem.</para>
        </section>
      </section>
      <section xml:id="svn.webdav.clients.fs-impl">
        <info>
          <title>WebDAV filesystem implementation</title>
        </info>
        <para>The WebDAV filesystem implementation is arguably the best
        sort of WebDAV client.  It's implemented as a low-level
        filesystem module, typically within the operating system's
        kernel.  This means that the DAV share is mounted like any
        other network filesystem, similar to mounting an NFS share on
        Unix, or attaching an SMB share as drive letter in Windows.
        As a result, this sort of client provides completely
        transparent read/write WebDAV access to all programs.
        Applications aren't even aware that WebDAV requests are
        happening.</para>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.webdav.clients.fs-impl.windows">
          <info>
            <title>WebDrive, NetDrive</title>
          </info>
          <para>Both WebDrive and NetDrive are excellent commercial
          products which allow a WebDAV share to be attached as drive
          letters in Windows.  We've had nothing but success with
          these products.  At the time of writing, WebDrive can be
          purchased from South River Technologies (<uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.southrivertech.com">http://www.southrivertech.com</uri>).  NetDrive ships with
          Netware, is free of charge, and can be found by searching
          the web for <quote>netdrive.exe</quote>.  Though it is
          freely available online, users are required to have a
          Netware license.  (If any of that sounds odd to you, you're
          not alone.  See this page on Novell's website: <uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.novell.com/coolsolutions/qna/999.html">http://www.novell.com/coolsolutions/qna/999.html</uri>)</para>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.webdav.clients.fs-impl.macosx">
          <info>
            <title>Mac OS X</title>
          </info>
          <para>Apple's OS X operating system has an integrated
          filesystem-level WebDAV client.  From the Finder, select the
          <guimenuitem>Connect to Server</guimenuitem> item from the
          <guimenu>Go menu</guimenu>.  Enter a WebDAV URL, and it
          appears as a disk on the desktop, just like any other
          mounted volume.  You can also mount a WebDAV share from the
          Darwin terminal by using the <literal>webdav</literal>
          filesystem type with the <command>mount</command> command:</para>
          <screen>
$ mount -t webdav http://svn.example.com/repos/project /some/mountpoint
$
</screen>
          <para>Note that if your <command>mod_dav_svn</command> is
          older than version 1.2, OS X will refuse to mount the share
          as read-write; it will appear as read-only.  This is because
          OS X insists on locking support for read-write shares, and
          the ability to lock files first appeared in Subversion
          1.2.</para>
          <para>One more word of warning: OS X's WebDAV client can
          sometimes be overly sensitive to HTTP redirects.  If OS X is
          unable to mount the repository at all, you may need to enable
          the BrowserMatch directive in the Apache server's
          <filename>httpd.conf</filename>:</para>
          <screen>
BrowserMatch "^WebDAVFS/1.[012]" redirect-carefully
</screen>
        </section>
        <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -->
        <section xml:id="svn.webdav.clients.fs-impl.linux">
          <info>
            <title>Linux davfs2</title>
          </info>
          <para>Linux davfs2 is a filesystem module for the Linux kernel,
          whose development is located at <uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://dav.sourceforge.net/">http://dav.sourceforge.net/</uri>.  Once installed, a WebDAV
          network share can be mounted with the usual Linux mount
          command:</para>
          <screen>
$ mount.davfs http://host/repos /mnt/dav
</screen>
        </section>
      </section>
    </section>
  </appendix>
  <!--
local variables:
sgml-parent-document: ("book.xml" "appendix")
end:
-->
  <appendix xml:id="svn.3rdparty">
    <info>
      <title>Third Party Tools</title>
    </info>
    <para>Subversion's modular design (covered in <xref linkend="svn.developer.layerlib"/>) and the availability of
    language bindings (as described in <xref linkend="svn.developer.usingapi.otherlangs"/>) make it a likely
    candidate for use as an extension or backend to other pieces of
    software.  For a listing of many third-party tools that are using
    Subversion functionality under-the-hood, check out the Links page on the
    Subversion website (<uri xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://subversion.tigris.org/project_links.html">http://subversion.tigris.org/project_links.html</uri>).</para>
  </appendix>
  <!--
local variables: 
sgml-parent-document: ("book.xml" "appendix")
end:
-->
  <appendix xml:id="svn.copyright">
    <info>
      <title>Copyright</title>
    </info>
    <programlisting>

Copyright (c) 2002-2007
Ben Collins-Sussman, Brian W. Fitzpatrick, C. Michael Pilato.  

This work is licensed under the Creative Commons Attribution License.
To view a copy of this license, visit
http://creativecommons.org/licenses/by/2.0/ or send a letter to
Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305,
USA.

A summary of the license is given below, followed by the full legal
text.

--------------------------------------------------------------------

You are free:

    * to copy, distribute, display, and perform the work
    * to make derivative works
    * to make commercial use of the work

Under the following conditions:
	
Attribution. You must give the original author credit.

    * For any reuse or distribution, you must make clear to others the
      license terms of this work.

    * Any of these conditions can be waived if you get permission from
      the author.

Your fair use and other rights are in no way affected by the above.

The above is a summary of the full license below.

====================================================================

Creative Commons Legal Code
Attribution 2.0

CREATIVE COMMONS CORPORATION IS NOT A LAW FIRM AND DOES NOT PROVIDE
LEGAL SERVICES. DISTRIBUTION OF THIS LICENSE DOES NOT CREATE AN
ATTORNEY-CLIENT RELATIONSHIP. CREATIVE COMMONS PROVIDES THIS
INFORMATION ON AN "AS-IS" BASIS. CREATIVE COMMONS MAKES NO WARRANTIES
REGARDING THE INFORMATION PROVIDED, AND DISCLAIMS LIABILITY FOR
DAMAGES RESULTING FROM ITS USE.

License

THE WORK (AS DEFINED BELOW) IS PROVIDED UNDER THE TERMS OF THIS
CREATIVE COMMONS PUBLIC LICENSE ("CCPL" OR "LICENSE"). THE WORK IS
PROTECTED BY COPYRIGHT AND/OR OTHER APPLICABLE LAW. ANY USE OF THE
WORK OTHER THAN AS AUTHORIZED UNDER THIS LICENSE OR COPYRIGHT LAW IS
PROHIBITED.

BY EXERCISING ANY RIGHTS TO THE WORK PROVIDED HERE, YOU ACCEPT AND
AGREE TO BE BOUND BY THE TERMS OF THIS LICENSE. THE LICENSOR GRANTS
YOU THE RIGHTS CONTAINED HERE IN CONSIDERATION OF YOUR ACCEPTANCE OF
SUCH TERMS AND CONDITIONS.

1. Definitions

   a. "Collective Work" means a work, such as a periodical issue,
      anthology or encyclopedia, in which the Work in its entirety in
      unmodified form, along with a number of other contributions,
      constituting separate and independent works in themselves, are
      assembled into a collective whole. A work that constitutes a
      Collective Work will not be considered a Derivative Work (as
      defined below) for the purposes of this License.

   b. "Derivative Work" means a work based upon the Work or upon the
      Work and other pre-existing works, such as a translation,
      musical arrangement, dramatization, fictionalization, motion
      picture version, sound recording, art reproduction, abridgment,
      condensation, or any other form in which the Work may be recast,
      transformed, or adapted, except that a work that constitutes a
      Collective Work will not be considered a Derivative Work for the
      purpose of this License. For the avoidance of doubt, where the
      Work is a musical composition or sound recording, the
      synchronization of the Work in timed-relation with a moving
      image ("synching") will be considered a Derivative Work for the
      purpose of this License.

   c. "Licensor" means the individual or entity that offers the Work
      under the terms of this License.

   d. "Original Author" means the individual or entity who created the Work.

   e. "Work" means the copyrightable work of authorship offered under
      the terms of this License.

   f. "You" means an individual or entity exercising rights under this
      License who has not previously violated the terms of this
      License with respect to the Work, or who has received express
      permission from the Licensor to exercise rights under this
      License despite a previous violation.

2. Fair Use Rights. Nothing in this license is intended to reduce,
   limit, or restrict any rights arising from fair use, first sale or
   other limitations on the exclusive rights of the copyright owner
   under copyright law or other applicable laws.

3. License Grant. Subject to the terms and conditions of this License,
   Licensor hereby grants You a worldwide, royalty-free,
   non-exclusive, perpetual (for the duration of the applicable
   copyright) license to exercise the rights in the Work as stated
   below:

   a. to reproduce the Work, to incorporate the Work into one or more
      Collective Works, and to reproduce the Work as incorporated in
      the Collective Works;

   b. to create and reproduce Derivative Works;

   c. to distribute copies or phonorecords of, display publicly,
      perform publicly, and perform publicly by means of a digital
      audio transmission the Work including as incorporated in
      Collective Works;

   d. to distribute copies or phonorecords of, display publicly,
      perform publicly, and perform publicly by means of a digital
      audio transmission Derivative Works.

   e.

      For the avoidance of doubt, where the work is a musical composition:

         i. Performance Royalties Under Blanket Licenses. Licensor
            waives the exclusive right to collect, whether
            individually or via a performance rights society
            (e.g. ASCAP, BMI, SESAC), royalties for the public
            performance or public digital performance (e.g. webcast)
            of the Work.

        ii. Mechanical Rights and Statutory Royalties. Licensor waives
            the exclusive right to collect, whether individually or
            via a music rights agency or designated agent (e.g. Harry
            Fox Agency), royalties for any phonorecord You create from
            the Work ("cover version") and distribute, subject to the
            compulsory license created by 17 USC Section 115 of the US
            Copyright Act (or the equivalent in other jurisdictions).

   f. Webcasting Rights and Statutory Royalties. For the avoidance of
      doubt, where the Work is a sound recording, Licensor waives the
      exclusive right to collect, whether individually or via a
      performance-rights society (e.g. SoundExchange), royalties for
      the public digital performance (e.g. webcast) of the Work,
      subject to the compulsory license created by 17 USC Section 114
      of the US Copyright Act (or the equivalent in other
      jurisdictions).

The above rights may be exercised in all media and formats whether now
known or hereafter devised. The above rights include the right to make
such modifications as are technically necessary to exercise the rights
in other media and formats. All rights not expressly granted by
Licensor are hereby reserved.

4. Restrictions.The license granted in Section 3 above is expressly
   made subject to and limited by the following restrictions:

   a. You may distribute, publicly display, publicly perform, or
      publicly digitally perform the Work only under the terms of this
      License, and You must include a copy of, or the Uniform Resource
      Identifier for, this License with every copy or phonorecord of
      the Work You distribute, publicly display, publicly perform, or
      publicly digitally perform. You may not offer or impose any
      terms on the Work that alter or restrict the terms of this
      License or the recipients' exercise of the rights granted
      hereunder. You may not sublicense the Work. You must keep intact
      all notices that refer to this License and to the disclaimer of
      warranties. You may not distribute, publicly display, publicly
      perform, or publicly digitally perform the Work with any
      technological measures that control access or use of the Work in
      a manner inconsistent with the terms of this License
      Agreement. The above applies to the Work as incorporated in a
      Collective Work, but this does not require the Collective Work
      apart from the Work itself to be made subject to the terms of
      this License. If You create a Collective Work, upon notice from
      any Licensor You must, to the extent practicable, remove from
      the Collective Work any reference to such Licensor or the
      Original Author, as requested. If You create a Derivative Work,
      upon notice from any Licensor You must, to the extent
      practicable, remove from the Derivative Work any reference to
      such Licensor or the Original Author, as requested.

   b. If you distribute, publicly display, publicly perform, or
      publicly digitally perform the Work or any Derivative Works or
      Collective Works, You must keep intact all copyright notices for
      the Work and give the Original Author credit reasonable to the
      medium or means You are utilizing by conveying the name (or
      pseudonym if applicable) of the Original Author if supplied; the
      title of the Work if supplied; to the extent reasonably
      practicable, the Uniform Resource Identifier, if any, that
      Licensor specifies to be associated with the Work, unless such
      URI does not refer to the copyright notice or licensing
      information for the Work; and in the case of a Derivative Work,
      a credit identifying the use of the Work in the Derivative Work
      (e.g., "French translation of the Work by Original Author," or
      "Screenplay based on original Work by Original Author"). Such
      credit may be implemented in any reasonable manner; provided,
      however, that in the case of a Derivative Work or Collective
      Work, at a minimum such credit will appear where any other
      comparable authorship credit appears and in a manner at least as
      prominent as such other comparable authorship credit.

5. Representations, Warranties and Disclaimer

UNLESS OTHERWISE MUTUALLY AGREED TO BY THE PARTIES IN WRITING,
LICENSOR OFFERS THE WORK AS-IS AND MAKES NO REPRESENTATIONS OR
WARRANTIES OF ANY KIND CONCERNING THE WORK, EXPRESS, IMPLIED,
STATUTORY OR OTHERWISE, INCLUDING, WITHOUT LIMITATION, WARRANTIES OF
TITLE, MERCHANTIBILITY, FITNESS FOR A PARTICULAR PURPOSE,
NONINFRINGEMENT, OR THE ABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY,
OR THE PRESENCE OF ABSENCE OF ERRORS, WHETHER OR NOT
DISCOVERABLE. SOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF IMPLIED
WARRANTIES, SO SUCH EXCLUSION MAY NOT APPLY TO YOU.

6. Limitation on Liability. EXCEPT TO THE EXTENT REQUIRED BY
   APPLICABLE LAW, IN NO EVENT WILL LICENSOR BE LIABLE TO YOU ON ANY
   LEGAL THEORY FOR ANY SPECIAL, INCIDENTAL, CONSEQUENTIAL, PUNITIVE
   OR EXEMPLARY DAMAGES ARISING OUT OF THIS LICENSE OR THE USE OF THE
   WORK, EVEN IF LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH
   DAMAGES.

7. Termination

   a. This License and the rights granted hereunder will terminate
      automatically upon any breach by You of the terms of this
      License. Individuals or entities who have received Derivative
      Works or Collective Works from You under this License, however,
      will not have their licenses terminated provided such
      individuals or entities remain in full compliance with those
      licenses. Sections 1, 2, 5, 6, 7, and 8 will survive any
      termination of this License.

   b. Subject to the above terms and conditions, the license granted
      here is perpetual (for the duration of the applicable copyright
      in the Work). Notwithstanding the above, Licensor reserves the
      right to release the Work under different license terms or to
      stop distributing the Work at any time; provided, however that
      any such election will not serve to withdraw this License (or
      any other license that has been, or is required to be, granted
      under the terms of this License), and this License will continue
      in full force and effect unless terminated as stated above.

8. Miscellaneous

   a. Each time You distribute or publicly digitally perform the Work
      or a Collective Work, the Licensor offers to the recipient a
      license to the Work on the same terms and conditions as the
      license granted to You under this License.

   b. Each time You distribute or publicly digitally perform a
      Derivative Work, Licensor offers to the recipient a license to
      the original Work on the same terms and conditions as the
      license granted to You under this License.

   c. If any provision of this License is invalid or unenforceable
      under applicable law, it shall not affect the validity or
      enforceability of the remainder of the terms of this License,
      and without further action by the parties to this agreement,
      such provision shall be reformed to the minimum extent necessary
      to make such provision valid and enforceable.

   d. No term or provision of this License shall be deemed waived and
      no breach consented to unless such waiver or consent shall be in
      writing and signed by the party to be charged with such waiver
      or consent.

   e. This License constitutes the entire agreement between the
      parties with respect to the Work licensed here. There are no
      understandings, agreements or representations with respect to
      the Work not specified here. Licensor shall not be bound by any
      additional provisions that may appear in any communication from
      You. This License may not be modified without the mutual written
      agreement of the Licensor and You.

Creative Commons is not a party to this License, and makes no warranty
whatsoever in connection with the Work. Creative Commons will not be
liable to You or any party on any legal theory for any damages
whatsoever, including without limitation any general, special,
incidental or consequential damages arising in connection to this
license. Notwithstanding the foregoing two (2) sentences, if Creative
Commons has expressly identified itself as the Licensor hereunder, it
shall have all rights and obligations of Licensor.

Except for the limited purpose of indicating to the public that the
Work is licensed under the CCPL, neither party will use the trademark
"Creative Commons" or any related trademark or logo of Creative
Commons without the prior written consent of Creative Commons. Any
permitted use will be in compliance with Creative Commons'
then-current trademark usage guidelines, as may be published on its
website or otherwise made available upon request from time to time.

Creative Commons may be contacted at http://creativecommons.org/.

====================================================================
</programlisting>
  </appendix>
  <!--
local variables: 
sgml-parent-document: ("book.xml" "")
end:
-->
  <index xml:id="svn.index"/>
</book>

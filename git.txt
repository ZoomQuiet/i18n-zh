If you are commit to the i18n-zh project repository, please read this first.

                ============================================
                    Guide to i18n-zh project repository
                ============================================

* Introduction
* Software version requirements
* Configuration
* Repository on repo.or.cz
* Repository maintenance
* Common git operation
* Getting the latest upstream code
* Using git-svn
* Diff & Patch
* File permission & encoding
* Verifying your po file
* Formating your po file

Introduction
============
*) l10n

*) doc

    1. Translation

    2. Write document

*) i18n


Software version requirements
=============================
*) GNU gettext 0.17
*) Python 2.5.2
*) translate-toolkit(pomerge & pofilter) 1.1.1


Configuration
=============
The flowwing is the sample configuration, please modify some fields.

*) ~/.gitconfig
    [core]
        compression = 9

    [diff]
        color = auto

    [pack]
        window = 1024
        depth = 512

    [color]
        branch = auto
        diff = auto
        status = auto

    [user]
        # email = dongsheng.song@gmail.com
        # name = Dongsheng Song

    [alias]
        b = branch
        t = tag
        f = fetch
        r = rebase
        m = merge
        st = status
        ci = commit -a

    [remote "origin"]
        url = ssh://repo.or.cz/srv/git/i18n-zh.git
        fetch = +refs/heads/*:refs/remotes/origin/*

    [branch "master"]
        remote = origin
        merge = refs/heads/master


*) ~/.ssh/config
    # Host repo.or.cz
    #     HostName 152.69.94.80
    #     Port 2222
    #     User cauchy


Repository on repo.or.cz
========================
*) gitweb

    http://repo.or.cz/w/i18n-zh.git

*) clone

    # cat .git/branches/origin

    git://repo.or.cz/i18n-zh.git
    http://repo.or.cz/r/i18n-zh.git

*) push

    git+ssh://repo.or.cz/srv/git/i18n-zh.git


Repository maintenance
=====================
*) pack

    git-repack -a -d -f --window=1024 --depth=512

*) fsck

    git-fsck --unreachable --strict HEAD $(cat .git/refs/heads/*)
    git-prune


Common git operation
====================
*) clone
    git-clone git://repo.or.cz/i18n-zh.git

*) update

    "git-pull -v" or "git fetch", See section "Getting the latest upstream code".

*) restore
    git-checkout -f filename

*) commit

    git-commit -a -m "your log messages"

    if you commit patch by someone, use option "--author":

    git-commit -a --author someone -m "your log messages"

*) reset

    git reset --soft HEAD^

*) push

    git-push git+ssh://repo.or.cz/srv/git/i18n-zh.git master:master


Getting the latest upstream code
================================
There are two ways to update your local repository. Which one to use depends on
whether you have committed changes in the meantime.

*) No changes: pull

    The command to update your local repository is:

    git pull

    It will pull down the latest repository information from the origin remote
    file (which points at where you initially cloned the repository from), then
    merge. If the new changes don't conflict with anything locally, the merge
    will "fast-forward" your branch reference to the new head. If new changes
    do conflict, it will try to do an automatic merge using a couple of
    different schemes, and then automatically commits the merge if it's
    satisfied. If you notice that your pull resulted in a merge (in the output
    of pull), you might want to use gitk to see if the merge did what you
    expected it to. If it isn't satisfied, then you have to resolve the
    conflict manually.

*) You've made changes: fetch and rebase

    If you have committed local changes, then git-pull will create a spurious
    "Merge" commit, which will pollute the change list when you later push
    upstream. To avoid this, do these two commands:

    git fetch
    git rebase origin

    Instead of merging, this attempts to insert the changes you pull from the
    origin repository before your local changes, avoiding the merge message.


Using git-svn
=============
*) Clone a repo (like git clone)

    git-svn clone -T trunk -b branches -t tags https://i18n-zh.googlecode.com/svn/trunk

*) Reset your master to trunk (or any other branch)

    git reset --hard remotes/trunk

*) Do some work and commit locally to git

    git commit ...

*) Something is committed to SVN, rebase your local changes against the latest
changes in SVN

    git-svn rebase

*) Now commit your changes (that were committed previously using git) to SVN,
as well as automatically updating your working HEAD:

    git-svn dcommit


Diff & Patch
============
*) diff
    diff -wBNr -x .git . i18n-zh.origin

*) patch
    patch -p0 < zh_CN.patch


File permission & encoding
==========================
*) permission

    set umask to 002, i.e.

        set directory to 0775
        set common file to 0664
        set execute file to 0775

*) encoding
    using utf-8 without signature(no BOM)


Verifying your po file
======================
Please verify your po file is valid:

    msgfmt --check-accelerators --statistics -c -o zh_CN.mo zh_CN.po


Formating your po file
======================
Please format your translation before send po to the mailing list,
or commit to the repository.

    msgmerge --no-wrap -F -o zh_CN-new.po zh_CN.po example.pot
    mv -f zh_CN-new.po zh_CN.po

This can minimize the diff output, review your translation is easy.
